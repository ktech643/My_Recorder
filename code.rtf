{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red195\green123\blue90;\red23\green23\blue26;\red174\green176\blue183;
\red185\green101\blue173;\red164\green160\blue78;\red89\green158\blue96;\red38\green157\blue169;\red71\green149\blue242;
\red103\green107\blue114;\red31\green46\blue49;}
{\*\expandedcolortbl;;\csgenericrgb\c76471\c48235\c35294;\csgenericrgb\c9020\c9020\c10196;\csgenericrgb\c68235\c69020\c71765;
\csgenericrgb\c72549\c39608\c67843;\csgenericrgb\c64314\c62745\c30588;\csgenericrgb\c34902\c61961\c37647;\csgenericrgb\c14902\c61569\c66275;\csgenericrgb\c27843\c58431\c94902;
\csgenericrgb\c40392\c41961\c44706;\csgenericrgb\c12157\c18039\c19216;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 package \cf4 com.checkmate.android.util;\
\
\cf2 import static \cf4 android.content.pm.PackageManager.
\f1\i \cf5 PERMISSION_GRANTED
\f0\i0 \cf4 ;\
\cf2 import static \cf4 android.provider.Settings.
\f1\i \cf5 ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
\f0\i0 \cf4 ;\
\
\cf2 import \cf4 android.Manifest;\
\cf2 import \cf4 android.accessibilityservice.AccessibilityService;\
\cf2 import \cf4 android.annotation.\cf6 SuppressLint\cf4 ;\
\cf2 import \cf4 android.app.Activity;\
\cf2 import \cf4 android.app.ActivityManager;\
\cf2 import \cf4 android.app.PendingIntent;\
\cf2 import \cf4 android.content.BroadcastReceiver;\
\cf2 import \cf4 android.content.ComponentName;\
\cf2 import \cf4 android.content.ContentResolver;\
\cf2 import \cf4 android.content.Context;\
\cf2 import \cf4 android.content.Intent;\
\cf2 import \cf4 android.content.IntentFilter;\
\cf2 import \cf4 android.content.ServiceConnection;\
\cf2 import \cf4 android.content.SharedPreferences;\
\cf2 import \cf4 android.content.pm.ActivityInfo;\
\cf2 import \cf4 android.content.pm.PackageManager;\
\cf2 import \cf4 android.content.res.Configuration;\
\cf2 import \cf4 android.database.sqlite.SQLiteDatabase;\
\cf2 import \cf4 android.database.sqlite.SQLiteException;\
\cf2 import \cf4 android.graphics.Color;\
\cf2 import \cf4 android.graphics.SurfaceTexture;\
\cf2 import \cf4 android.hardware.usb.UsbDevice;\
\cf2 import \cf4 android.hardware.usb.UsbManager;\
\cf2 import \cf4 android.media.MediaFormat;\
\cf2 import \cf4 android.media.MediaRecorder;\
\cf2 import \cf4 android.media.projection.MediaProjectionManager;\
\cf2 import \cf4 android.net.ConnectivityManager;\
\cf2 import \cf4 android.net.LinkProperties;\
\cf2 import \cf4 android.net.Network;\
\cf2 import \cf4 android.net.NetworkCapabilities;\
\cf2 import \cf4 android.net.NetworkInfo;\
\cf2 import \cf4 android.net.NetworkRequest;\
\cf2 import \cf4 android.net.Uri;\
\cf2 import \cf4 android.net.wifi.WifiManager;\
\cf2 import \cf4 android.os.Bundle;\
\cf2 import \cf4 android.os.Environment;\
\cf2 import \cf4 android.os.Handler;\
\cf2 import \cf4 android.os.IBinder;\
\cf2 import \cf4 android.os.Looper;\
\cf2 import \cf4 android.os.Parcel;\
\cf2 import \cf4 android.os.Parcelable;\
\cf2 import \cf4 android.os.PowerManager;\
\cf2 import \cf4 android.os.storage.StorageManager;\
\cf2 import \cf4 android.os.storage.StorageVolume;\
\cf2 import \cf4 android.provider.DocumentsContract;\
\cf2 import \cf4 android.provider.Settings;\
\cf2 import \cf4 android.text.TextUtils;\
\cf2 import \cf4 android.util.DisplayMetrics;\
\cf2 import \cf4 android.util.Log;\
\cf2 import \cf4 android.view.KeyEvent;\
\cf2 import \cf4 android.view.TextureView;\
\cf2 import \cf4 android.view.View;\
\cf2 import \cf4 android.view.Window;\
\cf2 import \cf4 android.view.WindowManager;\
\cf2 import \cf4 android.widget.Button;\
\cf2 import \cf4 android.widget.FrameLayout;\
\cf2 import \cf4 android.widget.TextView;\
\cf2 import \cf4 android.widget.Toast;\
\
\cf2 import \cf4 androidx.annotation.\cf6 NonNull\cf4 ;\
\cf2 import \cf4 androidx.appcompat.app.AlertDialog;\
\cf2 import \cf4 androidx.core.app.ActivityCompat;\
\cf2 import \cf4 androidx.core.content.ContextCompat;\
\cf2 import \cf4 androidx.core.content.FileProvider;\
\cf2 import \cf4 androidx.fragment.app.Fragment;\
\cf2 import \cf4 androidx.fragment.app.FragmentManager;\
\cf2 import \cf4 androidx.fragment.app.FragmentTransaction;\
\cf2 import \cf4 androidx.lifecycle.ViewModelProvider;\
\
\cf2 import \cf4 com.checkmate.android.AppConstant;\
\cf2 import \cf4 com.checkmate.android.AppPreference;\
\cf2 import \cf4 com.checkmate.android.R;\
\cf2 import \cf4 com.checkmate.android.boommenu.BoomMenuButton;\
\cf2 import \cf4 com.checkmate.android.model.Camera;\
\cf2 import \cf4 com.checkmate.android.networking.HttpApiService;\
\cf2 import \cf4 com.checkmate.android.networking.Responses;\
\cf2 import \cf4 com.checkmate.android.networking.RestApiService;\
\cf2 import \cf4 com.checkmate.android.receiver.PowerConnectionReceiver;\
\cf2 import \cf4 com.checkmate.android.receiver.ScreenReceiver;\
\cf2 import \cf4 com.checkmate.android.receiver.WifiBroadcastReceiver;\
\cf2 import \cf4 com.checkmate.android.service.BgAudioService;\
\cf2 import \cf4 com.checkmate.android.service.BgCameraService;\
\cf2 import \cf4 com.checkmate.android.service.BgCastService;\
\cf2 import \cf4 com.checkmate.android.service.BgUSBService;\
\cf2 import \cf4 com.checkmate.android.service.BgWifiService;\
\cf2 import \cf4 com.checkmate.android.service.LocationManagerService;\
\cf2 import \cf4 com.checkmate.android.service.MyAccessibilityService;\
\cf2 import \cf4 com.checkmate.android.service.PlayService;\
\cf2 import \cf4 com.checkmate.android.ui.activity.BaseActivity;\
\cf2 import \cf4 com.checkmate.android.ui.activity.ChessActivity;\
\cf2 import \cf4 com.checkmate.android.ui.activity.SplashActivity;\
\cf2 import \cf4 com.checkmate.android.ui.activity.UsbPopupActivity;\
\cf2 import \cf4 com.checkmate.android.ui.fragment.ActivityFragmentCallbacks;\
\cf2 import \cf4 com.checkmate.android.ui.fragment.BaseFragment;\
\cf2 import \cf4 com.checkmate.android.ui.fragment.LiveFragment;\
\cf2 import \cf4 com.checkmate.android.ui.fragment.PlaybackFragment;\
\cf2 import \cf4 com.checkmate.android.ui.fragment.SettingsFragment;\
\cf2 import \cf4 com.checkmate.android.ui.fragment.StreamingFragment;\
\cf2 import \cf4 com.checkmate.android.util.HttpServer.MyHttpServer;\
\cf2 import \cf4 com.checkmate.android.util.rtsp.EncOpt;\
\cf2 import \cf4 com.checkmate.android.util.rtsp.TextOverlayOption;\
\cf2 import \cf4 com.checkmate.android.boommenu.BoomButtons.BoomButton;\
\cf2 import \cf4 com.checkmate.android.boommenu.BoomButtons.ButtonPlaceEnum;\
\cf2 import \cf4 com.checkmate.android.boommenu.BoomButtons.TextOutsideCircleButton;\
\cf2 import \cf4 com.checkmate.android.boommenu.ButtonEnum;\
\cf2 import \cf4 com.checkmate.android.boommenu.OnBoomListener;\
\cf2 import \cf4 com.checkmate.android.boommenu.Piece.PiecePlaceEnum;\
\cf2 import \cf4 com.checkmate.android.viewmodels.EventType;\
\cf2 import \cf4 com.checkmate.android.viewmodels.SharedViewModel;\
\cf2 import \cf4 com.google.firebase.BuildConfig;\
\cf2 import \cf4 com.kongzue.dialogx.dialogs.MessageDialog;\
\cf2 import \cf4 com.kongzue.dialogx.interfaces.OnDialogButtonClickListener;\
\cf2 import \cf4 com.kongzue.dialogx.util.TextInfo;\
\cf2 import \cf4 com.shasin.notificationbanner.Banner;\
\cf2 import \cf4 com.tonyodev.fetch2.Download;\
\cf2 import \cf4 com.tonyodev.fetch2.Error;\
\cf2 import \cf4 com.tonyodev.fetch2.Fetch;\
\cf2 import \cf4 com.tonyodev.fetch2.FetchConfiguration;\
\cf2 import \cf4 com.tonyodev.fetch2.FetchListener;\
\cf2 import \cf4 com.tonyodev.fetch2.NetworkType;\
\cf2 import \cf4 com.tonyodev.fetch2.Priority;\
\cf2 import \cf4 com.tonyodev.fetch2.Request;\
\cf2 import \cf4 com.tonyodev.fetch2core.DownloadBlock;\
\cf2 import \cf4 com.volcaniccoder.bottomify.BottomifyNavigationView;\
\cf2 import \cf4 com.wmspanel.libstream.AudioConfig;\
\cf2 import \cf4 com.wmspanel.libstream.Streamer;\
\cf2 import \cf4 com.wmspanel.libstream.VideoConfig;\
\
\cf2 import \cf4 org.jetbrains.annotations.\cf6 NotNull\cf4 ;\
\cf2 import \cf4 org.jetbrains.annotations.\cf6 Nullable\cf4 ;\
\
\cf2 import \cf4 java.io.File;\
\cf2 import \cf4 java.net.HttpURLConnection;\
\cf2 import \cf4 java.net.URL;\
\cf2 import \cf4 java.text.SimpleDateFormat;\
\cf2 import \cf4 java.util.ArrayList;\
\cf2 import \cf4 java.util.Arrays;\
\cf2 import \cf4 java.util.Date;\
\cf2 import \cf4 java.util.HashMap;\
\cf2 import \cf4 java.util.List;\
\cf2 import \cf4 java.util.Locale;\
\cf2 import \cf4 java.util.concurrent.atomic.AtomicReference;\
\
\cf2 import \cf4 butterknife.\cf6 BindView\cf4 ;\
\cf2 import \cf4 butterknife.ButterKnife;\
\
\cf2 import \cf4 com.checkmate.android.acplibrary.ACProgressConstant;\
\cf2 import \cf4 com.checkmate.android.acplibrary.ACProgressFlower;\
\cf2 import \cf4 com.checkmate.android.acplibrary.ACProgressPie;\
\
\cf2 import \cf4 me.impa.pinger.PingInfo;\
\cf2 import \cf4 me.impa.pinger.Pinger;\
\cf2 import \cf4 permissions.dispatcher.\cf6 NeedsPermission\cf4 ;\
\cf2 import \cf4 permissions.dispatcher.\cf6 OnNeverAskAgain\cf4 ;\
\cf2 import \cf4 permissions.dispatcher.\cf6 OnPermissionDenied\cf4 ;\
\cf2 import \cf4 permissions.dispatcher.\cf6 RuntimePermissions\cf4 ;\
\
\cf2 import \cf4 retrofit2.Call;\
\cf2 import \cf4 retrofit2.Callback;\
\cf2 import \cf4 retrofit2.Response;\
\
\cf2 import static \cf4 com.checkmate.android.AppConstant.
\f1\i \cf5 SW_FRAGMENT_HIDE
\f0\i0 \cf4 ;\
\cf2 import static \cf4 com.checkmate.android.AppConstant.
\f1\i \cf5 SW_FRAGMENT_LIVE
\f0\i0 \cf4 ;\
\cf2 import static \cf4 com.checkmate.android.AppConstant.
\f1\i \cf5 SW_FRAGMENT_SETTINGS
\f0\i0 \cf4 ;\
\cf2 import static \cf4 com.checkmate.android.AppPreference.KEY.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 ;\
\
\cf6 @RuntimePermissions\
\cf2 public class \cf4 MainActivity \cf2 extends \cf4 BaseActivity \cf2 implements \cf4 BgCameraService.BgCameraNotification, BgCastService.Listener, ActivityFragmentCallbacks, BgUSBService.BgCameraNotification, BgAudioService.BgAudioNotification \{\
\
    \cf2 static \cf4 \{\
        System.
\f1\i loadLibrary
\f0\i0 (\cf7 "native-lib"\cf4 );\
    \}\
\
    \cf2 private \cf4 SharedViewModel \cf5 sharedViewModel\cf4 ;\
    \cf2 public static boolean 
\f1\i \cf5 isStreaming 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
    \cf2 protected final \cf4 String \cf5 TAG \cf4 = \cf7 "StreamerServiceActivity"\cf4 ;\
    \cf2 private static final int 
\f1\i \cf5 CAMERA_REQUEST 
\f0\i0 \cf4 = \cf8 1\cf4 ;\
    \cf2 public static \cf4 MainActivity 
\f1\i \cf5 instance
\f0\i0 \cf4 ;\
    \cf2 public static \cf4 MainActivity \cf9 getInstance\cf4 () \{\
        \cf2 return \cf4 (
\f1\i \cf5 instance 
\f0\i0 \cf4 == \cf2 null\cf4 ) ? \cf2 null \cf4 : 
\f1\i \cf5 instance
\f0\i0 \cf4 ;\
    \}\
    \cf2 public static boolean 
\f1\i \cf5 is_passed 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
    \cf2 public boolean \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
    \cf2 int \cf5 mFirstFragmentIndex \cf4 = 
\f1\i \cf5 SW_FRAGMENT_LIVE
\f0\i0 \cf4 ;\
    \cf2 int \cf5 mCurrentFragmentIndex \cf4 = -\cf8 1\cf4 ;\
    String \cf5 mCameraId \cf4 = AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 ;\
    \cf2 private final \cf4 Handler \cf5 mHandler \cf4 = \cf2 new \cf4 Handler(Looper.
\f1\i getMainLooper
\f0\i0 ());\
    LiveFragment \cf5 liveFragment \cf4 = LiveFragment.
\f1\i newInstance
\f0\i0 ();\
    \cf2 private \cf4 PlaybackFragment \cf5 playbackFragment \cf4 = PlaybackFragment.
\f1\i newInstance
\f0\i0 ();\
    \cf2 private \cf4 StreamingFragment \cf5 streamingFragment \cf4 = StreamingFragment.
\f1\i newInstance
\f0\i0 ();\
    \cf2 private \cf4 SettingsFragment \cf5 settingsFragment \cf4 = SettingsFragment.
\f1\i newInstance
\f0\i0 ();\
    \cf2 public \cf4 BaseFragment \cf5 mCurrentFragment \cf4 = \cf5 liveFragment\cf4 ;\
    \cf2 public void \cf9 setCurrentFragment\cf4 (BaseFragment fragment) \{\
        \cf5 mCurrentFragment \cf4 = fragment;\
    \}\
    \cf2 public \cf4 BaseFragment \cf9 getCurrentFragment\cf4 () \{\
        \cf2 return \cf5 mCurrentFragment \cf4 != \cf2 null \cf4 ? \cf5 mCurrentFragment \cf4 : \cf2 null\cf4 ;\
    \}\
    FragmentManager \cf5 fragmentManager \cf4 = \cf2 this\cf4 .getSupportFragmentManager();\
    \cf2 private \cf4 Fetch \cf5 fetch\cf4 ;\
    \cf2 public \cf4 ConnectivityManager \cf5 _connectivityManager\cf4 ;\
    \cf6 @BindView\cf4 (R.id.
\f1\i \cf5 bottom_tab
\f0\i0 \cf4 )\
    BottomifyNavigationView \cf5 bottom_tab\cf4 ;\
    \cf6 @BindView\cf4 (R.id.
\f1\i \cf5 txt_record
\f0\i0 \cf4 )\
    TextView \cf5 txt_record\cf4 ;\
    \cf6 @BindView\cf4 (R.id.
\f1\i \cf5 flImages
\f0\i0 \cf4 )\
    FrameLayout \cf5 flImages\cf4 ;\
    \cf6 @Nullable\
    @BindView\cf4 (R.id.
\f1\i \cf5 img_menu
\f0\i0 \cf4 )\
    BoomMenuButton \cf5 img_menu\cf4 ;\
    \cf2 private \cf4 Intent \cf5 location_intent\cf4 ;\
    \cf2 public \cf4 Camera \cf5 streaming_camera \cf4 = \cf2 null\cf4 ;\
    \cf10 // new background service\
    \cf2 public \cf4 TextureView.SurfaceTextureListener \cf5 mSurfaceTextureListener\cf4 ;\
    \cf2 public \cf4 TextureView.SurfaceTextureListener \cf5 mSurfaceTextureListenerUSB\cf4 ;\
    \cf2 public \cf4 BgCameraService \cf5 mCamService\cf4 ;\
    \cf2 public \cf4 BgWifiService \cf5 mWifiService\cf4 ;\
    \cf2 public \cf4 BgUSBService \cf5 mUSBService\cf4 ;\
    \cf2 public \cf4 BgAudioService \cf5 mAudioService\cf4 ;\
    \cf2 public \cf4 BgCastService \cf5 mCastService\cf4 ;\
    \cf2 private \cf4 ServiceConnection \cf5 mConnection\cf4 ;\
    \cf2 private \cf4 ServiceConnection \cf5 mWifiConnection\cf4 ;\
    \cf2 private \cf4 ServiceConnection \cf5 mUSBConnection\cf4 ;\
    \cf2 private \cf4 ServiceConnection \cf5 mCastConnection\cf4 ;\
    \cf2 private \cf4 ServiceConnection \cf5 mAudioConnection\cf4 ;\
    Intent \cf5 mBgCameraIntent\cf4 ;\
    Intent \cf5 mWifiCameraIntent\cf4 ;\
    Intent \cf5 mUSBCameraIntent\cf4 ;\
    Intent \cf5 mCastIntent\cf4 ;\
    Intent \cf5 mAudioIntent\cf4 ;\
    AlertDialog \cf5 alertDialog\cf4 ;\
    Intent \cf5 playIntent\cf4 ;\
    Runnable \cf5 updateTimeRunnable\cf4 ;\
    Handler \cf5 handler\cf4 ;\
    Streamer.Size \cf5 castSize\cf4 ;\
    PowerManager.WakeLock \cf5 wl\cf4 ;\
    Intent \cf5 resultData \cf4 = \cf2 null\cf4 ;\
    List<String> \cf5 resolutions \cf4 = \cf2 new \cf4 ArrayList<>();\
    Camera \cf5 mCamera \cf4 = \cf2 null\cf4 ;\
    AtomicReference<String> \cf5 push_url \cf4 = \cf2 new \cf4 AtomicReference<>();\
    AtomicReference<String> \cf5 url \cf4 = \cf2 new \cf4 AtomicReference<>();\
    \cf2 boolean \cf5 should_restart \cf4 = \cf2 false\cf4 ;\
    \cf2 protected \cf4 Thread \cf5 playThread\cf4 ;\
    \cf2 protected \cf4 Thread \cf5 readThread\cf4 ;\
    \cf2 protected int \cf5 sourceID \cf4 = -\cf8 1\cf4 , \cf5 pushID \cf4 = -\cf8 1\cf4 , \cf5 writeID \cf4 = -\cf8 1\cf4 ;\
    \cf2 boolean \cf5 should_write \cf4 = \cf2 false\cf4 ;\
    \cf2 boolean \cf5 should_push \cf4 = \cf2 false\cf4 ;\
    \cf2 protected \cf4 EncOpt \cf5 pushOpt \cf4 = \cf2 new \cf4 EncOpt();\
    \cf2 protected \cf4 EncOpt \cf5 writeOpt \cf4 = \cf2 new \cf4 EncOpt();\
    \cf2 protected \cf4 TextOverlayOption \cf5 textOpt \cf4 = \cf2 new \cf4 TextOverlayOption();\
    \cf2 int \cf5 resultCode \cf4 = -\cf8 10\cf4 ;\
    \cf2 boolean \cf5 isExit \cf4 = \cf2 false\cf4 ;\
    \cf2 final int \cf5 REQUEST_MEDIA_PROJECTION \cf4 = \cf8 1\cf4 ;\
    \cf2 public boolean \cf5 restart_camera \cf4 = \cf2 false\cf4 ;\
    \cf2 private static final \cf4 String 
\f1\i \cf5 ACTION_USB_PERMISSION 
\f0\i0 \cf4 = \cf7 "com.checkmate.android.USB_PERMISSION"\cf4 ;\
    \cf2 private \cf4 UsbManager \cf5 usbManager\cf4 ;\
    \cf2 private \cf4 PendingIntent \cf5 permissionIntent\cf4 ;\
    \cf2 private boolean \cf5 isUsbServiceBound \cf4 = \cf2 false\cf4 ; \cf10 // Flag to track if the service is bound\
    \cf2 private boolean \cf5 isCamServiceBond \cf4 = \cf2 false\cf4 ;\
    \cf2 private boolean \cf5 isWifiServiceBound \cf4 = \cf2 false\cf4 ;\
    \cf2 private boolean \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
    \cf2 private boolean \cf5 isAudioServiceBound \cf4 = \cf2 false\cf4 ;\
    \cf2 private boolean \cf5 isSnapShot \cf4 = \cf2 false\cf4 ;\
    \cf2 private static final int 
\f1\i \cf5 REQUEST_CODE_PICK_FOLDER 
\f0\i0 \cf4 = \cf8 1000\cf4 ;\
    \cf2 private static final int 
\f1\i \cf5 REQUEST_CODE_INTENT 
\f0\i0 \cf4 = \cf8 100\cf4 ;\
    \cf2 private static final int 
\f1\i \cf5 REQUEST_CODE_Write 
\f0\i0 \cf4 = \cf8 50\cf4 ;\
    \cf2 private static final int 
\f1\i \cf5 REQUEST_STORAGE_PERMISSION 
\f0\i0 \cf4 = \cf8 1001\cf4 ;\
    ScreenReceiver \cf5 myReceiver\cf4 ;\
    PowerConnectionReceiver \cf5 powerReceiver\cf4 ;\
    WifiBroadcastReceiver \cf5 wifiReceiver\cf4 ;\
    \cf2 private \cf4 MyAccessibilityService \cf5 myService\cf4 ;\
    \cf2 private static final int 
\f1\i \cf5 SERVER_PORT 
\f0\i0 \cf4 = \cf8 8080\cf4 ;\
    \cf2 private \cf4 MyHttpServer \cf5 server\cf4 ;\
\
    \cf6 @SuppressLint\cf4 (\cf7 "SourceLockedOrientationActivity"\cf4 )\
    \cf6 @Override\
    \cf2 protected void \cf9 onCreate\cf4 (Bundle savedInstanceState) \{\
        \cf2 super\cf4 .onCreate(savedInstanceState);\
\
        
\f1\i \cf5 instance 
\f0\i0 \cf4 = \cf2 this\cf4 ;\
        setRequestedOrientation(ActivityInfo.
\f1\i \cf5 SCREEN_ORIENTATION_PORTRAIT
\f0\i0 \cf4 );\
\
\cf10 //        if (BuildConfig.DEBUG) \{\
//           //\
//        \}else \{\
//            getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\
//        \}\
\
      //  getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\
\
        \cf4 setRequestedOrientation(ActivityInfo.
\f1\i \cf5 SCREEN_ORIENTATION_PORTRAIT
\f0\i0 \cf4 );\
\
        setContentView(R.layout.
\f1\i \cf5 activity_service
\f0\i0 \cf4 );\
\
        \cf2 if \cf4 (AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 UI_CONVERT_MODE
\f0\i0 \cf4 , \cf2 false\cf4 ) && !
\f1\i \cf5 is_passed
\f0\i0 \cf4 ) \{\
            Intent intent = \cf2 new \cf4 Intent(\cf2 this\cf4 , ChessActivity.\cf2 class\cf4 );\
            intent.addFlags(Intent.
\f1\i \cf5 FLAG_ACTIVITY_CLEAR_TOP 
\f0\i0 \cf4 | Intent.
\f1\i \cf5 FLAG_ACTIVITY_SINGLE_TOP
\f0\i0 \cf4 );\
            overridePendingTransition(\cf8 0\cf4 , \cf8 0\cf4 ); \cf10 // Disable transition animation\
            \cf4 startActivity(intent);\
        \}\
\
        init();\
\
\
        BgCameraService.
\f1\i \cf5 liveData
\f0\i0 \cf4 .observe(\cf2 this\cf4 , value -> \{\
            \cf2 if \cf4 (value == \cf7 "run"\cf4 ) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Restarted called: "\cf4 );\
                FragmentManager fragmentManager = getSupportFragmentManager();\
                \cf2 for \cf4 (Fragment fragment : fragmentManager.getFragments()) \{\
                    fragmentManager.beginTransaction().remove(fragment).commitNow();\
                \}\
                releaseResources();\
                onMyDestroy();\
\
                \cf2 new \cf4 Handler(Looper.
\f1\i getMainLooper
\f0\i0 ()).postDelayed(\cf2 this\cf4 ::recreate, \cf8 2000\cf4 );\
            \}\
        \});\
\
        startHTTPServer();\
    \}\
\
    \cf2 void \cf9 startHTTPServer\cf4 ()\{\
        \cf5 server \cf4 = \cf2 new \cf4 MyHttpServer(
\f1\i \cf5 SERVER_PORT
\f0\i0 \cf4 ,getApplicationContext());\
        \cf5 server\cf4 .startServer();\
    \}\
\
    \cf2 void \cf9 stopHTTPServer\cf4 ()\{\
        \cf2 if \cf4 (\cf5 server \cf4 != \cf2 null\cf4 ) \{\
            \cf5 server\cf4 .stopServer();\
        \}\
    \}\
\
    \cf2 public void \cf9 showCamerasList\cf4 (String[] names) \{\
        Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "showCamerasList: true "\cf4 );\
        \cf2 boolean \cf4 isNotChess = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 CHESS_MODE_PIN
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (!isNotChess) \{\
            \cf5 handler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                \cf6 @Override\
                \cf2 public void \cf9 run\cf4 () \{\
                    Intent intent = \cf2 new \cf4 Intent(MainActivity.\cf2 this\cf4 , UsbPopupActivity.\cf2 class\cf4 );\
                    intent.putExtra(\cf7 "list"\cf4 , \cf5 names\cf4 );\
                    startActivityForResult(intent, 
\f1\i \cf5 REQUEST_CODE_INTENT
\f0\i0 \cf4 );\
                \}\
            \}, \cf8 500\cf4 );\
        \} \cf2 else \cf4 \{\
            \cf2 int \cf4 selectedIndex = \cf8 0\cf4 ;\
            \cf2 if \cf4 (\cf5 liveFragment \cf4 != \cf2 null\cf4 ) \{\
                \cf2 if \cf4 (\cf5 liveFragment\cf4 .\cf5 is_usb_opened\cf4 ) \{\
                    \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
                        \cf5 mUSBService\cf4 .selectedPositionForCameraList(selectedIndex);\
                    \} \cf2 else \cf4 \{\
                        startBgUSB();\
                    \}\
                \}\
            \}\
        \}\
    \}\
\
\
    \cf2 private boolean \cf9 isAccessibilityServiceEnabled\cf4 (Context context, Class<? \cf2 extends \cf4 AccessibilityService> serviceClass) \{\
        ComponentName expectedComponentName = \cf2 new \cf4 ComponentName(context, serviceClass);\
        String enabledServicesSetting = Settings.Secure.
\f1\i getString
\f0\i0 (\
                context.getContentResolver(),\
                Settings.Secure.
\f1\i \cf5 ENABLED_ACCESSIBILITY_SERVICES\
        
\f0\i0 \cf4 );\
        \cf2 boolean \cf4 accessibilityEnabled = Settings.Secure.
\f1\i getInt
\f0\i0 (\
                context.getContentResolver(),\
                Settings.Secure.
\f1\i \cf5 ACCESSIBILITY_ENABLED
\f0\i0 \cf4 , \cf8 0\
        \cf4 ) == \cf8 1\cf4 ;\
\
        \cf2 if \cf4 (!accessibilityEnabled) \{\
            \cf2 return false\cf4 ;\
        \}\
\
        \cf2 if \cf4 (enabledServicesSetting == \cf2 null\cf4 ) \{\
            \cf2 return false\cf4 ;\
        \}\
\
        TextUtils.SimpleStringSplitter splitter = \cf2 new \cf4 TextUtils.SimpleStringSplitter(\cf7 ':'\cf4 );\
        splitter.setString(enabledServicesSetting);\
        \cf2 while \cf4 (splitter.hasNext()) \{\
            String componentNameString = splitter.next();\
            ComponentName enabledComponentName = ComponentName.
\f1\i unflattenFromString
\f0\i0 (componentNameString);\
            \cf2 if \cf4 (enabledComponentName != \cf2 null \cf4 && enabledComponentName.equals(expectedComponentName)) \{\
                \cf2 return true\cf4 ;\
            \}\
        \}\
\
        \cf2 return false\cf4 ;\
    \}\
\
    \cf2 private void \cf9 showAlertDialogForAccessbiliity\cf4 () \{\
        \cf2 if \cf4 (!isFinishing() && !isDestroyed()) \{\
            \cf2 if \cf4 (\cf5 alertDialog \cf4 != \cf2 null \cf4 && \cf5 alertDialog\cf4 .isShowing()) \{\
                \cf10 // Avoid showing the dialog again if it's already shown\
                \cf2 return\cf4 ;\
            \}\
\
            AlertDialog.Builder builder = \cf2 new \cf4 AlertDialog.Builder(\cf2 this\cf4 );\
            \cf5 alertDialog \cf4 = builder.setMessage(\cf7 "Please enable the accessibility service for the app to function properly."\cf4 ).setPositiveButton(\cf7 "Go to Settings"\cf4 , (dialog, id) -> \{\
                Intent intent = \cf2 new \cf4 Intent(Settings.
\f1\i \cf5 ACTION_ACCESSIBILITY_SETTINGS
\f0\i0 \cf4 );\
                startActivity(intent);\
            \}).setNegativeButton(\cf7 "Cancel"\cf4 , (dialog, id) -> dialog.dismiss()).setCancelable(\cf2 false\cf4 ).create();\
\
            \cf5 alertDialog\cf4 .show();\
        \}\
    \}\
\
    \cf2 void \cf9 checkAccessService\cf4 () \{\
        \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                \cf6 @Override\
                \cf2 public void \cf9 run\cf4 () \{\
                    \cf2 boolean \cf4 isEnabled = isAccessibilityServiceEnabled(getApplicationContext(), MyAccessibilityService.\cf2 class\cf4 );\
                    \cf2 if \cf4 (!isEnabled) \{\
                        showAlertDialogForAccessbiliity();\
                    \}\
                \}\
            \}, \cf8 1000\cf4 );\
        \}\
\
    \}\
\
    \cf6 @SuppressLint\cf4 (\cf7 "UnspecifiedRegisterReceiverFlag"\cf4 )\
    \cf2 void \cf9 init\cf4 () \{\
        requestIgnoreBatteryOptimizationsPermission(MainActivity.\cf2 this\cf4 );\
        \cf2 if \cf4 (!Settings.System.
\f1\i canWrite
\f0\i0 (MainActivity.\cf2 this\cf4 )) \{\
            \cf10 // Open the settings screen where the user can enable the permission\
            \cf4 Intent intent = \cf2 new \cf4 Intent(Settings.
\f1\i \cf5 ACTION_MANAGE_WRITE_SETTINGS
\f0\i0 \cf4 );\
            intent.setData(Uri.
\f1\i parse
\f0\i0 (\cf7 "package:" \cf4 + getPackageName()));\
            startActivityForResult(intent, 
\f1\i \cf5 REQUEST_CODE_Write
\f0\i0 \cf4 );\
        \}\
        checkAccessService();\
\
        \cf10 // Initialize the SharedViewModel\
        \cf5 sharedViewModel \cf4 = \cf2 new \cf4 ViewModelProvider(\cf2 this\cf4 ).get(SharedViewModel.\cf2 class\cf4 );\
\
        getWindow().addFlags(WindowManager.LayoutParams.
\f1\i \cf5 FLAG_KEEP_SCREEN_ON
\f0\i0 \cf4 );\
        ButterKnife.
\f1\i bind
\f0\i0 (\cf2 this\cf4 );\
        \cf5 flImages\cf4 .setVisibility(View.
\f1\i \cf5 GONE
\f0\i0 \cf4 );\
\
        \cf5 usbManager \cf4 = (UsbManager) getSystemService(Context.
\f1\i \cf5 USB_SERVICE
\f0\i0 \cf4 );\
        \cf5 permissionIntent \cf4 = PendingIntent.
\f1\i getBroadcast
\f0\i0 (\cf2 this\cf4 , \cf8 0\cf4 , \cf2 new \cf4 Intent(
\f1\i \cf5 ACTION_USB_PERMISSION
\f0\i0 \cf4 ), PendingIntent.
\f1\i \cf5 FLAG_IMMUTABLE
\f0\i0 \cf4 );\
\
        IntentFilter usbFilter = \cf2 new \cf4 IntentFilter(
\f1\i \cf5 ACTION_USB_PERMISSION
\f0\i0 \cf4 );\
        usbFilter.addAction(UsbManager.
\f1\i \cf5 ACTION_USB_DEVICE_DETACHED
\f0\i0 \cf4 );\
        registerReceiver(\cf5 usbReceiver\cf4 , usbFilter);\
\
        \cf10 // Check if any USB device is already connected\
        \cf2 for \cf4 (UsbDevice device : \cf5 usbManager\cf4 .getDeviceList().values()) \{\
            requestPermission(device);\
        \}\
\
        \cf5 mCameraId \cf4 = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 SELECTED_POSITION
\f0\i0 \cf4 , AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 );\
        
\f1\i \cf5 is_passed 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
        \cf5 _connectivityManager \cf4 = (ConnectivityManager) getApplicationContext().getSystemService(Context.
\f1\i \cf5 CONNECTIVITY_SERVICE
\f0\i0 \cf4 );\
\
        \cf10 // new UI\
        \cf5 bottom_tab\cf4 .setOnNavigationItemChangedListener(navigationItem -> \{\
            \cf2 int \cf4 position = navigationItem.getPosition();\
            \cf2 if \cf4 ((isRecordingCamera() && position == 
\f1\i \cf5 SW_FRAGMENT_SETTINGS
\f0\i0 \cf4 ) ||\
                    (isRecordingUSB() && position == 
\f1\i \cf5 SW_FRAGMENT_SETTINGS
\f0\i0 \cf4 ) ||\
                    (isStreaming() && position == 
\f1\i \cf5 SW_FRAGMENT_SETTINGS
\f0\i0 \cf4 ) ||\
                    ((\cf5 mUSBService \cf4 != \cf2 null\cf4 ) && position == 
\f1\i \cf5 SW_FRAGMENT_SETTINGS 
\f0\i0 \cf4 && \cf5 mUSBService\cf4 .isStreaming()) ||\
                    (isWifiStreaming() && position == 
\f1\i \cf5 SW_FRAGMENT_SETTINGS
\f0\i0 \cf4 ) ||\
                    (isWifiRecording() && position == 
\f1\i \cf5 SW_FRAGMENT_SETTINGS
\f0\i0 \cf4 )) \{\
\
                \cf2 if \cf4 (\cf5 mCurrentFragmentIndex \cf4 < \cf8 0 \cf4 || \cf5 mCurrentFragmentIndex \cf4 >= \cf8 5\cf4 ) \{\
                    \cf10 // Set default index if out of bounds\
                    \cf5 mCurrentFragmentIndex \cf4 = \cf8 0\cf4 ;\
                \}\
                \cf5 bottom_tab\cf4 .setActiveNavigationIndex(\cf5 mCurrentFragmentIndex\cf4 );\
                \cf2 return\cf4 ;\
            \}\
\
            CommonUtil.
\f1\i hideKeyboard
\f0\i0 (\cf2 this\cf4 , \cf5 bottom_tab\cf4 );\
            \cf2 if \cf4 (position != 
\f1\i \cf5 SW_FRAGMENT_LIVE
\f0\i0 \cf4 ) \{\
                \cf5 txt_record\cf4 .setVisibility(View.
\f1\i \cf5 GONE
\f0\i0 \cf4 );\
            \}\
            \cf2 if \cf4 (position == 
\f1\i \cf5 SW_FRAGMENT_HIDE
\f0\i0 \cf4 ) \{\
                \cf5 mCurrentFragmentIndex \cf4 = 
\f1\i \cf5 SW_FRAGMENT_HIDE
\f0\i0 \cf4 ;\
                hide_app();\
                \cf2 return\cf4 ;\
            \}\
            SwitchContent(position, \cf2 null\cf4 );\
        \});\
\
        \cf2 if \cf4 (\cf5 img_menu \cf4 != \cf2 null\cf4 ) \{\
            \cf5 img_menu\cf4 .setButtonEnum(ButtonEnum.
\f1\i \cf5 TextOutsideCircle
\f0\i0 \cf4 );\
            \cf5 img_menu\cf4 .setPiecePlaceEnum(PiecePlaceEnum.
\f1\i \cf5 DOT_5_3
\f0\i0 \cf4 );\
            \cf5 img_menu\cf4 .setButtonPlaceEnum(ButtonPlaceEnum.
\f1\i \cf5 SC_5_3
\f0\i0 \cf4 );\
\
            TextOutsideCircleButton.Builder builder;\
            builder = \cf2 new \cf4 TextOutsideCircleButton.Builder().normalImageRes(R.mipmap.
\f1\i \cf5 ic_live
\f0\i0 \cf4 ).normalTextRes(R.string.
\f1\i \cf5 live
\f0\i0 \cf4 ).normalColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 ).pieceColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 );\
            \cf5 img_menu\cf4 .addBuilder(builder);\
            builder = \cf2 new \cf4 TextOutsideCircleButton.Builder().normalImageRes(R.mipmap.
\f1\i \cf5 ic_playback
\f0\i0 \cf4 ).normalTextRes(R.string.
\f1\i \cf5 playback
\f0\i0 \cf4 ).normalColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 ).pieceColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 );\
            \cf5 img_menu\cf4 .addBuilder(builder);\
            builder = \cf2 new \cf4 TextOutsideCircleButton.Builder().normalImageRes(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 ).normalTextRes(R.string.
\f1\i \cf5 stream
\f0\i0 \cf4 ).normalColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 ).pieceColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 );\
            \cf5 img_menu\cf4 .addBuilder(builder);\
            builder = \cf2 new \cf4 TextOutsideCircleButton.Builder().normalImageRes(R.mipmap.
\f1\i \cf5 ic_settings
\f0\i0 \cf4 ).normalTextRes(R.string.
\f1\i \cf5 settings
\f0\i0 \cf4 ).normalColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 ).pieceColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 );\
            \cf5 img_menu\cf4 .addBuilder(builder);\
            builder = \cf2 new \cf4 TextOutsideCircleButton.Builder().normalImageRes(R.mipmap.
\f1\i \cf5 ic_hide
\f0\i0 \cf4 ).normalTextRes(R.string.
\f1\i \cf5 hide
\f0\i0 \cf4 ).normalColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 ).pieceColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 );\
            \cf5 img_menu\cf4 .addBuilder(builder);\
            \cf5 img_menu\cf4 .setOnBoomListener(\cf2 new \cf4 OnBoomListener() \{\
                \cf6 @Override\
                \cf2 public void \cf9 onClicked\cf4 (\cf2 int \cf4 index, BoomButton boomButton) \{\
                    SwitchContent(index, \cf2 null\cf4 );\
                \}\
\
                \cf6 @Override\
                \cf2 public void \cf9 onBackgroundClick\cf4 () \{\
\
                \}\
\
                \cf6 @Override\
                \cf2 public void \cf9 onBoomWillHide\cf4 () \{\
\
                \}\
\
                \cf6 @Override\
                \cf2 public void \cf9 onBoomDidHide\cf4 () \{\
\
                \}\
\
                \cf6 @Override\
                \cf2 public void \cf9 onBoomWillShow\cf4 () \{\
\
                \}\
\
                \cf6 @Override\
                \cf2 public void \cf9 onBoomDidShow\cf4 () \{\
\
                \}\
            \});\
\
        \}\
\
        \cf5 fragmentManager\cf4 .beginTransaction().add(R.id.
\f1\i \cf5 main_content
\f0\i0 \cf4 , \cf5 liveFragment\cf4 ).commit();\
        \cf5 fragmentManager\cf4 .beginTransaction().add(R.id.
\f1\i \cf5 main_content
\f0\i0 \cf4 , \cf5 playbackFragment\cf4 ).commit();\
        \cf5 fragmentManager\cf4 .beginTransaction().add(R.id.
\f1\i \cf5 main_content
\f0\i0 \cf4 , \cf5 streamingFragment\cf4 ).commit();\
        \cf5 fragmentManager\cf4 .beginTransaction().add(R.id.
\f1\i \cf5 main_content
\f0\i0 \cf4 , \cf5 settingsFragment\cf4 ).commit();\
\
        \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 playbackFragment\cf4 ).commit();\
        \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 streamingFragment\cf4 ).commit();\
        \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 settingsFragment\cf4 ).commit();\
        checkUpdate();\
        \cf5 playIntent \cf4 = \cf2 new \cf4 Intent(\cf2 this\cf4 , PlayService.\cf2 class\cf4 );\
        \cf2 if \cf4 (!isPlayServiceRunning()) \{\
            startVolumeService();\
        \}\
        \cf10 // register power key receiver\
        \cf4 IntentFilter filter = \cf2 new \cf4 IntentFilter(Intent.
\f1\i \cf5 ACTION_SCREEN_ON
\f0\i0 \cf4 );\
        filter.addAction(Intent.
\f1\i \cf5 ACTION_SCREEN_OFF
\f0\i0 \cf4 );\
        filter.addAction(Intent.
\f1\i \cf5 ACTION_USER_PRESENT
\f0\i0 \cf4 );\
        \cf5 myReceiver \cf4 = \cf2 new \cf4 ScreenReceiver();\
        registerReceiver(\cf5 myReceiver\cf4 , filter);\
        \cf10 // register battery plugin receiver\
        \cf4 IntentFilter ifilter = \cf2 new \cf4 IntentFilter(Intent.
\f1\i \cf5 ACTION_BATTERY_CHANGED
\f0\i0 \cf4 );\
        ifilter.addAction(Intent.
\f1\i \cf5 ACTION_POWER_CONNECTED
\f0\i0 \cf4 );\
        ifilter.addAction(Intent.
\f1\i \cf5 ACTION_POWER_DISCONNECTED
\f0\i0 \cf4 );\
        \cf5 powerReceiver \cf4 = \cf2 new \cf4 PowerConnectionReceiver();\
        registerReceiver(\cf5 powerReceiver\cf4 , ifilter);\
\
        \cf5 wifiReceiver \cf4 = \cf2 new \cf4 WifiBroadcastReceiver();\
        IntentFilter intentFilter = \cf2 new \cf4 IntentFilter();\
        intentFilter.addAction(WifiManager.
\f1\i \cf5 SUPPLICANT_STATE_CHANGED_ACTION
\f0\i0 \cf4 );\
        registerReceiver(\cf5 wifiReceiver\cf4 , intentFilter);\
\
        \cf10 // background camera service\
        \cf5 mSurfaceTextureListener \cf4 = \cf2 new \cf4 TextureView.SurfaceTextureListener() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onSurfaceTextureAvailable\cf4 (SurfaceTexture surfaceTexture, \cf2 int \cf4 width, \cf2 int \cf4 height) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "onSurfaceTextureAvailable: Hello"\cf4 );\
                \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mCamService\cf4 .setPreviewSurface(surfaceTexture, width, height);\
                \}\
\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onSurfaceTextureSizeChanged\cf4 (SurfaceTexture surfaceTexture, \cf2 int \cf4 width, \cf2 int \cf4 height) \{\
                \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mCamService\cf4 .setPreviewSurface(surfaceTexture, width, height);\
                    updatePreviewRatio();\
                \}\
            \}\
\
            \cf6 @Override\
            \cf2 public boolean \cf9 onSurfaceTextureDestroyed\cf4 (SurfaceTexture surfaceTexture) \{\
                \cf2 if \cf4 (surfaceTexture != \cf2 null\cf4 ) \{\
                    surfaceTexture.release();\
                \}\
                \cf2 return true\cf4 ; \cf10 // Ensure TextureView creates a new SurfaceTexture\
            \cf4 \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onSurfaceTextureUpdated\cf4 (SurfaceTexture surfaceTexture) \{\
                \cf10 //Log.v(TAG, "onSurfaceTextureUpdated");\
            \cf4 \}\
        \};\
\
        \cf5 mSurfaceTextureListenerUSB \cf4 = \cf2 new \cf4 TextureView.SurfaceTextureListener() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onSurfaceTextureAvailable\cf4 (SurfaceTexture surfaceTexture, \cf2 int \cf4 width, \cf2 int \cf4 height) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "onSurfaceTextureAvailable: Hello USB"\cf4 );\
                \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
                    Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "onSurfaceTextureAvailable: Hello USB No null"\cf4 );\
                    \cf5 mUSBService\cf4 .setPreviewSurface(surfaceTexture, width, height);\
                \}\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onSurfaceTextureSizeChanged\cf4 (SurfaceTexture surfaceTexture, \cf2 int \cf4 width, \cf2 int \cf4 height) \{\
                \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mUSBService\cf4 .setPreviewSurface(surfaceTexture, width, height);\
                    updatePreviewRatio();\
                \}\
\
            \}\
\
            \cf6 @Override\
            \cf2 public boolean \cf9 onSurfaceTextureDestroyed\cf4 (SurfaceTexture surfaceTexture) \{\
                \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mUSBService\cf4 .setPreviewSurface(surfaceTexture, \cf8 0\cf4 , \cf8 0\cf4 );\
                \}\
\
                \cf2 return true\cf4 ;\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onSurfaceTextureUpdated\cf4 (SurfaceTexture surfaceTexture) \{\
                \cf10 //Log.v(TAG, "onSurfaceTextureUpdated");\
            \cf4 \}\
        \};\
\
        setCallbacks();\
        OpenLog();\
        initNetworkTimer();\
\
    \}\
\
    \cf2 protected void \cf9 onMyDestroy\cf4 () \{\
\
        \cf10 // Clear handler\
        \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \cf5 mHandler\cf4 .removeCallbacksAndMessages(\cf2 null\cf4 );\
\
        \cf10 // Nullify static references\
        
\f1\i \cf5 instance 
\f0\i0 \cf4 = \cf2 null\cf4 ;\
        
\f1\i \cf5 isStreaming 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
        
\f1\i \cf5 is_passed 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
\
        \cf10 // Unbind services\
        \cf2 if \cf4 (\cf5 isUsbServiceBound \cf4 && \cf5 mUSBConnection \cf4 != \cf2 null\cf4 ) \{\
            \cf2 try \cf4 \{\
                unbindService(\cf5 mUSBConnection\cf4 );\
            \} \cf2 catch \cf4 (RuntimeException e) \{\
                e.printStackTrace();\
            \}\
            \cf5 isUsbServiceBound \cf4 = \cf2 false\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 isCamServiceBond \cf4 && \cf5 mConnection \cf4 != \cf2 null\cf4 ) \{\
            \cf2 try \cf4 \{\
                unbindService(\cf5 mConnection\cf4 );\
            \} \cf2 catch \cf4 (RuntimeException e) \{\
                e.printStackTrace();\
            \}\
            \cf5 isCamServiceBond \cf4 = \cf2 false\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 isWifiServiceBound \cf4 && \cf5 mWifiConnection \cf4 != \cf2 null\cf4 ) \{\
            \cf2 try \cf4 \{\
                unbindService(\cf5 mWifiConnection\cf4 );\
            \} \cf2 catch \cf4 (RuntimeException e) \{\
                e.printStackTrace();\
            \}\
            \cf5 isWifiServiceBound \cf4 = \cf2 false\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 isCastServiceBound \cf4 && \cf5 mCastConnection \cf4 != \cf2 null\cf4 ) \{\
            \cf2 try \cf4 \{\
                unbindService(\cf5 mCastConnection\cf4 );\
            \} \cf2 catch \cf4 (RuntimeException e) \{\
                e.printStackTrace();\
            \}\
            \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
        \}\
\
        \cf10 // Stop services\
        \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) stopService(\cf5 mBgCameraIntent\cf4 );\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 != \cf2 null\cf4 ) stopService(\cf5 mWifiCameraIntent\cf4 );\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) stopService(\cf5 mUSBCameraIntent\cf4 );\
        \cf2 if \cf4 (\cf5 mCastService \cf4 != \cf2 null\cf4 ) stopService(\cf5 mCastIntent\cf4 );\
        \cf2 if \cf4 (\cf5 mAudioService \cf4 != \cf2 null\cf4 ) stopService(\cf5 mAudioIntent\cf4 );\
\
\
        \cf5 liveFragment \cf4 = \cf2 null\cf4 ;\
        \cf5 playbackFragment \cf4 = \cf2 null\cf4 ;\
        \cf5 streamingFragment \cf4 = \cf2 null\cf4 ;\
        \cf5 settingsFragment \cf4 = \cf2 null\cf4 ;\
        \cf5 mCurrentFragment \cf4 = \cf2 null\cf4 ;\
\
        \cf10 // Nullify views\
        \cf5 bottom_tab \cf4 = \cf2 null\cf4 ;\
        \cf5 txt_record \cf4 = \cf2 null\cf4 ;\
        \cf5 flImages \cf4 = \cf2 null\cf4 ;\
        \cf5 img_menu \cf4 = \cf2 null\cf4 ;\
\
        \cf10 // Clear Fetch and other shared resources\
        \cf2 if \cf4 (\cf5 fetch \cf4 != \cf2 null\cf4 ) \cf5 fetch\cf4 .close();\
        \cf5 fetch \cf4 = \cf2 null\cf4 ;\
        \cf5 _connectivityManager \cf4 = \cf2 null\cf4 ;\
\
        \cf10 // Nullify USB manager\
        \cf5 usbManager \cf4 = \cf2 null\cf4 ;\
        \cf5 permissionIntent \cf4 = \cf2 null\cf4 ;\
\
        \cf10 // Reset flags\
        \cf5 restart_camera \cf4 = \cf2 false\cf4 ;\
        \cf5 mFirstFragmentIndex \cf4 = 
\f1\i \cf5 SW_FRAGMENT_LIVE
\f0\i0 \cf4 ;\
        \cf5 mCurrentFragmentIndex \cf4 = -\cf8 1\cf4 ;\
\cf10 //        mCameraId = AppConstant.REAR_CAMERA;\
    \cf4 \}\
\
    \cf2 public void \cf9 onAudioDelivered\cf4 (\cf2 byte\cf4 [] data, \cf2 int \cf4 channelCount, \cf2 int \cf4 sampleRate) \{\
        runOnUiThread(() -> \{\
            \cf2 if \cf4 (AppPreference.
\f1\i getBool
\f0\i0 (
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 , \cf2 false\cf4 )) \{\
                \cf2 boolean \cf4 vuMeterVisible = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 VU_METER
\f0\i0 \cf4 , \cf2 true\cf4 );\
                LiveFragment liveFragment = LiveFragment.
\f1\i getInstance
\f0\i0 ();\
                \cf2 if \cf4 (vuMeterVisible && liveFragment != \cf2 null \cf4 && liveFragment.\cf5 mVuMeter \cf4 != \cf2 null\cf4 ) \{\
                    liveFragment.\cf5 mVuMeter\cf4 .putBuffer(\cf5 data\cf4 , \cf5 channelCount\cf4 , \cf5 sampleRate\cf4 );\
                    \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 VU_METER_VISIBLE
\f0\i0 \cf4 , \cf2 true\cf4 );\
                \} \cf2 else \cf4 \{\
                    \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 VU_METER_VISIBLE
\f0\i0 \cf4 , \cf2 false\cf4 );\
                \}\
            \} \cf2 else \cf4 \{\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 VU_METER_VISIBLE
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \}\
        \});\
    \}\
\
    \cf2 public void \cf9 initBGWifiService\cf4 () \{\
        \cf2 if \cf4 (isWifiServiceRunning()) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf5 mWifiConnection \cf4 = \cf2 new \cf4 ServiceConnection() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceConnected\cf4 (ComponentName name, IBinder service) \{\
                \cf5 mWifiService \cf4 = ((BgWifiService.WifiCameraBinder) service).getService();\
                \cf5 mWifiCameraIntent \cf4 = \cf5 mWifiService\cf4 .getRunningIntent();\
                \cf2 if \cf4 (\cf5 mWifiCameraIntent \cf4 == \cf2 null\cf4 ) \{\
                    startBgWifi();\
                \}\
                \cf2 if \cf4 (\cf5 mCamera \cf4 != \cf2 null \cf4 && !isWifiStreaming()) \{\
                    \cf5 mWifiService\cf4 .playStreaming(\cf5 mCamera\cf4 );\
                \}\
                \cf5 isWifiServiceBound \cf4 = \cf2 true\cf4 ;\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceDisconnected\cf4 (ComponentName name) \{\
                \cf5 mWifiService \cf4 = \cf2 null\cf4 ;\
                \cf5 isWifiServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \};\
\
\
        bindService(\cf2 new \cf4 Intent(MainActivity.\cf2 this\cf4 , BgWifiService.\cf2 class\cf4 ), \cf5 mWifiConnection\cf4 , Context.
\f1\i \cf5 BIND_AUTO_CREATE
\f0\i0 \cf4 );\
    \}\
\
    \cf2 public void \cf9 initBGUSBService\cf4 () \{\
        \cf2 if \cf4 (isUSBServiceRunning()) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf5 mUSBConnection \cf4 = \cf2 new \cf4 ServiceConnection() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceConnected\cf4 (ComponentName name, IBinder service) \{\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 INIT_FUN_LIVE_FRAG
\f0\i0 \cf4 , \cf7 "initialize"\cf4 );\
                \cf5 mUSBService \cf4 = ((BgUSBService.CameraBinder) service).getService();\
                \cf5 mUSBService\cf4 .setNotifyCallback(MainActivity.\cf2 this\cf4 );\
                \cf5 mUSBCameraIntent \cf4 = \cf5 mUSBService\cf4 .getRunningIntent();\
                updateControls(\cf5 mUSBService\cf4 .getCurrentStatus());\
                \cf2 if \cf4 (\cf5 mUSBCameraIntent \cf4 == \cf2 null\cf4 ) \{\
                    startBgUSB();\
                    \cf5 isUsbServiceBound \cf4 = \cf2 true\cf4 ;\
                \}\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "onServiceConnected: MUSB Setting"\cf4 );\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceDisconnected\cf4 (ComponentName name) \{\
                \cf5 mUSBService \cf4 = \cf2 null\cf4 ;\
                \cf5 isUsbServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \};\
\
\
        bindService(\cf2 new \cf4 Intent(MainActivity.\cf2 this\cf4 , BgUSBService.\cf2 class\cf4 ), \cf5 mUSBConnection\cf4 , Context.
\f1\i \cf5 BIND_AUTO_CREATE
\f0\i0 \cf4 );\
    \}\
\
    \cf2 public void \cf9 initCastService\cf4 () \{\
        \cf2 if \cf4 (isCastServiceRunning() || \cf5 isCastServiceBound\cf4 ) \{  \cf10 // <-- Prevent duplicate binding\
            \cf2 return\cf4 ;\
        \}\
\
        \cf5 mCastConnection \cf4 = \cf2 new \cf4 ServiceConnection() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceConnected\cf4 (ComponentName name, IBinder service) \{\
                \cf5 mCastService \cf4 = ((BgCastService.CastService) service).getService();\
                \cf5 mCastService\cf4 .setListener(MainActivity.\cf2 this\cf4 );\
                \cf5 mCastIntent \cf4 = \cf5 mCastService\cf4 .getRunningIntent();\
                \cf2 if \cf4 (\cf5 mCastIntent \cf4 == \cf2 null\cf4 ) \{\
                    startBgCast();\
                \}\
                \cf5 isCastServiceBound \cf4 = \cf2 true\cf4 ;\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceDisconnected\cf4 (ComponentName name) \{\
                \cf2 if \cf4 (\cf5 mCastService \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mCastService\cf4 .setListener(\cf2 null\cf4 ); \cf10 // Prevent memory leak\
                \cf4 \}\
                \cf5 mCastService \cf4 = \cf2 null\cf4 ;\
                \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \};\
        \cf2 if \cf4 (!\cf5 isCastServiceBound\cf4 ) \{\
            \cf2 try \cf4 \{\
                bindService(\cf2 new \cf4 Intent(MainActivity.\cf2 this\cf4 , BgCastService.\cf2 class\cf4 ), \cf5 mCastConnection\cf4 , Context.
\f1\i \cf5 BIND_AUTO_CREATE
\f0\i0 \cf4 );\
            \} \cf2 catch \cf4 (SecurityException e) \{\
                Log.
\f1\i e
\f0\i0 (\cf7 "MainActivity"\cf4 , \cf7 "SecurityException while binding to service"\cf4 , e);\
            \} \cf2 catch \cf4 (IllegalArgumentException e) \{\
                Log.
\f1\i e
\f0\i0 (\cf7 "MainActivity"\cf4 , \cf7 "IllegalArgumentException: Service might already be bound"\cf4 , e);\
            \} \cf2 catch \cf4 (Exception e) \{\
                Log.
\f1\i e
\f0\i0 (\cf7 "MainActivity"\cf4 , \cf7 "Unexpected error while binding to service"\cf4 , e);\
            \}\
        \}\
    \}\
\
\
    \cf6 @Override\
    \cf2 public void \cf9 setFragStreamingCamera\cf4 (Camera wifi_cam) \{\
        \cf5 streaming_camera \cf4 = wifi_cam;\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 setFragRearCamera\cf4 (\cf2 boolean \cf4 isCam) \{\
        setRearCamera(isCam);\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 isDialog\cf4 (\cf2 boolean \cf4 isDialog) \{\
        \cf5 is_dialog \cf4 = isDialog;\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 showDialog\cf4 () \{\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \cf5 dlg_progress\cf4 .show();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 dismissDialog\cf4 () \{\
        \cf5 dlg_progress\cf4 .dismiss();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 initFragService\cf4 () \{\
        initService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 initFragCastService\cf4 () \{\
        initCastService();\
    \}\
\
    \cf2 public void \cf9 initFragAudioService\cf4 () \{\
        initAudioService();\
    \}\
\
    \cf2 public void \cf9 stopFragAudio\cf4 () \{\
        stopBgAudio();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 stopFragBgCast\cf4 () \{\
        stopBgCast();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 stopFragUSBService\cf4 () \{\
        stopUSBService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 stopFragBgCamera\cf4 () \{\
        stopBgCamera();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 stopFragRecordingTime\cf4 () \{\
        stopRecordingTime();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 stopFragWifiService\cf4 () \{\
        stopWifiService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 saveFragUSBCameraResolutions\cf4 () \{\
        saveUSBCameraResolutions();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragWifiSnapshot\cf4 () \{\
        wifiSnapshot();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragTakeSnapshot\cf4 () \{\
        takeSnapshot();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragInitBGUSBService\cf4 () \{\
        initBGUSBService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragStopStreaming\cf4 () \{\
        \cf5 mWifiService\cf4 .stopStreaming();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragInitBGWifiService\cf4 () \{\
        initBGWifiService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragLockOrientation\cf4 () \{\
\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragStartVolumeService\cf4 () \{\
        startVolumeService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragStopVolumeService\cf4 () \{\
        stopVolumeService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragStartStream\cf4 () \{\
        startStream();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragCameraRestart\cf4 (\cf2 boolean \cf4 isRestart) \{\
        \cf5 restart_camera \cf4 = isRestart;\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragUpdateMenu\cf4 (\cf2 boolean \cf4 isUpdate) \{\
        updateMenu(isUpdate);\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragUpdateApp\cf4 (String url) \{\
        updateApp(url);\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragStartLocationService\cf4 () \{\
        startLocationService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragStopLocationService\cf4 () \{\
        stopLocationService();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 fragSetWifiCamera\cf4 (Camera wifi_cam) \{\
        setWifiCamera(wifi_cam);\
    \}\
\
    \cf2 public void \cf9 initService\cf4 () \{\
        \cf5 mConnection \cf4 = \cf2 new \cf4 ServiceConnection() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceConnected\cf4 (ComponentName name, IBinder service) \{\
                \cf2 boolean \cf4 is_android = TextUtils.
\f1\i equals
\f0\i0 (\cf5 mCameraId\cf4 , AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 ) || TextUtils.
\f1\i equals
\f0\i0 (\cf5 mCameraId\cf4 , AppConstant.
\f1\i \cf5 FRONT_CAMERA
\f0\i0 \cf4 );\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 INIT_FUN_LIVE_FRAG
\f0\i0 \cf4 , \cf7 "initialize"\cf4 );\
                \cf5 mCamService \cf4 = ((BgCameraService.CameraBinder) service).getService();\
                \cf5 mCamService\cf4 .setNotifyCallback(MainActivity.\cf2 this\cf4 );\
                \cf5 mBgCameraIntent \cf4 = \cf5 mCamService\cf4 .getRunningIntent();\
\
                \cf2 if \cf4 (\cf5 mBgCameraIntent \cf4 == \cf2 null\cf4 ) \{\
                    startBgCamera();\
                \}\
                updateControls(\cf5 mCamService\cf4 .getCurrentStatus());\
                \cf5 isCamServiceBond \cf4 = \cf2 true\cf4 ;\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceDisconnected\cf4 (ComponentName name) \{\
                \cf5 mCamService \cf4 = \cf2 null\cf4 ;\
                \cf5 isCamServiceBond \cf4 = \cf2 false\cf4 ;\
            \}\
        \};\
\
\
        bindService(\cf2 new \cf4 Intent(MainActivity.\cf2 this\cf4 , BgCameraService.\cf2 class\cf4 ), \cf5 mConnection\cf4 , Context.
\f1\i \cf5 BIND_AUTO_CREATE
\f0\i0 \cf4 );\
    \}\
\
    \cf2 public void \cf9 initAudioService\cf4 () \{\
        \cf5 mAudioConnection \cf4 = \cf2 new \cf4 ServiceConnection() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceConnected\cf4 (ComponentName name, IBinder service) \{\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 INIT_FUN_LIVE_FRAG
\f0\i0 \cf4 , \cf7 "initialize"\cf4 );\
                \cf5 mAudioService \cf4 = ((BgAudioService.AudioBinder) service).getService();\
                \cf5 mAudioService\cf4 .setNotifyCallback(MainActivity.\cf2 this\cf4 );\
                \cf5 mAudioIntent \cf4 = \cf5 mAudioService\cf4 .getRunningIntent();\
                \cf2 if \cf4 (\cf5 mAudioIntent \cf4 == \cf2 null\cf4 ) \{\
                    startBGAudio();\
                \}\
                updateControls(\cf5 mAudioService\cf4 .getCurrentStatus());\
                \cf5 isAudioServiceBound \cf4 = \cf2 true\cf4 ;\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onServiceDisconnected\cf4 (ComponentName name) \{\
                \cf5 mAudioService \cf4 = \cf2 null\cf4 ;\
                \cf5 isAudioServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \};\
\
\
        bindService(\cf2 new \cf4 Intent(MainActivity.\cf2 this\cf4 , BgAudioService.\cf2 class\cf4 ), \cf5 mAudioConnection\cf4 , Context.
\f1\i \cf5 BIND_AUTO_CREATE
\f0\i0 \cf4 );\
    \}\
\
    \cf2 private void \cf9 updateControls\cf4 (\cf2 final \cf4 BgCameraService.BgCameraNotification.NOTIFICATION_STATUS status) \{\
        runOnUiThread(() -> \{\
            \cf2 switch \cf4 (\cf5 status\cf4 ) \{\
                \cf2 case 
\f1\i \cf5 CREATED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Preview created"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 SERVICE_STARTED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Service started"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 CAMERA_OPENED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Preview ready"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 CONNECTED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Connected"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 DISCONNECTED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Disconnected"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 SERVICE_CLOSED
\f0\i0 \cf4 :\
                    \cf5 mCamService \cf4 = \cf2 null\cf4 ;\
                    \cf2 break\cf4 ;\
            \}\
        \});\
    \}\
\
    \cf2 private void \cf9 updateControls\cf4 (\cf2 final \cf4 BgAudioService.BgAudioNotification.NOTIFICATION_STATUS status) \{\
        \cf2 if \cf4 (status != \cf2 null\cf4 ) \{\
            runOnUiThread(() -> \{\
                \cf2 switch \cf4 (\cf5 status\cf4 ) \{\
                    \cf2 case 
\f1\i \cf5 CREATED
\f0\i0 \cf4 :\
                        Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Preview created"\cf4 );\
                        \cf2 break\cf4 ;\
                    \cf2 case 
\f1\i \cf5 SERVICE_STARTED
\f0\i0 \cf4 :\
                        Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Service started"\cf4 );\
                        \cf2 break\cf4 ;\
                    \cf2 case 
\f1\i \cf5 AUDIO_OPENED
\f0\i0 \cf4 :\
                        Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Audio Opened"\cf4 );\
                        \cf2 break\cf4 ;\
                    \cf2 case 
\f1\i \cf5 CONNECTED
\f0\i0 \cf4 :\
                        Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Connected"\cf4 );\
                        \cf2 break\cf4 ;\
                    \cf2 case 
\f1\i \cf5 DISCONNECTED
\f0\i0 \cf4 :\
                        Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Disconnected"\cf4 );\
                        MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), \cf7 "Audio service disconnected"\cf4 );\
                        \cf2 break\cf4 ;\
                    \cf2 case 
\f1\i \cf5 SERVICE_CLOSED
\f0\i0 \cf4 :\
                        \cf5 mAudioService \cf4 = \cf2 null\cf4 ;\
                        \cf2 break\cf4 ;\
                \}\
            \});\
        \}\
    \}\
\
    \cf2 private void \cf9 updateControls\cf4 (\cf2 final \cf4 BgUSBService.BgCameraNotification.NOTIFICATION_STATUS status) \{\
        runOnUiThread(() -> \{\
            \cf2 switch \cf4 (\cf5 status\cf4 ) \{\
                \cf2 case 
\f1\i \cf5 CREATED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Preview created"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 SERVICE_STARTED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Service started"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 CAMERA_OPENED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Preview ready"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 CONNECTED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Connected"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 DISCONNECTED
\f0\i0 \cf4 :\
                    Log.
\f1\i d
\f0\i0 (\cf5 TAG\cf4 , \cf7 "Disconnected"\cf4 );\
                    MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), \cf7 "Camera disconnected"\cf4 );\
                    \cf2 break\cf4 ;\
                \cf2 case 
\f1\i \cf5 SERVICE_CLOSED
\f0\i0 \cf4 :\
                    \cf5 mUSBService \cf4 = \cf2 null\cf4 ;\
                    \cf2 break\cf4 ;\
            \}\
        \});\
    \}\
\
    \cf2 public void \cf9 takeSnapshot\cf4 () \{\
        String storage_location = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STORAGE_LOCATION
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        \cf2 if \cf4 (storage_location.isEmpty() || storage_location.contains(\cf7 "/0/"\cf4 )) \{\
            \cf5 isSnapShot \cf4 = \cf2 true\cf4 ;\
            openDirectory();\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mCamService\cf4 .takeSnapshot();\
        \} \cf2 else if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mUSBService\cf4 .takeSnapshot();\
        \}\
    \}\
\
    \cf6 @SuppressLint\cf4 (\cf7 "DefaultLocale"\cf4 )\
    \cf2 void \cf9 updateDeviceInfo\cf4 (Boolean isStreamStart) \{\
        String locLat = \cf7 ""\cf4 ;\
        String locLong = \cf7 ""\cf4 ;\
        \cf2 if \cf4 (AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 GPS_ENABLED
\f0\i0 \cf4 , \cf2 false\cf4 )) \{\
            locLat = String.
\f1\i format
\f0\i0 (\cf7 "(%.6f)"\cf4 , LocationManagerService.
\f1\i \cf5 lat
\f0\i0 \cf4 );\
            locLong = String.
\f1\i format
\f0\i0 (\cf7 "(%.6f)"\cf4 , LocationManagerService.
\f1\i \cf5 lng
\f0\i0 \cf4 );\
        \}\
\
        RestApiService.
\f1\i getRestApiEndPoint
\f0\i0 ().updateDevice(CommonUtil.
\f1\i getDeviceID
\f0\i0 (\cf2 this\cf4 ), AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 DEVICE_NAME
\f0\i0 \cf4 , \cf7 ""\cf4 ), locLat, locLong, CommonUtil.
\f1\i batteryLevel
\f0\i0 (\cf2 this\cf4 ), isStreamStart, CommonUtil.
\f1\i isCharging
\f0\i0 (\cf2 this\cf4 ), \cf2 this\cf4 .\cf5 is_landscape \cf4 ? AppConstant.
\f1\i \cf5 LANDSCAPE 
\f0\i0 \cf4 : AppConstant.
\f1\i \cf5 PORTRAIT
\f0\i0 \cf4 , \cf2 this\cf4 .deviceType()).enqueue(\cf2 new \cf4 Callback<Responses.BaseResponse>() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onResponse\cf4 (Call<Responses.BaseResponse> call, Response<Responses.BaseResponse> response) \{\
\
\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onFailure\cf4 (Call<Responses.BaseResponse> call, Throwable t) \{\
\
            \}\
        \});\
    \}\
\
    \cf2 public void \cf9 startStream\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCamService \cf4 == \cf2 null \cf4 && \cf5 mUSBService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 liveFragment\cf4 .\cf5 is_camera_opened\cf4 ) \{\
            \cf2 if \cf4 (\cf5 mCamService \cf4 == \cf2 null\cf4 ) \{\
                \cf2 return\cf4 ;\
            \}\
            String base = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_BASE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
            String channel_id = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_CHANNEL
\f0\i0 \cf4 , \cf7 ""\cf4 );\
            String stream_url = String.
\f1\i format
\f0\i0 (\cf7 "%s/%s"\cf4 , base, channel_id);\
            \cf2 if \cf4 (TextUtils.
\f1\i isEmpty
\f0\i0 (stream_url)) \{\
                MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 invalid_url
\f0\i0 \cf4 );\
                \cf2 return\cf4 ;\
            \}\
            \cf2 if \cf4 (\cf5 mCamService\cf4 .isStreaming()) \{\
                MessageDialog messageDialog = MessageDialog.
\f1\i show
\f0\i0 (getString(R.string.
\f1\i \cf5 confirmation_title
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 stop_streaming
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 Okay
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 cancel
\f0\i0 \cf4 )).setCancelButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                    \cf6 @Override\
                    \cf2 public boolean \cf9 onClick\cf4 (MessageDialog dialog, View v) \{\
                        dialog.dismiss();\
                        \cf2 return false\cf4 ;\
                    \}\
                \}).setOkButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                    \cf6 @Override\
                    \cf2 public boolean \cf9 onClick\cf4 (MessageDialog baseDialog, View v) \{\
                        \cf5 mCamService\cf4 .stopStreaming();\
                        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        baseDialog.dismiss();\
                        updateDeviceInfo(\cf2 false\cf4 );\
                        Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "onClick: updateDeviceInfo 524"\cf4 );\
                        
\f1\i \cf5 isStreaming 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
                        \cf2 boolean \cf4 recordOn = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 AUTO_RECORD
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        \cf2 boolean \cf4 recordBroadcast = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORD_BROADCAST
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        \cf2 if \cf4 (recordOn || recordBroadcast) \{\
                            stopRecord();\
                        \}\
                        AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                            \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                                \cf6 @Override\
                                \cf2 public void \cf9 run\cf4 () \{\
                                    \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                                \}\
                            \}, \cf8 300\cf4 );\
                        \} \cf2 else \cf4 \{\
                            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                        \}\
                        \cf2 return false\cf4 ;\
                    \}\
                \});\
                messageDialog.setOkTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
                messageDialog.setCancelTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
            \} \cf2 else \cf4 \{\
                
\f1\i \cf5 isStreaming 
\f0\i0 \cf4 = \cf2 true\cf4 ;\
                \cf5 mCamService\cf4 .startStreaming();\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING
\f0\i0 \cf4 , \cf2 false\cf4 );\
                AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 true\cf4 );\
                Log.
\f1\i e
\f0\i0 (\cf7 "http"\cf4 , \cf7 "startStream: 544"\cf4 );\
                updateDeviceInfo(\cf2 true\cf4 );\
                \cf2 boolean \cf4 recordOn = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 AUTO_RECORD
\f0\i0 \cf4 , \cf2 false\cf4 );\
                \cf2 boolean \cf4 recordBroadcast = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORD_BROADCAST
\f0\i0 \cf4 , \cf2 false\cf4 );\
                \cf2 if \cf4 (recordOn || recordBroadcast) \{\
                    startRecord();\
                \}\
                \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                        \cf6 @Override\
                        \cf2 public void \cf9 run\cf4 () \{\
                            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream_active
\f0\i0 \cf4 );\
                        \}\
                    \}, \cf8 300\cf4 );\
                \} \cf2 else \cf4 \{\
                    \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream_active
\f0\i0 \cf4 );\
                \}\
            \}\
        \} \cf2 else if \cf4 (\cf5 liveFragment\cf4 .\cf5 is_usb_opened\cf4 ) \{\
            \cf2 if \cf4 (\cf5 mUSBService \cf4 == \cf2 null\cf4 ) \{\
                \cf2 return\cf4 ;\
            \}\
            String base = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_BASE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
            String channel_id = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_CHANNEL
\f0\i0 \cf4 , \cf7 ""\cf4 );\
            String stream_url = String.
\f1\i format
\f0\i0 (\cf7 "%s/%s"\cf4 , base, channel_id);\
            \cf2 if \cf4 (TextUtils.
\f1\i isEmpty
\f0\i0 (stream_url)) \{\
                MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 invalid_url
\f0\i0 \cf4 );\
                \cf2 return\cf4 ;\
            \}\
            \cf2 if \cf4 (\cf5 mUSBService\cf4 .isStreaming()) \{\
                MessageDialog messageDialog = MessageDialog.
\f1\i show
\f0\i0 (getString(R.string.
\f1\i \cf5 confirmation_title
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 stop_streaming
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 Okay
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 cancel
\f0\i0 \cf4 )).setCancelButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                    \cf6 @Override\
                    \cf2 public boolean \cf9 onClick\cf4 (MessageDialog dialog, View v) \{\
                        dialog.dismiss();\
                        \cf2 return false\cf4 ;\
                    \}\
                \}).setOkButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                    \cf6 @Override\
                    \cf2 public boolean \cf9 onClick\cf4 (MessageDialog baseDialog, View v) \{\
                        \cf5 mUSBService\cf4 .stopStreaming();\
                        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        baseDialog.dismiss();\
                        updateDeviceInfo(\cf2 false\cf4 );\
                        Log.
\f1\i e
\f0\i0 (\cf7 "http"\cf4 , \cf7 "onClick: updateDeviceInfo 524"\cf4 );\
                        
\f1\i \cf5 isStreaming 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
                        AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        \cf2 boolean \cf4 recordOn = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 AUTO_RECORD
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        \cf2 boolean \cf4 recordBroadcast = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORD_BROADCAST
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        \cf2 if \cf4 (recordOn || recordBroadcast) \{\
                            stopRecord();\
                        \}\
                        \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                            \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                                \cf6 @Override\
                                \cf2 public void \cf9 run\cf4 () \{\
                                    \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                                \}\
                            \}, \cf8 300\cf4 );\
                        \} \cf2 else \cf4 \{\
                            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                        \}\
                        \cf2 return false\cf4 ;\
                    \}\
                \});\
                messageDialog.setOkTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
                messageDialog.setCancelTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
            \} \cf2 else \cf4 \{\
                
\f1\i \cf5 isStreaming 
\f0\i0 \cf4 = \cf2 true\cf4 ;\
                \cf5 mUSBService\cf4 .startStreaming();\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING
\f0\i0 \cf4 , \cf2 false\cf4 );\
                AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 true\cf4 );\
                Log.
\f1\i e
\f0\i0 (\cf7 "http"\cf4 , \cf7 "startStream: 544"\cf4 );\
                updateDeviceInfo(\cf2 true\cf4 );\
                \cf2 boolean \cf4 recordOn = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 AUTO_RECORD
\f0\i0 \cf4 , \cf2 false\cf4 );\
                \cf2 boolean \cf4 recordBroadcast = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORD_BROADCAST
\f0\i0 \cf4 , \cf2 false\cf4 );\
                \cf2 if \cf4 (recordOn || recordBroadcast) \{\
                    startRecord();\
                \}\
                \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                        \cf6 @Override\
                        \cf2 public void \cf9 run\cf4 () \{\
                            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream_active
\f0\i0 \cf4 );\
                        \}\
                    \}, \cf8 300\cf4 );\
                \} \cf2 else \cf4 \{\
                    \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream_active
\f0\i0 \cf4 );\
                \}\
            \}\
        \}\
    \}\
\
    \cf2 public void \cf9 stopStream\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCamService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        stopCameraIntent();\
    \}\
\
    \cf2 public boolean \cf9 isWifiStreaming\cf4 () \{\
        \cf2 return \cf5 pushID \cf4 != -\cf8 1\cf4 ;\
    \}\
\
    \cf2 public void \cf9 startWifiStreaming\cf4 () \{\
        \cf5 should_push \cf4 = \cf2 true\cf4 ;\
        \cf5 should_write \cf4 = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORD_BROADCAST
\f0\i0 \cf4 , \cf2 false\cf4 );\
        stopWifiStream();\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \cf5 dlg_progress\cf4 .show();\
        \cf2 new \cf4 Handler().postDelayed(() -> \{\
            HashMap<String, Boolean> map = \cf2 new \cf4 HashMap<>();\
            map.put(\cf7 "streaming"\cf4 , \cf2 true\cf4 );\
            map.put(\cf7 "showing"\cf4 , \cf2 false\cf4 );\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING_DOUBLE_VAL
\f0\i0 \cf4 , map);\
            \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            playStream(\cf5 mCamera\cf4 );\
        \}, \cf8 5000\cf4 );\
    \}\
\
    \cf2 void \cf9 wifistreamingStarted\cf4 () \{\
        runOnUiThread(() -> \{\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING
\f0\i0 \cf4 , \cf2 true\cf4 );\
            String url = String.
\f1\i format
\f0\i0 (\cf7 "ID: %d, URL: %s"\cf4 , \cf5 pushID\cf4 , \cf5 push_url\cf4 .get());\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 WIFI_STREAMING_STARTED_LIVE
\f0\i0 \cf4 , url);\
        \});\
    \}\
\
    \cf2 public void \cf9 stopWifiStreaming\cf4 () \{\
        \cf5 should_push \cf4 = \cf2 false\cf4 ;\
        \cf2 new \cf4 Thread(() -> stopWifiStream()).start();\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \cf5 dlg_progress\cf4 .show();\
        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 STOP_WIFI_STREAMING_STARTED_LIVE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        \cf2 new \cf4 Handler().postDelayed(() -> \{\
            \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            playStream(\cf5 mCamera\cf4 );\
            HashMap<String, Boolean> map = \cf2 new \cf4 HashMap<>();\
            map.put(\cf7 "streaming"\cf4 , \cf2 false\cf4 );\
            map.put(\cf7 "showing"\cf4 , \cf2 false\cf4 );\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING_DOUBLE_VAL
\f0\i0 \cf4 , map);\
        \}, \cf8 5000\cf4 );\
    \}\
\
    \cf2 public void \cf9 setRearCamera\cf4 (\cf2 boolean \cf4 is_rear) \{\
        stopBgCamera();\
        \cf2 if \cf4 (is_rear) \{\
            \cf5 mCameraId \cf4 = AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 ;\
            AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 SELECTED_POSITION
\f0\i0 \cf4 , AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 );\
            setActiveService(\cf7 "front_cam"\cf4 );\
        \} \cf2 else \cf4 \{\
            \cf5 mCameraId \cf4 = AppConstant.
\f1\i \cf5 FRONT_CAMERA
\f0\i0 \cf4 ;\
            AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 SELECTED_POSITION
\f0\i0 \cf4 , AppConstant.
\f1\i \cf5 FRONT_CAMERA
\f0\i0 \cf4 );\
            setActiveService(\cf7 "back_cam"\cf4 );\
        \}\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \cf2 new \cf4 Handler().postDelayed(() -> \{\
            \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            reloadCamera();\
        \}, \cf8 2000\cf4 );\
    \}\
\
    \cf2 public void \cf9 setActiveService\cf4 (String serviceType) \{\
        SharedPreferences prefs = getSharedPreferences(\cf7 "ServicePrefs"\cf4 , 
\f1\i \cf5 MODE_PRIVATE
\f0\i0 \cf4 );\
        prefs.edit().putString(\cf7 "active_service"\cf4 , serviceType).apply();\
        \cf10 // Also update SQLite for shell access\
        \cf2 try \cf4 \{\
            \cf2 try \cf4 (SQLiteDatabase db = openOrCreateDatabase(\cf7 "config.db"\cf4 , 
\f1\i \cf5 MODE_PRIVATE
\f0\i0 \cf4 , \cf2 null\cf4 )) \{\
                db.execSQL(\cf7 "\cb11 INSERT OR REPLACE INTO settings (key, value) VALUES ('active_service', ?)\cb3 "\cf4 ,\
                        \cf2 new \cf4 String[]\{serviceType\});\
            \}\
        \} \cf2 catch \cf4 (SQLiteException e) \{\
            \cf10 // Log the error or handle it appropriately\
            \cf4 Log.
\f1\i e
\f0\i0 (\cf7 "DB_ERROR"\cf4 , \cf7 "Database error: " \cf4 + e.getMessage());\
            \cf10 // Optionally, show a message to the user or recover\
        \cf4 \}\
\
    \}\
\
    \cf2 public void \cf9 reloadCamera\cf4 () \{\
        \cf2 if \cf4 (isRecordingCamera() || isRecordingUSB() || isStreaming() || isWifiRecording() || isWifiStreaming()) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 fragmentManager \cf4 == \cf2 null \cf4 || isDestroyed() || isFinishing()) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf2 try \cf4 \{\
            FragmentTransaction transaction = \cf5 fragmentManager\cf4 .beginTransaction();\
            \cf10 // 1. Remove old 'liveFragment' (if present).\
            \cf2 if \cf4 (\cf5 liveFragment \cf4 != \cf2 null \cf4 && \cf5 liveFragment\cf4 .isAdded()) \{\
                transaction.remove(\cf5 liveFragment\cf4 );\
            \}\
            \cf10 // 2. Create a new instance of LiveFragment.\
            \cf5 liveFragment \cf4 = LiveFragment.
\f1\i newInstance
\f0\i0 ();\
            transaction.add(R.id.
\f1\i \cf5 main_content
\f0\i0 \cf4 , \cf5 liveFragment\cf4 , \cf7 "LiveFragmentTag"\cf4 );\
            \cf10 // 3. Hide other fragments (if they exist).\
            \cf2 if \cf4 (\cf5 playbackFragment \cf4 != \cf2 null \cf4 && \cf5 playbackFragment\cf4 .isAdded()) \{\
                transaction.hide(\cf5 playbackFragment\cf4 );\
            \}\
            \cf2 if \cf4 (\cf5 streamingFragment \cf4 != \cf2 null \cf4 && \cf5 streamingFragment\cf4 .isAdded()) \{\
                transaction.hide(\cf5 streamingFragment\cf4 );\
            \}\
            \cf2 if \cf4 (\cf5 settingsFragment \cf4 != \cf2 null \cf4 && \cf5 settingsFragment\cf4 .isAdded()) \{\
                transaction.hide(\cf5 settingsFragment\cf4 );\
            \}\
            \cf10 // 4. Only show liveFragment when necessary.\
            \cf2 if \cf4 (\cf5 mCurrentFragmentIndex \cf4 == \cf5 mFirstFragmentIndex\cf4 ) \{\
                \cf2 if \cf4 (\cf5 mCurrentFragment \cf4 != \cf2 null \cf4 && \cf5 mCurrentFragment\cf4 .isAdded()) \{\
                    transaction.hide(\cf5 mCurrentFragment\cf4 );\
                    transaction.show(\cf5 liveFragment\cf4 );\
                \}\
            \} \cf2 else \cf4 \{\
                \cf5 bottom_tab\cf4 .setActiveNavigationIndex(
\f1\i \cf5 SW_FRAGMENT_LIVE
\f0\i0 \cf4 );\
            \}\
            \cf2 if \cf4 (\cf5 fragmentManager \cf4 != \cf2 null \cf4 && !isDestroyed() && !isFinishing()) \{\
                \cf2 if \cf4 (!\cf5 fragmentManager\cf4 .isStateSaved()) \{\
                    \cf2 if \cf4 (\cf5 fragmentManager \cf4 != \cf2 null\cf4 ) \{\
                        transaction.commit();\
                    \}\
                \} \cf2 else \cf4 \{\
                    \cf2 if \cf4 (\cf5 fragmentManager \cf4 != \cf2 null\cf4 ) \{\
                        transaction.commitAllowingStateLoss();\
                    \}\
                \}\
            \}\
            setGPSConfigs();\
        \} \cf2 catch \cf4 (Exception e) \{\
            Log.
\f1\i e
\f0\i0 (\cf7 "reloadCamera"\cf4 , \cf7 "Error in fragment transaction: "\cf4 , e);\
        \}\
    \}\
\
    \cf2 public void \cf9 setGPSConfigs\cf4 () \{\
        \cf2 boolean \cf4 isGPS = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 GPS_ENABLED
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (isGPS) \{\
            fragStopLocationService();\
            \cf5 handler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                \cf6 @Override\
                \cf2 public void \cf9 run\cf4 () \{\
                    fragStartLocationService();\
                    \cf5 streamingFragment\cf4 .updateGPSLocation();\
                \}\
            \}, \cf8 2000\cf4 );\
\
        \} \cf2 else \cf4 \{\
            fragStopLocationService();\
        \}\
    \}\
\
    \cf2 public void \cf9 restartCamera\cf4 () \{\
        \cf2 if \cf4 (isRecordingCamera() || isRecordingUSB() || isStreaming()) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "restartCamera: 5"\cf4 );\
        String strMessage = \cf7 ""\cf4 ;\
        \cf2 boolean \cf4 isFirstMainLoad = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_MAIN_FIRST_LAUNCH
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (!isFirstMainLoad) \{\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_MAIN_FIRST_LAUNCH
\f0\i0 \cf4 , \cf2 true\cf4 );\
            strMessage = getString(R.string.
\f1\i \cf5 service_restart_first
\f0\i0 \cf4 );\
        \} \cf2 else \cf4 \{\
            strMessage = getString(R.string.
\f1\i \cf5 service_restart_info
\f0\i0 \cf4 );\
        \}\
        AlertDialog.Builder aboutDialog = \cf2 new \cf4 AlertDialog.Builder(\cf2 this\cf4 ).setTitle(R.string.
\f1\i \cf5 restart_required
\f0\i0 \cf4 ).setMessage(strMessage).setPositiveButton(android.R.string.
\f1\i \cf5 ok
\f0\i0 \cf4 , \cf2 null\cf4 ).setCancelable(\cf2 true\cf4 ).setOnDismissListener(dialog -> quitApp());\
        AlertDialog alertDialog = aboutDialog.create();\
        alertDialog.show();\
\
        Button positiveButton = alertDialog.getButton(AlertDialog.
\f1\i \cf5 BUTTON_POSITIVE
\f0\i0 \cf4 );\
\
        \cf2 if \cf4 (positiveButton != \cf2 null\cf4 ) \{\
            positiveButton.setTextColor(Color.
\f1\i \cf5 BLACK
\f0\i0 \cf4 ); \cf10 // Set positive button text color to black\
        \cf4 \}\
    \}\
\
    \cf2 void \cf9 stopCameraIntent\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCamService \cf4 == \cf2 null\cf4 ) \cf2 return\cf4 ;\
        \cf10 // guard #2: detach so we don\'92t get called back into stopFragBgCamera()\
        \cf5 mCamService\cf4 .setNotifyCallback(\cf2 null\cf4 );\
        \cf5 mCamService\cf4 .stopStreaming();\
        \cf2 if \cf4 (\cf5 mBgCameraIntent \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mCamService\cf4 .stopService(\cf5 mBgCameraIntent\cf4 );\
        \}\
        \cf2 if \cf4 (\cf5 isCamServiceBond\cf4 ) \{\
            \cf2 try \cf4 \{\
                unbindService(\cf5 mConnection\cf4 );\
            \} \cf2 catch \cf4 (RuntimeException e) \{\
                e.printStackTrace();\
            \}\
            \cf5 isCamServiceBond \cf4 = \cf2 false\cf4 ;\
            \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
        \}\
    \}\
\
    \cf2 void \cf9 stopAudioIntent\cf4 () \{\
        \cf2 if \cf4 (\cf5 mAudioService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 mAudioIntent \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mAudioService\cf4 .stopService(\cf5 mAudioIntent\cf4 );\
        \}\
        \cf2 if \cf4 (\cf5 isAudioServiceBound\cf4 ) \{\
            \cf2 try \cf4 \{\
                unbindService(\cf5 mAudioConnection\cf4 );\
            \} \cf2 catch \cf4 (RuntimeException e) \{\
                e.printStackTrace();\
            \}\
            \cf5 isAudioServiceBound \cf4 = \cf2 false\cf4 ;\
        \}\
    \}\
\
    \cf2 void \cf9 stopCastIntent\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCastService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 mCastIntent \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mCastService\cf4 .stopService(\cf5 mCastIntent\cf4 );\
        \}\
        \cf2 try \cf4 \{\
            \cf2 if \cf4 (\cf5 mCastConnection \cf4 != \cf2 null\cf4 ) \{\
                unbindService(\cf5 mCastConnection\cf4 );\
            \}\
            \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
        \} \cf2 catch \cf4 (Exception e) \{\
            e.printStackTrace();\
        \}\
    \}\
\
    \cf2 void \cf9 startCameraIntent\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCamService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf5 mBgCameraIntent \cf4 = \cf2 new \cf4 Intent(MainActivity.\cf2 this\cf4 , BgCameraService.\cf2 class\cf4 );\
        \cf5 mCamService\cf4 .startForegroundService(\cf5 mBgCameraIntent\cf4 );\
    \}\
\
    \cf2 public void \cf9 startBgWifi\cf4 () \{\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf5 mWifiCameraIntent \cf4 = \cf2 new \cf4 Intent(\cf2 this\cf4 , BgWifiService.\cf2 class\cf4 );\
        \cf5 mWifiService\cf4 .startForegroundService(\cf5 mWifiCameraIntent\cf4 );\
    \}\
\
    \cf2 public void \cf9 startBgUSB\cf4 () \{\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        setActiveService(\cf7 "usb_cam"\cf4 );\
        \cf5 mUSBCameraIntent \cf4 = \cf2 new \cf4 Intent(\cf2 this\cf4 , BgUSBService.\cf2 class\cf4 );\
        \cf5 mUSBService\cf4 .startForegroundService(\cf5 mUSBCameraIntent\cf4 );\
    \}\
\
    \cf2 public void \cf9 startBGAudio\cf4 () \{\
        \cf2 if \cf4 (\cf5 mAudioService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        setActiveService(\cf7 "audio_only"\cf4 );\
        \cf5 mAudioIntent \cf4 = \cf2 new \cf4 Intent(\cf2 this\cf4 , BgAudioService.\cf2 class\cf4 );\
        \cf5 mAudioService\cf4 .startForegroundService(\cf5 mAudioIntent\cf4 );\
    \}\
\
    \cf2 public void \cf9 startBgCast\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCastService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        setActiveService(\cf7 "screen_cast"\cf4 );\
        \cf5 mCastIntent \cf4 = \cf2 new \cf4 Intent(\cf2 this\cf4 , BgCastService.\cf2 class\cf4 );\
        \cf5 mCastService\cf4 .startForegroundService(\cf5 mCastIntent\cf4 );\
    \}\
\
    \cf2 public void \cf9 startBgCamera\cf4 () \{\
        \cf2 boolean \cf4 cameraAllowed = ContextCompat.
\f1\i checkSelfPermission
\f0\i0 (\cf2 this\cf4 , Manifest.permission.
\f1\i \cf5 CAMERA
\f0\i0 \cf4 ) == 
\f1\i \cf5 PERMISSION_GRANTED
\f0\i0 \cf4 ;\
        \cf2 boolean \cf4 audioAllowed = ContextCompat.
\f1\i checkSelfPermission
\f0\i0 (\cf2 this\cf4 , Manifest.permission.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 ) == 
\f1\i \cf5 PERMISSION_GRANTED
\f0\i0 \cf4 ;\
        \cf2 boolean \cf4 storageAllowed = ContextCompat.
\f1\i checkSelfPermission
\f0\i0 (\cf2 this\cf4 , Manifest.permission.
\f1\i \cf5 WRITE_EXTERNAL_STORAGE
\f0\i0 \cf4 ) == 
\f1\i \cf5 PERMISSION_GRANTED
\f0\i0 \cf4 ;\
        \cf2 if \cf4 (cameraAllowed && audioAllowed && storageAllowed) \{\
            startCameraIntent();\
        \} \cf2 else \cf4 \{\
            \cf2 int \cf4 permCount = (cameraAllowed ? \cf8 0 \cf4 : \cf8 1\cf4 ) + (audioAllowed ? \cf8 0 \cf4 : \cf8 1\cf4 ) + (storageAllowed ? \cf8 0 \cf4 : \cf8 1\cf4 );\
            String permissions[] = \cf2 new \cf4 String[permCount];\
            \cf2 int \cf4 n = \cf8 0\cf4 ;\
            \cf2 if \cf4 (!cameraAllowed) \{\
                permissions[n++] = Manifest.permission.
\f1\i \cf5 CAMERA
\f0\i0 \cf4 ;\
            \}\
            \cf2 if \cf4 (!audioAllowed) \{\
                permissions[n++] = Manifest.permission.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 ;\
            \}\
            \cf2 if \cf4 (!storageAllowed) \{\
                permissions[n++] = Manifest.permission.
\f1\i \cf5 WRITE_EXTERNAL_STORAGE
\f0\i0 \cf4 ;\
            \}\
            ActivityCompat.
\f1\i requestPermissions
\f0\i0 (\cf2 this\cf4 , permissions, 
\f1\i \cf5 CAMERA_REQUEST
\f0\i0 \cf4 );\
        \}\
    \}\
\
    \cf6 @SuppressLint\cf4 (\cf7 "NeedOnRequestPermissionsResult"\cf4 )\
    \cf6 @Override\
    \cf2 public void \cf9 onRequestPermissionsResult\cf4 (\cf2 int \cf4 requestCode, \cf6 @NonNull \cf4 String[] permissions, \cf6 @NonNull \cf2 int\cf4 [] grantResults) \{\
        \cf2 super\cf4 .onRequestPermissionsResult(requestCode, permissions, grantResults);\
\
        \cf2 if \cf4 (requestCode == 
\f1\i \cf5 CAMERA_REQUEST
\f0\i0 \cf4 ) \{\
            \cf2 for \cf4 (\cf2 int \cf4 result : grantResults) \{\
                \cf2 if \cf4 (result == PackageManager.
\f1\i \cf5 PERMISSION_DENIED
\f0\i0 \cf4 ) \{\
                    \cf2 return\cf4 ;\
                \}\
            \}\
            startCameraIntent();\
        \} \cf2 else \cf4 \{\
            MainActivityPermissionsDispatcher.
\f1\i onRequestPermissionsResult
\f0\i0 (\cf2 this\cf4 , requestCode, grantResults);\
        \}\
    \}\
\
    \cf2 public boolean \cf9 isPlayServiceRunning\cf4 () \{\
        Class serviceClass = PlayService.\cf2 class\cf4 ;\
        ActivityManager manager = (ActivityManager) getSystemService(Context.
\f1\i \cf5 ACTIVITY_SERVICE
\f0\i0 \cf4 );\
        \cf2 for \cf4 (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.
\f1\i \cf5 MAX_VALUE
\f0\i0 \cf4 )) \{\
            \cf2 if \cf4 (serviceClass.getName().equals(service.\cf5 service\cf4 .getClassName())) \{\
                \cf2 return true\cf4 ;\
            \}\
        \}\
        \cf2 return false\cf4 ;\
    \}\
\
    \cf2 public boolean \cf9 isUSBServiceRunning\cf4 () \{\
        Class serviceClass = BgUSBService.\cf2 class\cf4 ;\
        ActivityManager manager = (ActivityManager) getSystemService(Context.
\f1\i \cf5 ACTIVITY_SERVICE
\f0\i0 \cf4 );\
        \cf2 for \cf4 (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.
\f1\i \cf5 MAX_VALUE
\f0\i0 \cf4 )) \{\
            \cf2 if \cf4 (serviceClass.getName().equals(service.\cf5 service\cf4 .getClassName())) \{\
                \cf2 return true\cf4 ;\
            \}\
        \}\
        \cf2 return false\cf4 ;\
    \}\
\
    \cf2 public boolean \cf9 isCastServiceRunning\cf4 () \{\
        Class serviceClass = BgCastService.\cf2 class\cf4 ;\
        ActivityManager manager = (ActivityManager) getSystemService(Context.
\f1\i \cf5 ACTIVITY_SERVICE
\f0\i0 \cf4 );\
        \cf2 for \cf4 (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.
\f1\i \cf5 MAX_VALUE
\f0\i0 \cf4 )) \{\
            \cf2 if \cf4 (serviceClass.getName().equals(service.\cf5 service\cf4 .getClassName())) \{\
                \cf2 return true\cf4 ;\
            \}\
        \}\
        \cf2 return false\cf4 ;\
    \}\
\
    \cf2 public boolean \cf9 isWifiServiceRunning\cf4 () \{\
        Class serviceClass = BgWifiService.\cf2 class\cf4 ;\
        ActivityManager manager = (ActivityManager) getSystemService(Context.
\f1\i \cf5 ACTIVITY_SERVICE
\f0\i0 \cf4 );\
        \cf2 for \cf4 (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.
\f1\i \cf5 MAX_VALUE
\f0\i0 \cf4 )) \{\
            \cf2 if \cf4 (serviceClass.getName().equals(service.\cf5 service\cf4 .getClassName())) \{\
                \cf2 return true\cf4 ;\
            \}\
        \}\
        \cf2 return false\cf4 ;\
    \}\
\
    ServiceConnection \cf5 play_connection \cf4 = \cf2 new \cf4 ServiceConnection() \{\
        \cf6 @Override\
        \cf2 public void \cf9 onServiceConnected\cf4 (ComponentName className, IBinder s) \{\
\
        \}\
\
        \cf6 @Override\
        \cf2 public void \cf9 onServiceDisconnected\cf4 (ComponentName arg0) \{\
        \}\
    \};\
\
    \cf6 @SuppressLint\cf4 (\cf7 "BatteryLife"\cf4 )\
    \cf2 public void \cf9 requestIgnoreBatteryOptimizationsPermission\cf4 (Context context) \{\
        PowerManager powerManager = (PowerManager) context.getSystemService(Context.
\f1\i \cf5 POWER_SERVICE
\f0\i0 \cf4 );\
        \cf2 if \cf4 (!powerManager.isIgnoringBatteryOptimizations(context.getPackageName())) \{\
            Intent intent = \cf2 new \cf4 Intent(
\f1\i \cf5 ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
\f0\i0 \cf4 );\
            intent.setData(Uri.
\f1\i parse
\f0\i0 (\cf7 "package:" \cf4 + context.getPackageName()));\
            intent.addFlags(Intent.
\f1\i \cf5 FLAG_ACTIVITY_NEW_TASK
\f0\i0 \cf4 );\
            context.startActivity(intent);\
        \}\
    \}\
\
    \cf2 private void \cf9 requestPermission\cf4 (UsbDevice device) \{\
        \cf2 if \cf4 (!\cf5 usbManager\cf4 .hasPermission(device)) \{\
            \cf5 usbManager\cf4 .requestPermission(device, \cf5 permissionIntent\cf4 );\
        \} \cf2 else \cf4 \{\
            handleUsbDevice(device);\
        \}\
    \}\
\
    \cf2 private \cf4 BroadcastReceiver \cf5 usbReceiver \cf4 = \cf2 new \cf4 BroadcastReceiver() \{\
        \cf6 @Override\
        \cf2 public void \cf9 onReceive\cf4 (Context context, Intent intent) \{\
            String action = intent.getAction();\
            \cf2 if \cf4 (
\f1\i \cf5 ACTION_USB_PERMISSION
\f0\i0 \cf4 .equals(action)) \{\
                \cf2 synchronized \cf4 (\cf2 this\cf4 ) \{\
                    UsbDevice device = intent.getParcelableExtra(UsbManager.
\f1\i \cf5 EXTRA_DEVICE
\f0\i0 \cf4 );\
                    \cf2 if \cf4 (intent.getBooleanExtra(UsbManager.
\f1\i \cf5 EXTRA_PERMISSION_GRANTED
\f0\i0 \cf4 , \cf2 false\cf4 )) \{\
                        \cf2 if \cf4 (device != \cf2 null\cf4 ) \{\
                            handleUsbDevice(device);\
                            Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "onReceive: permission usb grant"\cf4 );\
                        \}\
                    \} \cf2 else \cf4 \{\
                        Toast.
\f1\i makeText
\f0\i0 (context, \cf7 "Permission denied for device"\cf4 , Toast.
\f1\i \cf5 LENGTH_SHORT
\f0\i0 \cf4 ).show();\
                    \}\
                \}\
            \}\
            \cf2 if \cf4 (UsbManager.
\f1\i \cf5 ACTION_USB_DEVICE_DETACHED
\f0\i0 \cf4 .equals(action)) \{\
                String storageType = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 Storage_Type
\f0\i0 \cf4 , \cf7 ""\cf4 );\
                \cf2 if \cf4 (storageType.contains(\cf7 "USB"\cf4 ) || storageType.contains(\cf7 "SDCARD"\cf4 ) || storageType.contains(\cf7 "External"\cf4 )) \{\
                    String defaultPath = ResourceUtil.
\f1\i getRecordPath
\f0\i0 ();\
                    AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_STORAGE_INTERNAL
\f0\i0 \cf4 , \cf7 "INTERNAL STORAGE"\cf4 );\
                    AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 Storage_Type
\f0\i0 \cf4 , \cf7 "Storage Location: Phone Storage"\cf4 );\
                    AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STORAGE_LOCATION
\f0\i0 \cf4 , defaultPath);\
                    AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 GALLERY_PATH
\f0\i0 \cf4 , defaultPath);\
                    notifyFragments(defaultPath);\
                    openDirectory();\
                    AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_STORAGE_EXTERNAL
\f0\i0 \cf4 , \cf7 ""\cf4 );\
                    AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_STORAGE_SDCARD
\f0\i0 \cf4 , \cf7 ""\cf4 );\
                \}\
            \}\
        \}\
    \};\
\
    \cf2 public void \cf9 openDirectory\cf4 () \{\
        AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_FOR_STORAGE_LOCATION
\f0\i0 \cf4 , \cf2 true\cf4 );\
        Intent intent = \cf2 new \cf4 Intent(Intent.
\f1\i \cf5 ACTION_OPEN_DOCUMENT_TREE
\f0\i0 \cf4 );\
        intent.addFlags(Intent.
\f1\i \cf5 FLAG_GRANT_READ_URI_PERMISSION 
\f0\i0 \cf4 | Intent.
\f1\i \cf5 FLAG_GRANT_WRITE_URI_PERMISSION
\f0\i0 \cf4 );\
        startActivityForResult(intent, 
\f1\i \cf5 REQUEST_CODE_PICK_FOLDER
\f0\i0 \cf4 );\
    \}\
\
    \cf2 private void \cf9 notifyFragments\cf4 (String newPath) \{\
        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 STORAGE_PATH_SETTING
\f0\i0 \cf4 , newPath);\
        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 STORAGE_PATH_PLAY_BACK
\f0\i0 \cf4 , newPath);\
    \}\
\
    \cf2 private void \cf9 handleUsbDevice\cf4 (UsbDevice device) \{\
        Toast.
\f1\i makeText
\f0\i0 (getApplicationContext(), \cf7 "USB Device connected: " \cf4 + device.getDeviceName(), Toast.
\f1\i \cf5 LENGTH_SHORT
\f0\i0 \cf4 ).show();\
    \}\
\
    \cf2 void \cf9 initNetworkTimer\cf4 () \{\
        \cf5 handler \cf4 = \cf2 new \cf4 Handler();\
        \cf5 updateTimeRunnable \cf4 = () -> \{\
            \cf2 if \cf4 (\cf5 liveFragment \cf4 != \cf2 null \cf4 && \cf5 liveFragment\cf4 .\cf5 is_wifi_opened\cf4 ) \{\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 NETWORK_UPDATE_LIVE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
            \}\
        \};\
        \cf5 handler\cf4 .post(\cf5 updateTimeRunnable\cf4 );\
    \}\
\
\
    \cf2 public void \cf9 startLocationService\cf4 () \{\
        \cf2 if \cf4 (\cf5 location_intent \cf4 == \cf2 null\cf4 ) \{\
            \cf5 location_intent \cf4 = \cf2 new \cf4 Intent(\cf2 this\cf4 , LocationManagerService.\cf2 class\cf4 );\
            Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "startLocationService: 1"\cf4 );\
        \}\
        \cf2 if \cf4 (!LocationManagerService.
\f1\i \cf5 isRunning
\f0\i0 \cf4 ) \{\
            startService(\cf5 location_intent\cf4 );\
            Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "startLocationService: 2"\cf4 );\
        \}\
    \}\
\
    \cf2 public void \cf9 stopLocationService\cf4 () \{\
        \cf2 if \cf4 (\cf5 location_intent \cf4 != \cf2 null \cf4 && LocationManagerService.
\f1\i \cf5 isRunning
\f0\i0 \cf4 ) \{\
            stopService(\cf5 location_intent\cf4 );\
        \}\
    \}\
\
    \cf2 public void \cf9 stopWifiService\cf4 () \{\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        stopWifiStream();\
        \cf2 if \cf4 (\cf5 mWifiCameraIntent \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mWifiService\cf4 .stopService(\cf5 mWifiCameraIntent\cf4 );\
            \cf5 mWifiService\cf4 .stopAPICalling();\
        \}\
        \cf2 if \cf4 (isWifiServiceRunning()) \{\
            \cf2 try \cf4 \{\
                unbindService(\cf5 mWifiConnection\cf4 );\
            \} \cf2 catch \cf4 (RuntimeException e) \{\
\
            \}\
            \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
            \cf5 isWifiServiceBound \cf4 = \cf2 false\cf4 ;\
        \}\
    \}\
\
    \cf2 public void \cf9 stopUSBService\cf4 () \{\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        stopStream();\
        \cf2 if \cf4 (\cf5 mUSBCameraIntent \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mUSBService\cf4 .stopService(\cf5 mUSBCameraIntent\cf4 );\
        \}\
        \cf2 if \cf4 (\cf5 isUsbServiceBound\cf4 ) \{\
            \cf2 if \cf4 (isUSBServiceRunning()) \{\
                \cf2 try \cf4 \{\
                    unbindService(\cf5 mUSBConnection\cf4 );\
                \} \cf2 catch \cf4 (RuntimeException e) \{\
                    e.printStackTrace();\
                \}\
                \cf5 isUsbServiceBound \cf4 = \cf2 false\cf4 ; \cf10 // Set flag to false after unbinding\
                \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \}\
    \}\
\
\
    \cf2 void \cf9 restartApp\cf4 () \{\
        \cf2 if \cf4 (ChessActivity.
\f1\i \cf5 instanceRef 
\f0\i0 \cf4 != \cf2 null \cf4 && ChessActivity.
\f1\i \cf5 instanceRef
\f0\i0 \cf4 .get() != \cf2 null\cf4 ) \{\
            \cf5 should_restart \cf4 = \cf2 true\cf4 ;\
            \cf2 return\cf4 ;\
        \}\
        \cf5 should_restart \cf4 = \cf2 false\cf4 ;\
        stopBgCamera();\
        stopWifiService();\
        stopUSBService();\
        stopBgCast();\
        Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "restartCamera: 4"\cf4 );\
        String strMessage = \cf7 ""\cf4 ;\
        \cf2 boolean \cf4 isFirstMainLoad = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_MAIN_FIRST_LAUNCH
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (!isFirstMainLoad) \{\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_MAIN_FIRST_LAUNCH
\f0\i0 \cf4 , \cf2 true\cf4 );\
            strMessage = getString(R.string.
\f1\i \cf5 service_restart_first
\f0\i0 \cf4 );\
        \} \cf2 else \cf4 \{\
            strMessage = getString(R.string.
\f1\i \cf5 service_restart_info
\f0\i0 \cf4 );\
        \}\
        AlertDialog.Builder aboutDialog = \cf2 new \cf4 AlertDialog.Builder(\cf2 this\cf4 ).setTitle(R.string.
\f1\i \cf5 restart_required
\f0\i0 \cf4 ).setMessage(strMessage).setPositiveButton(android.R.string.
\f1\i \cf5 ok
\f0\i0 \cf4 , \cf2 null\cf4 ).setCancelable(\cf2 true\cf4 ).setOnDismissListener(dialog -> quitApp());\
        AlertDialog alertDialog = aboutDialog.create();\
        alertDialog.show();\
        \cf10 // Change button text color to black\
        \cf4 Button positiveButton = alertDialog.getButton(AlertDialog.
\f1\i \cf5 BUTTON_POSITIVE
\f0\i0 \cf4 );\
        \cf2 if \cf4 (positiveButton != \cf2 null\cf4 ) \{\
            positiveButton.setTextColor(Color.
\f1\i \cf5 BLACK
\f0\i0 \cf4 ); \cf10 // Set positive button text color to black\
        \cf4 \}\
    \}\
\
    \cf2 void \cf9 quitApp\cf4 () \{\
        \cf5 restart_camera \cf4 = \cf2 false\cf4 ;\
        AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_OLD_VERSION
\f0\i0 \cf4 , CommonUtil.
\f1\i getVersionCode
\f0\i0 (\cf2 this\cf4 ));\
        releaseResources();\
        \cf5 isExit \cf4 = \cf2 true\cf4 ;\
        onBackPressed();\
        \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
    \}\
\
    \cf2 void \cf9 releaseResources\cf4 () \{\
        \cf2 if \cf4 (\cf5 myReceiver \cf4 != \cf2 null\cf4 ) \{\
            unregisterReceiver(\cf5 myReceiver\cf4 );\
            \cf5 myReceiver \cf4 = \cf2 null\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 powerReceiver \cf4 != \cf2 null\cf4 ) \{\
            unregisterReceiver(\cf5 powerReceiver\cf4 );\
            \cf5 powerReceiver \cf4 = \cf2 null\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 wifiReceiver \cf4 != \cf2 null\cf4 ) \{\
            unregisterReceiver(\cf5 wifiReceiver\cf4 );\
            \cf5 wifiReceiver \cf4 = \cf2 null\cf4 ;\
        \}\
\
        \cf2 if \cf4 (
\f1\i \cf5 instance 
\f0\i0 \cf4 != \cf2 null\cf4 ) \{\
            
\f1\i \cf5 instance 
\f0\i0 \cf4 = \cf2 null\cf4 ;\
        \}\
    \}\
\
    \cf2 public void \cf9 startVolumeService\cf4 () \{\
        \cf2 if \cf4 (!AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 VOLUME_KEY
\f0\i0 \cf4 , \cf2 false\cf4 )) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (!isPlayServiceRunning()) \{\
            startService(\cf5 playIntent\cf4 );\
            bindService(\cf5 playIntent\cf4 , \cf5 play_connection\cf4 , \cf8 0\cf4 );\
        \}\
    \}\
\
    \cf2 public void \cf9 stopVolumeService\cf4 () \{\
        \cf2 if \cf4 (isPlayServiceRunning()) \{\
            stopService(\cf5 playIntent\cf4 );\
            \cf2 try \cf4 \{\
                unbindService(\cf5 play_connection\cf4 );\
            \} \cf2 catch \cf4 (RuntimeException e) \{\
                e.printStackTrace();\
            \}\
        \}\
    \}\
\
\
    \cf2 void \cf9 SwitchContent\cf4 (\cf2 int \cf4 fragment_index, Bundle bundle) \{\
        \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
        \cf2 if \cf4 (\cf5 mCurrentFragmentIndex \cf4 != fragment_index && \cf5 mCurrentFragment \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mCurrentFragmentIndex \cf4 = fragment_index;\
            \cf2 if \cf4 (\cf5 mCurrentFragmentIndex \cf4 == 
\f1\i \cf5 SW_FRAGMENT_LIVE
\f0\i0 \cf4 ) \{\
                \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 mCurrentFragment\cf4 ).show(\cf5 liveFragment\cf4 ).commit();\
                setCurrentFragment(\cf5 liveFragment\cf4 );\
            \} \cf2 else if \cf4 (\cf5 mCurrentFragmentIndex \cf4 == AppConstant.
\f1\i \cf5 SW_FRAGMENT_PLAYBACK
\f0\i0 \cf4 ) \{\
                \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 mCurrentFragment\cf4 ).show(\cf5 playbackFragment\cf4 ).commit();\
                setCurrentFragment(\cf5 playbackFragment\cf4 );\
                \cf2 if \cf4 (\cf5 liveFragment\cf4 .isVisible()) \{\
                    \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 liveFragment\cf4 ).show(\cf5 playbackFragment\cf4 ).commit();\
                \}\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 INIT_FUN_PLAY_BACK
\f0\i0 \cf4 , \cf7 "playbackFragment.initialize();"\cf4 );\
            \} \cf2 else if \cf4 (\cf5 mCurrentFragmentIndex \cf4 == AppConstant.
\f1\i \cf5 SW_FRAGMENT_STREAMING
\f0\i0 \cf4 ) \{\
                \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 mCurrentFragment\cf4 ).show(\cf5 streamingFragment\cf4 ).commit();\
                \cf2 if \cf4 (\cf5 liveFragment\cf4 .isVisible()) \{\
                    \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 liveFragment\cf4 ).show(\cf5 streamingFragment\cf4 ).commit();\
                \}\
                setCurrentFragment(\cf5 streamingFragment\cf4 );\
                HashMap<String, Boolean> map = \cf2 new \cf4 HashMap<>();\
                map.put(\cf7 "streaming"\cf4 , \cf2 true\cf4 );\
                map.put(\cf7 "showing"\cf4 , \cf2 false\cf4 );\
\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING_DOUBLE_VAL
\f0\i0 \cf4 , map);\
\
            \} \cf2 else if \cf4 (\cf5 mCurrentFragmentIndex \cf4 == AppConstant.
\f1\i \cf5 SW_FRAGMENT_SETTINGS
\f0\i0 \cf4 ) \{\
                \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 mCurrentFragment\cf4 ).show(\cf5 settingsFragment\cf4 ).commit();\
                \cf2 if \cf4 (\cf5 liveFragment\cf4 .isVisible()) \{\
                    \cf5 fragmentManager\cf4 .beginTransaction().hide(\cf5 liveFragment\cf4 ).show(\cf5 settingsFragment\cf4 ).commit();\
                \}\
                setCurrentFragment(\cf5 settingsFragment\cf4 );\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 INIT_FUN_SETTING
\f0\i0 \cf4 , \cf7 "settingsFragment.initialize();"\cf4 );\
            \}\
            \cf2 if \cf4 (\cf5 mCurrentFragmentIndex \cf4 != 
\f1\i \cf5 SW_FRAGMENT_SETTINGS 
\f0\i0 \cf4 && \cf5 restart_camera\cf4 ) \{\
                restartCamera();\
            \}\
        \}\
    \}\
\
    \cf2 void \cf9 checkUpdate\cf4 () \{\
        HashMap<String, String> hashMap = \cf2 new \cf4 HashMap<>();\
        hashMap.put(\cf7 "Version"\cf4 , CommonUtil.
\f1\i getVersionCode
\f0\i0 (\cf2 this\cf4 ));\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \cf2 if \cf4 (!DeviceUtils.
\f1\i isNetworkAvailable
\f0\i0 (\cf2 this\cf4 )) \{\
            \cf2 return\cf4 ;\
        \}\
        HttpApiService.
\f1\i getHttpApiEndPoint
\f0\i0 ().checkVersion(hashMap).enqueue(\cf2 new \cf4 Callback<Responses.VersionResponse>() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onResponse\cf4 (Call<Responses.VersionResponse> call, Response<Responses.VersionResponse> response) \{\
                \cf2 if \cf4 (response.isSuccessful() && response.body() != \cf2 null \cf4 && !TextUtils.
\f1\i isEmpty
\f0\i0 (response.body().\cf5 url\cf4 )) \{\
                    \cf2 float \cf4 version = Float.
\f1\i valueOf
\f0\i0 (response.body().\cf5 version\cf4 );\
\
                    \cf2 float \cf4 app_version = Float.
\f1\i valueOf
\f0\i0 (CommonUtil.
\f1\i getVersionCode
\f0\i0 (MainActivity.\cf2 this\cf4 ));\
                    \cf2 if \cf4 (version > app_version) \{\
                        AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_VERSION
\f0\i0 \cf4 , response.body().\cf5 version\cf4 );\
                        AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_URL
\f0\i0 \cf4 , response.body().\cf5 url\cf4 );\
                        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
                        \cf2 new \cf4 AlertDialog.Builder(
\f1\i \cf5 instance
\f0\i0 \cf4 ).setTitle(R.string.
\f1\i \cf5 update_available
\f0\i0 \cf4 ).setMessage(getString(R.string.
\f1\i \cf5 confirm_update
\f0\i0 \cf4 )).setIcon(R.mipmap.
\f1\i \cf5 ic_launcher
\f0\i0 \cf4 ).setPositiveButton(R.string.
\f1\i \cf5 update
\f0\i0 \cf4 , (dialog, whichButton) -> \{\
                            \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
                            updateApp(\cf5 response\cf4 .body().\cf5 url\cf4 );\
                        \}).setNegativeButton(R.string.
\f1\i \cf5 cancel
\f0\i0 \cf4 , (dialog, whichButton) -> \{\
                            \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
                        \}).show();\
                    \}\
\cf10 //                    AppPreference.setStr(AppPreference.KEY.EXPIRY_DATE, response.body().date);\
//                    Log.e(TAG, "onResponse: "+response.body().date );\
\
                \cf4 \}\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onFailure\cf4 (Call<Responses.VersionResponse> call, Throwable t) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , t.getLocalizedMessage());\
                AppPreference.
\f1\i removeKey
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_VERSION
\f0\i0 \cf4 );\
            \}\
        \});\
    \}\
\
    \cf2 public void \cf9 updateApp\cf4 (String url) \{\
        \cf2 if \cf4 (TextUtils.
\f1\i isEmpty
\f0\i0 (url)) \{\
            url = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_URL
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        \}\
        \cf2 if \cf4 (TextUtils.
\f1\i isEmpty
\f0\i0 (url)) \{\
            \cf2 return\cf4 ;\
        \}\
\
        ACProgressFlower dialog_preivew = \cf2 new \cf4 ACProgressFlower.Builder(\cf2 this\cf4 ).direction(ACProgressConstant.
\f1\i \cf5 DIRECT_CLOCKWISE
\f0\i0 \cf4 ).themeColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 ).text(\cf7 "Preparing update..."\cf4 ).fadeColor(Color.
\f1\i \cf5 DKGRAY
\f0\i0 \cf4 ).build();\
        dialog_preivew.setCancelable(\cf2 false\cf4 );\
        dialog_preivew.show();\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
\
        ACProgressPie dialog = \cf2 new \cf4 ACProgressPie.Builder(\cf2 this\cf4 ).ringColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 ).pieColor(Color.
\f1\i \cf5 WHITE
\f0\i0 \cf4 ).updateType(ACProgressConstant.
\f1\i \cf5 PIE_MANUAL_UPDATE
\f0\i0 \cf4 ).build();\
        dialog.setCancelable(\cf2 false\cf4 );\
\
        FetchConfiguration fetchConfiguration = \cf2 new \cf4 FetchConfiguration.Builder(\cf2 this\cf4 ).setDownloadConcurrentLimit(\cf8 3\cf4 ).build();\
\
        \cf5 fetch \cf4 = Fetch.
\f1\i \cf5 Impl
\f0\i0 \cf4 .getInstance(fetchConfiguration);\
\
        String fileName = url.substring(url.lastIndexOf(\cf7 "/"\cf4 ) + \cf8 1\cf4 );\
        String downloadsPath = Environment.
\f1\i getExternalStoragePublicDirectory
\f0\i0 (Environment.
\f1\i \cf5 DIRECTORY_DOWNLOADS
\f0\i0 \cf4 ).getPath();\
        String dirPath = downloadsPath + \cf7 "/" \cf4 + fileName;\
\
        \cf2 final \cf4 Request request = \cf2 new \cf4 Request(url, dirPath);\
        request.setPriority(Priority.
\f1\i \cf5 HIGH
\f0\i0 \cf4 );\
        request.setNetworkType(NetworkType.
\f1\i \cf5 ALL
\f0\i0 \cf4 );\
        \cf5 fetch\cf4 .addListener(\cf2 new \cf4 FetchListener() \{\
            \cf6 @Override\
            \cf2 public void \cf9 onAdded\cf4 (\cf6 @NotNull \cf4 Download download) \{\
                \cf2 if \cf4 (\cf5 request\cf4 .getId() == download.getId()) \{ \cf10 // show progress\
\
                \cf4 \}\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onQueued\cf4 (\cf6 @NotNull \cf4 Download download, \cf2 boolean \cf4 b) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "reqest added"\cf4 );\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onWaitingNetwork\cf4 (\cf6 @NotNull \cf4 Download download) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "reqest added"\cf4 );\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onCompleted\cf4 (\cf6 @NotNull \cf4 Download download) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "reqest added"\cf4 );\
                Intent intent = \cf2 new \cf4 Intent(Intent.
\f1\i \cf5 ACTION_VIEW
\f0\i0 \cf4 );\
                File apkFile = \cf2 new \cf4 File(\cf5 dirPath\cf4 );\
                Uri uri = FileProvider.
\f1\i getUriForFile
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , getPackageName() + \cf7 ".provider"\cf4 , apkFile);\
                intent.setDataAndType(uri, \cf7 "application/vnd.android.package-archive"\cf4 );\
                intent.setFlags(Intent.
\f1\i \cf5 FLAG_ACTIVITY_NEW_TASK
\f0\i0 \cf4 );\
                intent.addFlags(Intent.
\f1\i \cf5 FLAG_GRANT_READ_URI_PERMISSION
\f0\i0 \cf4 );\
                startActivity(intent);\
                \cf5 dialog\cf4 .hide();\
                \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
                AppPreference.
\f1\i removeKey
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 APP_FORCE_QUIT
\f0\i0 \cf4 );\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onError\cf4 (\cf6 @NotNull \cf4 Download download, \cf6 @NotNull \cf4 Error error, \cf6 @Nullable \cf4 Throwable throwable) \{\
                \cf5 dialog\cf4 .hide();\
                \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
                MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , error.toString());\
                \cf5 dialog_preivew\cf4 .hide();\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onDownloadBlockUpdated\cf4 (\cf6 @NotNull \cf4 Download download, \cf6 @NotNull \cf4 DownloadBlock downloadBlock, \cf2 int \cf4 i) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "reqest added"\cf4 );\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onStarted\cf4 (\cf6 @NotNull \cf4 Download download, \cf6 @NotNull \cf4 List<? \cf2 extends \cf4 DownloadBlock> list, \cf2 int \cf4 i) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "reqest added"\cf4 );\
                \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
                \cf5 dialog\cf4 .show();\
                \cf5 dialog_preivew\cf4 .hide();\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onProgress\cf4 (\cf6 @NotNull \cf4 Download download, \cf2 long \cf4 l, \cf2 long \cf4 l1) \{\
                \cf2 if \cf4 (\cf5 request\cf4 .getId() == download.getId()) \{\
\cf10 //                    updateDownload(download, etaInMilliSeconds);\
                \cf4 \}\
                \cf2 int \cf4 progress = download.getProgress();\
                Log.
\f1\i e
\f0\i0 (\cf7 "progress: "\cf4 , progress + \cf7 ""\cf4 );\
                \cf5 dialog\cf4 .setPiePercentage((\cf2 float\cf4 ) progress / \cf8 100\cf4 );\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onPaused\cf4 (\cf6 @NotNull \cf4 Download download) \{\
\
                MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Updating paused"\cf4 );\
                \cf5 dialog\cf4 .hide();\
                \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onResumed\cf4 (\cf6 @NotNull \cf4 Download download) \{\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "reqest added"\cf4 );\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onCancelled\cf4 (\cf6 @NotNull \cf4 Download download) \{\
                MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Request canceled"\cf4 );\
                \cf5 dialog\cf4 .hide();\
                \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onRemoved\cf4 (\cf6 @NotNull \cf4 Download download) \{\
                MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Request removed"\cf4 );\
                \cf5 dialog\cf4 .hide();\
                \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 onDeleted\cf4 (\cf6 @NotNull \cf4 Download download) \{\
                MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Request deleted"\cf4 );\
                \cf5 dialog\cf4 .hide();\
                \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            \}\
        \});\
        \cf5 fetch\cf4 .enqueue(request, updatedRequest -> \{\
            \cf10 //Request was successfully enqueued for download.\
            \cf4 Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "reqest added"\cf4 );\
        \}, error -> \{\
            \cf10 //An error occurred enqueuing the request.\
            \cf4 Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , error.toString());\
        \});\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 onBackPressed\cf4 () \{\
        \cf2 if \cf4 (!\cf5 isExit\cf4 ) \{\
            \cf2 return\cf4 ;\
        \} \cf2 else \cf4 \{\
            \cf2 super\cf4 .onBackPressed();\
            finishAffinity();\
            \cf5 isExit \cf4 = \cf2 false\cf4 ;\
        \}\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 onWindowFocusChanged\cf4 (\cf2 boolean \cf4 hasFocus) \{\
        \cf2 super\cf4 .onWindowFocusChanged(hasFocus);\
        \cf2 if \cf4 (!hasFocus && 
\f1\i \cf5 is_passed 
\f0\i0 \cf4 && !\cf5 is_dialog\cf4 ) \{\
            hide_app();\
        \}\
        Log.
\f1\i e
\f0\i0 (\cf7 "Focus lost:"\cf4 , String.
\f1\i valueOf
\f0\i0 (hasFocus));\
    \}\
\
    \cf2 public void \cf9 hide_app\cf4 () \{\
        
\f1\i \cf5 is_passed 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
        \cf2 if \cf4 (!isRecordingCamera() && !isRecordingUSB() && !isStreaming() && \cf5 pushID \cf4 == -\cf8 1 \cf4 && \cf5 writeID \cf4 == -\cf8 1 \cf4 && !\cf5 sharedViewModel\cf4 .isUsbStreaming() && !\cf5 sharedViewModel\cf4 .isUsbRecording()) \{\
            stopBgCamera();\
            stopWifiService();\
            stopUSBService();\
            stopBgCast();\
            stopBgAudio();\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 RELEASE_CAMERA_LIVE
\f0\i0 \cf4 , \cf7 "releaseCameras"\cf4 );\
            quitApp();\
        \} \cf2 else \cf4 \{\
            moveTaskToBack(\cf2 true\cf4 );\
        \}\
    \}\
\
    \cf2 public void \cf9 startAudioStream\cf4 () \{\
        \cf2 if \cf4 (\cf5 mAudioService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        String base = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_BASE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        String channel_id = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_CHANNEL
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        String stream_url = String.
\f1\i format
\f0\i0 (\cf7 "%s/%s"\cf4 , base, channel_id);\
        \cf2 if \cf4 (TextUtils.
\f1\i isEmpty
\f0\i0 (stream_url)) \{\
            MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 invalid_url
\f0\i0 \cf4 );\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (TextUtils.
\f1\i isEmpty
\f0\i0 (stream_url)) \{\
            MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 invalid_url
\f0\i0 \cf4 );\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (!\cf5 mAudioService\cf4 .isStreaming()) \{\
            \cf2 boolean \cf4 audioOn = SettingsUtils.
\f1\i isAllowedAudio
\f0\i0 ();\
            
\f1\i \cf5 isStreaming 
\f0\i0 \cf4 = \cf2 true\cf4 ;\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 true\cf4 );\
            Log.
\f1\i e
\f0\i0 (\cf7 "http"\cf4 , \cf7 "startStream: 544"\cf4 );\
            updateDeviceInfo(\cf2 true\cf4 );\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING
\f0\i0 \cf4 , \cf2 false\cf4 );\
            updateDeviceInfo(\cf2 true\cf4 );\
            \cf2 boolean \cf4 recordOn = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 AUTO_RECORD
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf2 boolean \cf4 recordBroadcast = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORD_BROADCAST
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf2 if \cf4 (recordOn || recordBroadcast) \{\
                \cf2 boolean \cf4 isRecording = \cf5 mAudioService\cf4 .startRecording();\
                AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORDING_STARTED
\f0\i0 \cf4 , \cf2 true\cf4 );\
                \cf5 liveFragment\cf4 .\cf5 is_rec \cf4 = \cf2 true\cf4 ;\
                \cf5 liveFragment\cf4 .handleCameraView();\
                \cf2 if \cf4 (!isRecording) \{\
                    \cf5 liveFragment\cf4 .\cf5 is_rec \cf4 = \cf2 false\cf4 ;\
                    \cf5 liveFragment\cf4 .handleCameraView();\
                    AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORDING_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
                \}\
            \}\
            updateDeviceInfo(\cf2 true\cf4 );\
            \cf5 mAudioService\cf4 .startStreaming();\
            \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                    \cf6 @Override\
                    \cf2 public void \cf9 run\cf4 () \{\
                        \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream_active
\f0\i0 \cf4 );\
                    \}\
                \}, \cf8 300\cf4 );\
            \} \cf2 else \cf4 \{\
                \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream_active
\f0\i0 \cf4 );\
            \}\
        \} \cf2 else \cf4 \{\
            MessageDialog messageDialog = MessageDialog.
\f1\i show
\f0\i0 (getString(R.string.
\f1\i \cf5 confirmation_title
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 stop_streaming
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 Okay
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 cancel
\f0\i0 \cf4 )).setCancelButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                \cf6 @Override\
                \cf2 public boolean \cf9 onClick\cf4 (MessageDialog dialog, View v) \{\
                    dialog.dismiss();\
                    \cf2 return false\cf4 ;\
                \}\
            \}).setOkButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                \cf6 @Override\
                \cf2 public boolean \cf9 onClick\cf4 (MessageDialog baseDialog, View v) \{\
                    \cf5 mAudioService\cf4 .stopStreaming();\
                    \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING
\f0\i0 \cf4 , \cf2 false\cf4 );\
                    baseDialog.dismiss();\
                    updateDeviceInfo(\cf2 false\cf4 );\
                    Log.
\f1\i e
\f0\i0 (\cf7 "http"\cf4 , \cf7 "onClick: updateDeviceInfo 524"\cf4 );\
                    
\f1\i \cf5 isStreaming 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
                    AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
                    updateDeviceInfo(\cf2 false\cf4 );\
                    \cf2 boolean \cf4 recordOn = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 AUTO_RECORD
\f0\i0 \cf4 , \cf2 false\cf4 );\
                    \cf2 boolean \cf4 recordBroadcast = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORD_BROADCAST
\f0\i0 \cf4 , \cf2 false\cf4 );\
                    \cf2 if \cf4 (!recordOn || recordBroadcast) \{\
                        \cf2 if \cf4 (\cf5 mAudioService \cf4 != \cf2 null\cf4 ) \{\
                            \cf5 mAudioService\cf4 .stopRecording(\cf2 false\cf4 );\
                            \cf5 liveFragment\cf4 .\cf5 is_rec \cf4 = \cf2 false\cf4 ;\
                            \cf5 liveFragment\cf4 .handleCameraView();\
                            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORDING_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        \}\
                    \}\
                    \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                        \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                            \cf6 @Override\
                            \cf2 public void \cf9 run\cf4 () \{\
                                \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                            \}\
                        \}, \cf8 300\cf4 );\
                    \} \cf2 else \cf4 \{\
                        \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                    \}\
                    \cf2 return false\cf4 ;\
                \}\
            \});\
            messageDialog.setOkTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
            messageDialog.setCancelTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
        \}\
        \cf5 dlg_progress\cf4 .dismiss();\
    \}\
\
    \cf2 public void \cf9 onCastStream\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCastService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
            \cf2 if \cf4 (!\cf5 mCastService\cf4 .isStreaming()) \{\
                \cf2 boolean \cf4 audioOn = SettingsUtils.
\f1\i isCastAudioAllowed
\f0\i0 ();\
                \cf10 // Storage permissions are required on Android 9 (API level 28) or lower\
                \cf4 updateDeviceInfo(\cf2 true\cf4 );\
                stopBgCast();\
                initCastService();\
                \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                    \cf6 @Override\
                    \cf2 public void \cf9 run\cf4 () \{\
                        \cf2 if \cf4 (\cf5 audioOn\cf4 ) \{\
                            MainActivityPermissionsDispatcher.
\f1\i launchAudioWithPermissionCheck
\f0\i0 (MainActivity.\cf2 this\cf4 );\
                        \} \cf2 else \cf4 \{\
                            requestMediaProjection();\
                        \}\
                    \}\
                \}, \cf8 200\cf4 );\
            \} \cf2 else \cf4 \{\
                MessageDialog messageDialog = MessageDialog.
\f1\i show
\f0\i0 (getString(R.string.
\f1\i \cf5 confirmation_title
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 stop_streaming
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 Okay
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 cancel
\f0\i0 \cf4 )).setCancelButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                    \cf6 @Override\
                    \cf2 public boolean \cf9 onClick\cf4 (MessageDialog dialog, View v) \{\
                        dialog.dismiss();\
                        \cf2 return false\cf4 ;\
                    \}\
                \}).setOkButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                    \cf6 @Override\
                    \cf2 public boolean \cf9 onClick\cf4 (MessageDialog baseDialog, View v) \{\
                        HashMap<String, Boolean> map = \cf2 new \cf4 HashMap<>();\
                        map.put(\cf7 "streaming"\cf4 , \cf2 false\cf4 );\
                        map.put(\cf7 "showing"\cf4 , \cf2 false\cf4 );\
                        AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
                        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING_DOUBLE_VAL
\f0\i0 \cf4 , map);\
                        \cf5 mCastService\cf4 .stopScreenCast();\
                        \cf5 mCastService\cf4 .stopRecording(\cf2 false\cf4 );\
                        \cf5 sharedViewModel\cf4 .setScreenCastOpened(\cf2 false\cf4 );\
                        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 HANDEL_STREAM_VIEW_LIVE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
                        \cf10 //                    getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\
                        \cf5 liveFragment\cf4 .handleCameraView();\
                        updateDeviceInfo(\cf2 false\cf4 );\
                        stopBgCast();\
                        \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                            \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                                \cf6 @Override\
                                \cf2 public void \cf9 run\cf4 () \{\
                                    \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                                \}\
                            \}, \cf8 300\cf4 );\
                        \} \cf2 else \cf4 \{\
                            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                        \}\
                        \cf2 return false\cf4 ;\
                    \}\
                \});\
                messageDialog.setOkTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
                messageDialog.setCancelTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
            \}\
            \cf5 dlg_progress\cf4 .dismiss();\
        \} \cf2 else \cf4 \{\
            \cf10 // Toast.makeText(this,"Cast service is not running switch to camera and open cast again.",2).show();\
            \cf4 initCastService();\
        \}\
    \}\
\
\
    \cf6 @NeedsPermission\cf4 (\{Manifest.permission.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 , Manifest.permission.
\f1\i \cf5 WRITE_EXTERNAL_STORAGE
\f0\i0 \cf4 \})\
    \cf2 void \cf9 launchAudioRecord\cf4 () \{\
        requestMediaProjection();\
    \}\
\
    \cf6 @NeedsPermission\cf4 (Manifest.permission.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 )\
    \cf2 void \cf9 launchAudio\cf4 () \{\
        requestMediaProjection();\
    \}\
\
    \cf6 @NeedsPermission\cf4 (Manifest.permission.
\f1\i \cf5 WRITE_EXTERNAL_STORAGE
\f0\i0 \cf4 )\
    \cf2 void \cf9 launchRecord\cf4 () \{\
        requestMediaProjection();\
    \}\
\
    \cf6 @OnPermissionDenied\cf4 (\{Manifest.permission.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 , Manifest.permission.
\f1\i \cf5 WRITE_EXTERNAL_STORAGE
\f0\i0 \cf4 \})\
    \cf2 void \cf9 onDeniedAudioRecord\cf4 () \{\
        MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 permission_denied
\f0\i0 \cf4 );\
    \}\
\
    \cf6 @OnPermissionDenied\cf4 (Manifest.permission.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 )\
    \cf2 void \cf9 onDeniedAudio\cf4 () \{\
        MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 mic_denied
\f0\i0 \cf4 );\
    \}\
\
    \cf6 @OnPermissionDenied\cf4 (Manifest.permission.
\f1\i \cf5 WRITE_EXTERNAL_STORAGE
\f0\i0 \cf4 )\
    \cf2 void \cf9 onDeniedRecord\cf4 () \{\
        MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 storage_denied
\f0\i0 \cf4 );\
    \}\
\
    \cf6 @OnNeverAskAgain\cf4 (\{Manifest.permission.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 , Manifest.permission.
\f1\i \cf5 WRITE_EXTERNAL_STORAGE
\f0\i0 \cf4 \})\
    \cf2 void \cf9 onNeverAskAgainAudioRecord\cf4 () \{\
        MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 permission_permanently_denied
\f0\i0 \cf4 );\
    \}\
\
    \cf6 @OnNeverAskAgain\cf4 (Manifest.permission.
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 )\
    \cf2 void \cf9 onNeverAskAgainAudio\cf4 () \{\
        MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 mic_permanently_denied
\f0\i0 \cf4 );\
    \}\
\
    \cf6 @OnNeverAskAgain\cf4 (Manifest.permission.
\f1\i \cf5 WRITE_EXTERNAL_STORAGE
\f0\i0 \cf4 )\
    \cf2 void \cf9 onNeverAskAgainRecord\cf4 () \{\
        MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 storage_permanently_denied
\f0\i0 \cf4 );\
    \}\
\
    \cf2 private void \cf9 requestMediaProjection\cf4 () \{\
        \cf10 //Log.v(TAG, "requestMediaProjection");\
        \cf2 if \cf4 (\cf5 mCastService \cf4 == \cf2 null \cf4 || !\cf5 mCastService\cf4 .isRunningForeground()) \{\
            \cf2 return\cf4 ;\
        \}\
\
        \cf2 final \cf4 MediaProjectionManager manager = (MediaProjectionManager) getSystemService(Context.
\f1\i \cf5 MEDIA_PROJECTION_SERVICE
\f0\i0 \cf4 );\
        startActivityForResult(manager.createScreenCaptureIntent(), \cf5 REQUEST_MEDIA_PROJECTION\cf4 );\
    \}\
\
    \cf2 public \cf4 Streamer.Size \cf9 castSize\cf4 () \{\
        \cf2 return \cf5 castSize\cf4 ;\
    \}\
\
    \cf2 private \cf4 Streamer.Size \cf9 getSize\cf4 (\cf2 final int \cf4 screenW, \cf2 final int \cf4 screenH) \{\
        \cf2 final int \cf4 h;\
        \cf2 final int \cf4 w;\
        \cf2 if \cf4 (screenH > screenW) \{\
            h = screenW;\
            w = screenH;\
        \} \cf2 else \cf4 \{\
            h = screenH;\
            w = screenW;\
        \}\
\
        \cf2 final \cf4 Streamer.Size size;\
        \cf2 int \cf4 cast_resolution = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 CAST_RESOLUTION
\f0\i0 \cf4 , \cf8 0\cf4 );\
        List<String> cast_array = Arrays.
\f1\i asList
\f0\i0 (getResources().getStringArray(R.array.
\f1\i \cf5 screencast_sizes
\f0\i0 \cf4 ));\
        \cf2 if \cf4 (cast_resolution != \cf8 0\cf4 ) \{\
            cast_resolution = Integer.
\f1\i parseInt
\f0\i0 (cast_array.get(cast_resolution).replaceAll(\cf7 "\cb11 p\cb3 "\cf4 , \cf7 ""\cf4 ));\
        \}\
        \cf2 switch \cf4 (cast_resolution) \{\
            \cf2 case \cf8 1080\cf4 :\
                size = \cf2 new \cf4 Streamer.Size(\cf8 1920\cf4 , \cf8 1080\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 case \cf8 720\cf4 :\
                size = \cf2 new \cf4 Streamer.Size(\cf8 1280\cf4 , \cf8 720\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 case \cf8 480\cf4 :\
                size = \cf2 new \cf4 Streamer.Size(\cf8 720\cf4 , \cf8 480\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 case \cf8 240\cf4 :\
                size = \cf2 new \cf4 Streamer.Size(\cf8 320\cf4 , \cf8 240\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 default\cf4 :\
                \cf10 //Log.d(TAG, "Auto select resolution, w=" + Integer.toString(w) + ", h=" + Integer.toString(h));\
                \cf2 if \cf4 (w >= \cf8 1920 \cf4 && h >= \cf8 1080\cf4 ) \{\
                    size = \cf2 new \cf4 Streamer.Size(\cf8 1920\cf4 , \cf8 1080\cf4 );\
                \} \cf2 else if \cf4 (w >= \cf8 1280 \cf4 && h >= \cf8 720\cf4 ) \{\
                    size = \cf2 new \cf4 Streamer.Size(\cf8 1280\cf4 , \cf8 720\cf4 );\
                \} \cf2 else if \cf4 (w >= \cf8 720 \cf4 && h >= \cf8 480\cf4 ) \{\
                    size = \cf2 new \cf4 Streamer.Size(\cf8 720\cf4 , \cf8 480\cf4 );\
                \} \cf2 else \cf4 \{\
                    size = \cf2 new \cf4 Streamer.Size(\cf8 320\cf4 , \cf8 240\cf4 );\
                \}\
                \cf2 break\cf4 ;\
        \}\
\
        \cf5 castSize \cf4 = size;\
\cf10 //        return (!rotate) ? size : new Streamer.Size(size.height, size.width);\
        \cf2 return \cf4 size;\
    \}\
\
    \cf6 @Override\
    \cf2 protected void \cf9 onStart\cf4 () \{\
        \cf2 super\cf4 .onStart();\
        \cf2 if \cf4 (
\f1\i \cf5 instance 
\f0\i0 \cf4 == \cf2 null\cf4 ) \{\
            
\f1\i \cf5 instance 
\f0\i0 \cf4 = \cf2 this\cf4 ;\
        \}\
\
    \}\
\
    \cf6 @Override\
    \cf2 protected void \cf9 onRestart\cf4 () \{\
        \cf2 super\cf4 .onRestart();\
        \cf2 boolean \cf4 isForStorgaLocation = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_FOR_STORAGE_LOCATION
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (!isForStorgaLocation) \{\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_FOR_STORAGE_LOCATION
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf2 if \cf4 (AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 UI_CONVERT_MODE
\f0\i0 \cf4 , \cf2 false\cf4 ) && !
\f1\i \cf5 is_passed
\f0\i0 \cf4 ) \{\
                Intent intent = \cf2 new \cf4 Intent(\cf2 this\cf4 , ChessActivity.\cf2 class\cf4 );\
                intent.addFlags(Intent.
\f1\i \cf5 FLAG_ACTIVITY_CLEAR_TOP 
\f0\i0 \cf4 | Intent.
\f1\i \cf5 FLAG_ACTIVITY_SINGLE_TOP
\f0\i0 \cf4 );\
                overridePendingTransition(\cf8 0\cf4 , \cf8 0\cf4 ); \cf10 // Disable transition animation\
                \cf4 startActivity(intent);\
            \}\
        \}\
    \}\
\
    \cf2 void \cf9 updatePreviewRatio\cf4 () \{\
        Streamer.Size video_size = SettingsUtils.
\f1\i getVideoSize
\f0\i0 (findCameraInfo());\
        \cf2 float \cf4 ratio = (\cf2 float\cf4 ) video_size.\cf5 height \cf4 / (\cf2 float\cf4 ) video_size.\cf5 width\cf4 ;\
        \cf2 if \cf4 (getResources().getConfiguration().\cf5 orientation \cf4 == Configuration.
\f1\i \cf5 ORIENTATION_LANDSCAPE
\f0\i0 \cf4 ) \{\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 ASPECT_RATIO_LIVE
\f0\i0 \cf4 , \cf8 1 \cf4 / ratio);\
        \} \cf2 else \cf4 \{\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 ASPECT_RATIO_LIVE
\f0\i0 \cf4 , ratio);\
        \}\
    \}\
\
    \cf2 public \cf4 CameraInfo \cf9 findCameraInfo\cf4 () \{\
        CameraInfo cameraInfo = \cf2 null\cf4 ;\
        List<CameraInfo> mCameraList = com.checkmate.android.util.CameraManager.
\f1\i getCameraList
\f0\i0 (\cf2 this\cf4 , \cf2 true\cf4 );\
        String cameraId = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 SELECTED_POSITION
\f0\i0 \cf4 , AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 );\
        \cf2 if \cf4 (!TextUtils.
\f1\i equals
\f0\i0 (cameraId, AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 ) && !TextUtils.
\f1\i equals
\f0\i0 (cameraId, AppConstant.
\f1\i \cf5 FRONT_CAMERA
\f0\i0 \cf4 )) \{\
            cameraId = AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 ;\
        \}\
        \cf2 if \cf4 (TextUtils.
\f1\i isEmpty
\f0\i0 (cameraId)) \{\
            cameraId = AppConstant.
\f1\i \cf5 REAR_CAMERA
\f0\i0 \cf4 ;\
        \}\
        \cf2 for \cf4 (CameraInfo cursor : mCameraList) \{\
            \cf2 if \cf4 (cursor.\cf5 cameraId\cf4 .equals(cameraId)) \{\
                cameraInfo = cursor;\
                \cf2 break\cf4 ;\
            \}\
        \}\
        \cf2 return \cf4 cameraInfo;\
    \}\
\
    \cf6 @Override\
    \cf2 protected void \cf9 onResume\cf4 () \{\
        \cf2 super\cf4 .onResume();\
        \cf5 flImages\cf4 .setVisibility(View.
\f1\i \cf5 GONE
\f0\i0 \cf4 );\
\
        \cf2 if \cf4 (AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 GPS_ENABLED
\f0\i0 \cf4 , \cf2 false\cf4 )) \{\
            startLocationService();\
            Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "onResume: gps_enabled"\cf4 );\
        \}\
\
        \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
        \cf2 if \cf4 (isStreaming()) \{\
            \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \}\
        \cf2 if \cf4 (ResourceUtil.
\f1\i isExpired
\f0\i0 ()) \{\
            disableUserInterface();\
        \}\
\
        \cf2 if \cf4 (\cf5 should_restart\cf4 ) \{\
            restartApp();\
        \}\
        \cf2 if \cf4 (
\f1\i \cf5 instance 
\f0\i0 \cf4 == \cf2 null\cf4 ) \{\
            
\f1\i \cf5 instance 
\f0\i0 \cf4 = \cf2 this\cf4 ;\
        \}\
        LiveFragment frag = 
\f1\i \cf5 instance
\f0\i0 \cf4 .\cf5 liveFragment\cf4 ;\
        \cf2 if \cf4 (frag != \cf2 null \cf4 && frag.isAdded()) \{\
            \cf2 if \cf4 (frag.\cf5 is_cast_opened\cf4 ) \{\
                \cf2 if \cf4 (\cf5 mCastService \cf4 == \cf2 null\cf4 ) \{\
                    \cf2 if \cf4 (AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 )) \{\
                        initFragCastService();\
                    \}\
                \}\
            \}\
        \}\
        \cf5 dlg_progress\cf4 .dismiss();\
    \}\
\
    \cf2 void \cf9 disableUserInterface\cf4 () \{\
        View rootview = findViewById(android.R.id.
\f1\i \cf5 content
\f0\i0 \cf4 );\
        String message = \cf7 "Your app has expired"\cf4 ;\
        Banner.
\f1\i make
\f0\i0 (rootview, getBaseContext(), Banner.
\f1\i \cf5 ERROR
\f0\i0 \cf4 , message, Banner.
\f1\i \cf5 TOP
\f0\i0 \cf4 ).show();\
        \cf10 //      getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\
        \cf4 Banner.
\f1\i getInstance
\f0\i0 ().getBannerView().setOnClickListener(view -> \{\
            AppPreference.
\f1\i removeKey
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 ACTIVATION_SERIAL
\f0\i0 \cf4 );\
            AppPreference.
\f1\i removeKey
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 ACTIVATION_CODE
\f0\i0 \cf4 );\
            startActivity(\cf2 new \cf4 Intent(
\f1\i \cf5 instance
\f0\i0 \cf4 , SplashActivity.\cf2 class\cf4 ));\
            finish();\
        \});\
    \}\
\
    \cf6 @Override\
    \cf2 protected void \cf9 onPause\cf4 () \{\
        \cf2 super\cf4 .onPause();\
        
\f1\i \cf5 is_passed 
\f0\i0 \cf4 = \cf2 false\cf4 ;\
\
    \}\
\
    \cf6 @Override\
    \cf2 protected void \cf9 onStop\cf4 () \{\
        \cf2 super\cf4 .onStop();\
\
    \}\
\
    \cf6 @Override\
    \cf2 public boolean \cf9 onKeyDown\cf4 (\cf2 int \cf4 keyCode, KeyEvent event) \{\
        \cf2 return super\cf4 .onKeyDown(keyCode, event);\
    \}\
\
    \cf6 @Override\
    \cf2 protected void \cf9 onDestroy\cf4 () \{\
\
       \cf10 // stopHTTPServer();\
        \cf2 if \cf4 (\cf5 usbReceiver \cf4 != \cf2 null\cf4 ) \{\
            \cf2 try \cf4 \{\
                unregisterReceiver(\cf5 usbReceiver\cf4 );\
            \} \cf2 catch \cf4 (Exception e) \{\
                e.printStackTrace();\
            \}\
            \cf5 usbReceiver \cf4 = \cf2 null\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 myReceiver \cf4 != \cf2 null\cf4 ) \{\
            \cf2 try \cf4 \{\
                unregisterReceiver(\cf5 myReceiver\cf4 );\
            \} \cf2 catch \cf4 (Exception e) \{\
                e.printStackTrace();\
            \}\
            \cf5 myReceiver \cf4 = \cf2 null\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 powerReceiver \cf4 != \cf2 null\cf4 ) \{\
            \cf2 try \cf4 \{\
                unregisterReceiver(\cf5 powerReceiver\cf4 );\
            \} \cf2 catch \cf4 (Exception e) \{\
                e.printStackTrace();\
            \}\
            \cf5 powerReceiver \cf4 = \cf2 null\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 wifiReceiver \cf4 != \cf2 null\cf4 ) \{\
            \cf2 try \cf4 \{\
                unregisterReceiver(\cf5 wifiReceiver\cf4 );\
            \} \cf2 catch \cf4 (Exception e) \{\
                e.printStackTrace();\
            \}\
            \cf5 wifiReceiver \cf4 = \cf2 null\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 handler \cf4 != \cf2 null\cf4 ) \{\
            \cf5 handler\cf4 .removeCallbacks(\cf5 updateTimeRunnable\cf4 );\
        \}\
        stopLocationService();\
        \cf2 if \cf4 (!isRecordingCamera() && !isStreaming()) \{\
            \cf2 try \cf4 \{\
                stopBgCamera();\
            \} \cf2 catch \cf4 (Exception e) \{\
                e.printStackTrace();\
            \}\
        \}\
\
        \cf2 if \cf4 (!isRecordingUSB() && !isStreaming()) \{\
            \cf2 try \cf4 \{\
                stopBgCameraUSB();\
            \} \cf2 catch \cf4 (Exception e) \{\
                e.printStackTrace();\
            \}\
        \}\
\
        \cf2 if \cf4 (!isWifiRecording() && !isWifiStreaming()) \{\
            stopWifiService();\
        \}\
\
        \cf2 if \cf4 (\cf5 wl \cf4 != \cf2 null\cf4 ) \{\
            \cf5 wl\cf4 .release();\
        \}\
        \cf2 if \cf4 (
\f1\i \cf5 instance 
\f0\i0 \cf4 != \cf2 null\cf4 ) \{\
            
\f1\i \cf5 instance 
\f0\i0 \cf4 = \cf2 null\cf4 ;\
        \}\
        getWindow().clearFlags(WindowManager.LayoutParams.
\f1\i \cf5 FLAG_KEEP_SCREEN_ON
\f0\i0 \cf4 );\
\
        \cf5 mCurrentFragment \cf4 = \cf2 null\cf4 ; \cf10 // Avoid holding references to fragments\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 if \cf4 (\cf5 isUsbServiceBound\cf4 ) \{\
                \cf2 try \cf4 \{\
                    unbindService(\cf5 mConnection\cf4 );\
                \} \cf2 catch \cf4 (RuntimeException e) \{\
                    e.printStackTrace();\
                \}\
                stopService(\cf2 new \cf4 Intent(\cf2 this\cf4 , BgUSBService.\cf2 class\cf4 ));\
                \cf5 mUSBService \cf4 = \cf2 null\cf4 ;\
                \cf5 isUsbServiceBound \cf4 = \cf2 false\cf4 ;\
                \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \}\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 if \cf4 (\cf5 isWifiServiceBound\cf4 ) \{\
                \cf2 try \cf4 \{\
                    unbindService(\cf5 mWifiConnection\cf4 );\
                \} \cf2 catch \cf4 (RuntimeException e) \{\
                    e.printStackTrace();\
                \}\
                stopService(\cf2 new \cf4 Intent(\cf2 this\cf4 , BgWifiService.\cf2 class\cf4 ));\
                \cf5 mWifiService \cf4 = \cf2 null\cf4 ;\
                \cf5 isWifiServiceBound \cf4 = \cf2 false\cf4 ;\
                \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \}\
        \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 if \cf4 (\cf5 isCamServiceBond\cf4 ) \{\
                \cf2 try \cf4 \{\
                    unbindService(\cf5 mConnection\cf4 );\
                \} \cf2 catch \cf4 (RuntimeException e) \{\
                    e.printStackTrace();\
                \}\
                stopService(\cf2 new \cf4 Intent(MainActivity.\cf2 this\cf4 , BgCameraService.\cf2 class\cf4 ));\
                \cf5 mCamService \cf4 = \cf2 null\cf4 ;\
                \cf5 isCamServiceBond \cf4 = \cf2 false\cf4 ;\
                \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \}\
        \cf2 if \cf4 (\cf5 mCastService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 if \cf4 (\cf5 isCastServiceBound\cf4 ) \{\
                \cf2 try \cf4 \{\
                    unbindService(\cf5 mCastConnection\cf4 );\
                \} \cf2 catch \cf4 (RuntimeException e) \{\
                    e.printStackTrace();\
                \}\
                stopService(\cf2 new \cf4 Intent(\cf2 this\cf4 , BgCastService.\cf2 class\cf4 ));\
                \cf5 mCastService\cf4 .stopScreenCast();\
                \cf5 mCastService \cf4 = \cf2 null\cf4 ;\
                \cf5 isCastServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \}\
\
        \cf2 if \cf4 (\cf5 mAudioService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 if \cf4 (\cf5 isAudioServiceBound\cf4 ) \{\
                \cf2 try \cf4 \{\
                    unbindService(\cf5 mAudioConnection\cf4 );\
                \} \cf2 catch \cf4 (RuntimeException e) \{\
                    e.printStackTrace();\
                \}\
                stopService(\cf2 new \cf4 Intent(\cf2 this\cf4 , BgAudioService.\cf2 class\cf4 ));\
                \cf5 mAudioService\cf4 .stopStreaming();\
                \cf5 mAudioService \cf4 = \cf2 null\cf4 ;\
                \cf5 isAudioServiceBound \cf4 = \cf2 false\cf4 ;\
            \}\
        \}\
        \cf2 if \cf4 (\cf5 mSurfaceTextureListener \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mSurfaceTextureListener\cf4 .onSurfaceTextureDestroyed(\cf2 null\cf4 );\
            \cf5 mSurfaceTextureListener \cf4 = \cf2 null\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 alertDialog \cf4 != \cf2 null \cf4 && \cf5 alertDialog\cf4 .isShowing()) \{\
            \cf5 alertDialog\cf4 .dismiss();\
            \cf5 alertDialog \cf4 = \cf2 null\cf4 ;\
        \}\
\
        \cf2 super\cf4 .onDestroy();\
    \}\
\
    \cf2 public void \cf9 myOnDestroy\cf4 () \{\
        onDestroy();\
    \}\
\
    \cf2 private boolean \cf9 isConnected\cf4 () \{\
        \cf2 final \cf4 ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.
\f1\i \cf5 CONNECTIVITY_SERVICE
\f0\i0 \cf4 );\
        \cf2 final \cf4 NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\
        \cf2 return \cf4 activeNetwork != \cf2 null \cf4 && activeNetwork.isConnected();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 onActivityResult\cf4 (\cf2 int \cf4 requestCode, \cf2 int \cf4 resultCode, Intent resultData) \{\
        \cf2 super\cf4 .onActivityResult(requestCode, resultCode, resultData);\
\
        \cf2 if \cf4 (resultCode == 
\f1\i \cf5 RESULT_CANCELED 
\f0\i0 \cf4 && requestCode == 
\f1\i \cf5 REQUEST_CODE_INTENT
\f0\i0 \cf4 ) \{\
            Log.
\f1\i e
\f0\i0 (\cf7 "MainActivity"\cf4 , \cf7 "User canceled selection."\cf4 );\
            \cf5 dlg_progress\cf4 .dismiss();\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (requestCode == 
\f1\i \cf5 REQUEST_CODE_INTENT 
\f0\i0 \cf4 && resultCode == 
\f1\i \cf5 RESULT_OK
\f0\i0 \cf4 ) \{\
            \cf2 int \cf4 selectedIndex = resultData.getIntExtra(\cf7 "selectedIndex"\cf4 , \cf8 0\cf4 );\
            \cf2 if \cf4 (\cf5 liveFragment \cf4 != \cf2 null\cf4 ) \{\
                \cf2 if \cf4 (\cf5 liveFragment\cf4 .\cf5 is_usb_opened\cf4 ) \{\
                    \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
                        \cf5 mUSBService\cf4 .selectedPositionForCameraList(selectedIndex);\
                    \} \cf2 else \cf4 \{\
                        startBgUSB();\
                    \}\
                \}\
            \}\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (requestCode == \cf5 REQUEST_MEDIA_PROJECTION\cf4 ) \{\
            \cf2 this\cf4 .\cf5 resultCode \cf4 = resultCode;\
            \cf2 this\cf4 .\cf5 resultData \cf4 = resultData;\
            \cf2 try \cf4 \{\
                startCastStreaming();\
            \} \cf2 catch \cf4 (Exception e) \{\
                \cf2 throw new \cf4 RuntimeException(e);\
            \}\
            \cf2 if \cf4 (resultCode == 
\f1\i \cf5 RESULT_OK 
\f0\i0 \cf4 && resultData != \cf2 null\cf4 ) \{\
                \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                        \cf6 @Override\
                        \cf2 public void \cf9 run\cf4 () \{\
                            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream_active
\f0\i0 \cf4 );\
                        \}\
                    \}, \cf8 300\cf4 );\
                \} \cf2 else \cf4 \{\
                    \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream_active
\f0\i0 \cf4 );\
                \}\
            \} \cf2 else \cf4 \{\
                \cf2 if \cf4 (\cf5 mHandler \cf4 != \cf2 null\cf4 ) \{\
                    \cf5 mHandler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                        \cf6 @Override\
                        \cf2 public void \cf9 run\cf4 () \{\
                            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                        \}\
                    \}, \cf8 300\cf4 );\
                \} \cf2 else \cf4 \{\
                    \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                \}\
            \}\
        \}\
\
        \cf2 if \cf4 (requestCode == 
\f1\i \cf5 REQUEST_CODE_PICK_FOLDER 
\f0\i0 \cf4 && resultCode == Activity.
\f1\i \cf5 RESULT_OK 
\f0\i0 \cf4 && resultData != \cf2 null\cf4 ) \{\
            \cf2 if \cf4 (resultData.getData() != \cf2 null\cf4 ) \{\
                Uri mSelectedFolderUri = resultData.getData();\
                AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 GALLERY_PATH
\f0\i0 \cf4 , mSelectedFolderUri.toString());\
                showSelectedStorage(mSelectedFolderUri);\
                \cf10 // Persist permissions across device reboots.\
                \cf2 final int \cf4 takeFlags = Intent.
\f1\i \cf5 FLAG_GRANT_READ_URI_PERMISSION 
\f0\i0 \cf4 & (Intent.
\f1\i \cf5 FLAG_GRANT_READ_URI_PERMISSION 
\f0\i0 \cf4 | Intent.
\f1\i \cf5 FLAG_GRANT_WRITE_URI_PERMISSION
\f0\i0 \cf4 );\
                \cf2 this\cf4 .getContentResolver().takePersistableUriPermission(mSelectedFolderUri, takeFlags);\
                \cf2 if \cf4 (\cf5 isSnapShot\cf4 ) \{\
                    \cf5 isSnapShot \cf4 = \cf2 false\cf4 ;\
                \} \cf2 else \cf4 \{\
                    \cf5 mHandler\cf4 .postDelayed(\cf2 this\cf4 ::startRecord, \cf8 500\cf4 );\
                \}\
            \}\
        \}\
\
        \cf2 if \cf4 (resultCode == 
\f1\i \cf5 RESULT_CANCELED
\f0\i0 \cf4 ) \{\
            Log.
\f1\i w
\f0\i0 (\cf7 "MainActivity"\cf4 , \cf7 "User canceled file selection."\cf4 );\
            \cf5 dlg_progress\cf4 .dismiss();\
            \cf2 return\cf4 ;\
        \}\
        \cf5 dlg_progress\cf4 .dismiss();\
    \}\
\
    \cf2 private void \cf9 showSelectedStorage\cf4 (Uri treeUri) \{\
        String uriString = treeUri.toString();\
        AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STORAGE_LOCATION
\f0\i0 \cf4 , uriString);\
\
        String docId = DocumentsContract.
\f1\i getTreeDocumentId
\f0\i0 (treeUri);\
        String[] split = docId.split(\cf7 "\cb11 :\cb3 "\cf4 );\
        String volumeId = split[\cf8 0\cf4 ]; \cf10 // This is "primary" for internal storage, or a UUID for external.\
\
        // Check if the storage is internal.\
        \cf2 if \cf4 (\cf7 "primary"\cf4 .equalsIgnoreCase(volumeId)) \{\
            AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_STORAGE_INTERNAL
\f0\i0 \cf4 , \cf7 "INTERNAL STORAGE"\cf4 );\
            AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 Storage_Type
\f0\i0 \cf4 , \cf7 "Storage Location: Phone Storage"\cf4 );\
        \} \cf2 else \cf4 \{\
            \cf10 // For non-primary storage, use StorageManager/StorageVolume.\
            \cf4 StorageManager storageManager = (StorageManager) \cf2 this\cf4 .getSystemService(Context.
\f1\i \cf5 STORAGE_SERVICE
\f0\i0 \cf4 );\
            \cf2 boolean \cf4 found = \cf2 false\cf4 ;\
            \cf2 if \cf4 (storageManager != \cf2 null\cf4 ) \{\
                List<StorageVolume> volumes = storageManager.getStorageVolumes();\
                \cf2 for \cf4 (StorageVolume volume : volumes) \{\
                    \cf10 // For non-primary volumes, volume.getUuid() should match the volumeId.\
                    \cf4 String uuid = volume.getUuid(); \cf10 // May be null for internal storage.\
                    \cf2 if \cf4 (uuid != \cf2 null \cf4 && uuid.equals(volumeId)) \{\
                        \cf10 // Use the volume description to guess the type.\
                        \cf4 String description = volume.getDescription(\cf2 this\cf4 );\
                        \cf2 if \cf4 (description != \cf2 null\cf4 ) \{\
                            description = description.toLowerCase();\
                            \cf2 if \cf4 (description.contains(\cf7 "usb"\cf4 ) || description.contains(\cf7 "otg"\cf4 ) || description.contains(\cf7 "mass storage"\cf4 )) \{\
                                AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_STORAGE_EXTERNAL
\f0\i0 \cf4 , \cf7 "EXTERNAL"\cf4 );\
                                AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 Storage_Type
\f0\i0 \cf4 , \cf7 "Storage Location: USB Storage"\cf4 );\
                                found = \cf2 true\cf4 ;\
                                \cf2 break\cf4 ;\
                            \} \cf2 else if \cf4 (description.contains(\cf7 "sd"\cf4 )) \{\
                                AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_STORAGE_SDCARD
\f0\i0 \cf4 , \cf7 "SDCARD"\cf4 );\
                                AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 Storage_Type
\f0\i0 \cf4 , \cf7 "Storage Location: SDCARD Storage"\cf4 );\
                                found = \cf2 true\cf4 ;\
                                \cf2 break\cf4 ;\
                            \}\
                        \}\
                    \}\
                \}\
            \} \cf2 else \cf4 \{\
                AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_STORAGE_EXTERNAL
\f0\i0 \cf4 , \cf7 "EXTERNAL"\cf4 );\
                AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 Storage_Type
\f0\i0 \cf4 , \cf7 "Storage Location: External Storage"\cf4 );\
            \}\
        \}\
        notifyFragments(uriString);\
    \}\
\
    \cf2 public void \cf9 startCastStreaming\cf4 () \cf2 throws \cf4 Exception \{\
        \cf2 if \cf4 (ContextCompat.
\f1\i checkSelfPermission
\f0\i0 (\cf2 this\cf4 , 
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 ) != 
\f1\i \cf5 PERMISSION_GRANTED
\f0\i0 \cf4 ) \{\
            ActivityCompat.
\f1\i requestPermissions
\f0\i0 (\cf2 this\cf4 , \cf2 new \cf4 String[]\{
\f1\i \cf5 RECORD_AUDIO
\f0\i0 \cf4 \}, \cf8 2001\cf4 );\
        \}\
        \cf10 //     getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\
        \cf2 if \cf4 (\cf5 resultData \cf4 == \cf2 null\cf4 ) \{\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 mCastService \cf4 == \cf2 null \cf4 || !\cf5 mCastService\cf4 .isRunningForeground()) \{\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
            MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 service_not_ready
\f0\i0 \cf4 );\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (\cf5 resultCode \cf4 != Activity.
\f1\i \cf5 RESULT_OK
\f0\i0 \cf4 ) \{\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
            MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 projection_cancelled
\f0\i0 \cf4 );\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (!isConnected()) \{\
            MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 not_connected
\f0\i0 \cf4 );\
            \cf2 return\cf4 ;\
        \}\
        List<Connection> connections = SettingsUtils.
\f1\i connections
\f0\i0 ();\
        \cf2 if \cf4 (connections.isEmpty()) \{\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
            MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 wait_message
\f0\i0 \cf4 );\
            \cf5 handler\cf4 .postDelayed(\cf2 new \cf4 Runnable() \{\
                \cf6 @Override\
                \cf2 public void \cf9 run\cf4 () \{\
                    \cf5 liveFragment\cf4 .\cf5 ic_stream\cf4 .setImageResource(R.mipmap.
\f1\i \cf5 ic_stream
\f0\i0 \cf4 );\
                \}\
            \}, \cf8 100\cf4 );\
            \cf2 return\cf4 ;\
        \}\
\
        DisplayMetrics metrics = \cf2 new \cf4 DisplayMetrics();\
        getWindowManager().getDefaultDisplay().getMetrics(metrics);\
\
        \cf2 int \cf4 fps = (\cf2 int\cf4 ) SettingsUtils.
\f1\i fpsCast
\f0\i0 (\cf2 this\cf4 );\
\
        \cf2 final \cf4 VideoConfig videoConfig = \cf2 new \cf4 VideoConfig();\
        videoConfig.\cf5 videoSize \cf4 = getSize(metrics.\cf5 widthPixels\cf4 , metrics.\cf5 heightPixels\cf4 );\
        videoConfig.\cf5 fps \cf4 = SettingsUtils.
\f1\i fpsCast
\f0\i0 (\cf2 this\cf4 );\
        Log.
\f1\i e
\f0\i0 (\cf7 "VideoConfig"\cf4 , \cf7 "videoConfig.type = " \cf4 + videoConfig.\cf5 type\cf4 );\
\
        \cf2 final \cf4 AudioConfig audioConfig = \cf2 new \cf4 AudioConfig();\
        audioConfig.\cf5 bitRate \cf4 = SettingsUtils.
\f1\i optionAudioBitRate
\f0\i0 (\cf2 this\cf4 );\
        audioConfig.\cf5 sampleRate \cf4 = SettingsUtils.
\f1\i optionSampleRate
\f0\i0 (\cf2 this\cf4 );\
        audioConfig.\cf5 channelCount \cf4 = SettingsUtils.
\f1\i optionChannelCount
\f0\i0 (\cf2 this\cf4 );\cf10 //(SettingsUtils.optionChannelCount(this) == 0) ? AudioFormat.CHANNEL_IN_MONO : AudioFormat.CHANNEL_IN_STEREO;\
        \cf4 audioConfig.\cf5 audioSource \cf4 = SettingsUtils.
\f1\i optionAudioSource
\f0\i0 (\cf2 this\cf4 );\
        Log.
\f1\i e
\f0\i0 (\cf7 "AudioConfig"\cf4 , \cf7 "audioConfig.type = " \cf4 + audioConfig.\cf5 type\cf4 );\
\
        \cf2 int \cf4 audioSetting = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 AUDIO_OPTION_AUDIO_SETTING
\f0\i0 \cf4 , \cf8 0\cf4 );\
        \cf2 switch \cf4 (audioSetting) \{\
            \cf2 case \cf8 0\cf4 : \cf10 // No sound (Mute both Mic and Device audio)\
                \cf4 audioConfig.\cf5 bitRate \cf4 = \cf8 0\cf4 ;\
                audioConfig.\cf5 audioSource \cf4 = -\cf8 1\cf4 ; \cf10 // Invalid audio source to mute audio\
                \cf4 videoConfig.\cf5 bitRate \cf4 = SettingsUtils.
\f1\i castBitRate
\f0\i0 (\cf2 this\cf4 ); \cf10 // Enable normal video bitrate\
                \cf4 Log.
\f1\i e
\f0\i0 (\cf7 "AudioConfig"\cf4 , \cf7 "Mic and Phone media muted."\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 case \cf8 1\cf4 : \cf10 // Microphone only\
                \cf4 videoConfig.\cf5 bitRate \cf4 = SettingsUtils.
\f1\i castBitRate
\f0\i0 (\cf2 this\cf4 ); \cf10 // Enable normal video bitrate\
                \cf4 Log.
\f1\i e
\f0\i0 (\cf7 "AudioConfig"\cf4 , \cf7 "Mic audio enabled, phone media disabled."\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 case \cf8 2\cf4 : \cf10 // Device media only\
                \cf4 videoConfig.\cf5 bitRate \cf4 = SettingsUtils.
\f1\i castBitRate
\f0\i0 (\cf2 this\cf4 ); \cf10 // Enable normal video bitrate\
                \cf4 Log.
\f1\i e
\f0\i0 (\cf7 "AudioConfig"\cf4 , \cf7 "Phone media enabled, mic audio disabled."\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 case \cf8 3\cf4 : \cf10 // Both Microphone and Device audio\
                \cf4 videoConfig.\cf5 bitRate \cf4 = SettingsUtils.
\f1\i castBitRate
\f0\i0 (\cf2 this\cf4 ); \cf10 // Enable normal video bitrate\
                \cf4 videoConfig.\cf5 type \cf4 = SettingsUtils.
\f1\i videoType
\f0\i0 (\cf2 this\cf4 ); \cf10 // Enable additional video config if needed\
                \cf4 Log.
\f1\i e
\f0\i0 (\cf7 "AudioConfig"\cf4 , \cf7 "Both mic and media audio enabled."\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 case \cf8 4\cf4 : \cf10 // Both Microphone and Device audio\
                \cf4 videoConfig.\cf5 bitRate \cf4 = SettingsUtils.
\f1\i castBitRate
\f0\i0 (\cf2 this\cf4 ); \cf10 // Enable normal video bitrate\
                \cf4 videoConfig.\cf5 type \cf4 = SettingsUtils.
\f1\i videoType
\f0\i0 (\cf2 this\cf4 ); \cf10 // Enable additional video config if needed\
                \cf4 Log.
\f1\i e
\f0\i0 (\cf7 "AudioConfig"\cf4 , \cf7 "All mic and media and call audio enabled."\cf4 );\
                \cf2 break\cf4 ;\
\
            \cf2 default\cf4 : \cf10 // Fallback to Microphone if unexpected value\
                \cf4 audioConfig.\cf5 type \cf4 = AudioConfig.INPUT_TYPE.
\f1\i \cf5 MIC
\f0\i0 \cf4 ;\
                Log.
\f1\i e
\f0\i0 (\cf7 "AudioConfig"\cf4 , \cf7 "Fallback to mic audio."\cf4 );\
                \cf2 break\cf4 ;\
        \}\
\
        \cf2 if \cf4 (MediaFormat.
\f1\i \cf5 MIMETYPE_VIDEO_HEVC
\f0\i0 \cf4 .equals(videoConfig.\cf5 type\cf4 )) \{\
            \cf2 for \cf4 (Connection connection : connections) \{\
                \cf2 final \cf4 String scheme = Uri.
\f1\i parse
\f0\i0 (connection.\cf5 url\cf4 ).getScheme();\
                Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "startCastStreaming: " \cf4 + connection.\cf5 url\cf4 );\
                \cf2 if \cf4 (SettingsUtils.UriResult.
\f1\i isRtmp
\f0\i0 (scheme)) \{\
                    MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), String.
\f1\i format
\f0\i0 (getString(R.string.
\f1\i \cf5 hevc_over_rtmp_warning
\f0\i0 \cf4 ), connection.\cf5 name\cf4 ));\
                \}\
            \}\
        \}\
\
        \cf2 final \cf4 Streamer.MODE mode = SettingsUtils.
\f1\i isCastAudioAllowed
\f0\i0 () && audioSetting != \cf8 0 \cf4 ? Streamer.MODE.
\f1\i \cf5 AUDIO_VIDEO 
\f0\i0 \cf4 : Streamer.MODE.
\f1\i \cf5 VIDEO_ONLY
\f0\i0 \cf4 ;\
\
        \cf5 mCastService\cf4 .startScreenCast(\cf5 resultCode\cf4 , \cf5 resultData\cf4 , metrics.\cf5 densityDpi\cf4 , connections, audioConfig, videoConfig, mode, fps,\cf2 false\cf4 );\
\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        HashMap<String, Boolean> map = \cf2 new \cf4 HashMap<>();\
        map.put(\cf7 "streaming"\cf4 , \cf2 true\cf4 );\
        map.put(\cf7 "showing"\cf4 , \cf2 false\cf4 );\
        \cf5 sharedViewModel\cf4 .setScreenCastOpened(\cf2 true\cf4 );\
        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 UPDATE_DEVICE_STREAMING_DOUBLE_VAL
\f0\i0 \cf4 , map);\
        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 HANDEL_STREAM_VIEW_LIVE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
\
    \}\
\
    \cf2 public boolean \cf9 isStreaming\cf4 () \{\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 if \cf4 (\cf5 liveFragment \cf4 != \cf2 null\cf4 ) \{\
                \cf2 if \cf4 (\cf5 liveFragment\cf4 .\cf5 is_usb_opened\cf4 ) \{\
                    \cf2 return \cf5 mUSBService\cf4 .isStreaming();\
                \} \cf2 else if \cf4 (\cf5 mCastService \cf4 != \cf2 null\cf4 ) \{\
                    \cf2 return \cf5 mCastService\cf4 .isStreaming();\
                \} \cf2 else if \cf4 (\cf5 mAudioService \cf4 != \cf2 null\cf4 ) \{\
                    \cf2 return \cf5 mAudioService\cf4 .isStreaming();\
                \} \cf2 else if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
                    \cf2 return \cf5 mCamService\cf4 .isStreaming();\
                \} \cf2 else \cf4 \{\
                    \cf2 return false\cf4 ;\
                \}\
            \} \cf2 else if \cf4 (\cf5 mCastService \cf4 != \cf2 null\cf4 ) \{\
                \cf2 return \cf5 mCastService\cf4 .isStreaming();\
            \} \cf2 else if \cf4 (\cf5 mAudioService \cf4 != \cf2 null\cf4 ) \{\
                \cf2 return \cf5 mAudioService\cf4 .isStreaming();\
            \} \cf2 else if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
                \cf2 return \cf5 mCamService\cf4 .isStreaming();\
            \} \cf2 else \cf4 \{\
                \cf2 return false\cf4 ;\
            \}\
        \} \cf2 else if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 return \cf5 mCamService\cf4 .isStreaming();\
        \} \cf2 else if \cf4 (\cf5 mCastService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 return \cf5 mCastService\cf4 .isStreaming();\
        \} \cf2 else if \cf4 (\cf5 mAudioService \cf4 != \cf2 null\cf4 ) \{\
            \cf2 return \cf5 mAudioService\cf4 .isStreaming();\
        \} \cf2 else \cf4 \{\
            \cf2 return false\cf4 ;\
        \}\
    \}\
\
    \cf2 public int \cf9 deviceType\cf4 () \{\
        \cf2 if \cf4 (\cf5 liveFragment \cf4 != \cf2 null\cf4 ) \{\
            \cf2 if \cf4 (\cf5 liveFragment\cf4 .\cf5 is_usb_opened\cf4 ) \{\
                \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_USB
\f0\i0 \cf4 ;\
            \} \cf2 else if \cf4 (\cf5 liveFragment\cf4 .\cf5 is_cast_opened\cf4 ) \{\
                \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_SCREENCAST
\f0\i0 \cf4 ;\
            \} \cf2 else if \cf4 (\cf5 liveFragment\cf4 .\cf5 is_cast_opened \cf4 || \cf5 sharedViewModel\cf4 .isScreenCastOpened()) \{\
                \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_SCREENCAST
\f0\i0 \cf4 ;\
            \} \cf2 else \cf4 \{\
                \cf2 if \cf4 (\cf5 sharedViewModel\cf4 .isCameraOpened()) \{\
                    \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_ANDROID
\f0\i0 \cf4 ;\
                \} \cf2 else \cf4 \{\
                    \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_WIFI
\f0\i0 \cf4 ;\
                \}\
            \}\
        \} \cf2 else \cf4 \{\
            \cf2 if \cf4 (\cf5 sharedViewModel\cf4 .isCameraOpened()) \{\
                \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_ANDROID
\f0\i0 \cf4 ;\
            \} \cf2 else if \cf4 (\cf5 sharedViewModel\cf4 .isScreenCastOpened()) \{\
                \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_SCREENCAST
\f0\i0 \cf4 ;\
            \} \cf2 else if \cf4 (\cf5 sharedViewModel\cf4 .isUsbStreaming()) \{\
                \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_USB
\f0\i0 \cf4 ;\
            \} \cf2 else \cf4 \{\
                \cf2 return \cf4 AppConstant.
\f1\i \cf5 DEVICE_TYPE_WIFI
\f0\i0 \cf4 ;\
            \}\
        \}\
    \}\
\
    \cf2 public boolean \cf9 isRecordingCamera\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCamService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return false\cf4 ;\
        \}\
\
        \cf2 return \cf5 mCamService\cf4 .isRecording();\
    \}\
\
    \cf2 public boolean \cf9 isRecordingUSB\cf4 () \{\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return false\cf4 ;\
        \}\
        \cf2 return \cf5 mUSBService\cf4 .isRecording();\
    \}\
\
    \cf2 public boolean \cf9 isCastRecording\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCastService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return false\cf4 ;\
        \}\
        \cf2 return \cf5 mCastService\cf4 .isRecording();\
    \}\
\
    \cf2 public boolean \cf9 isAudioRecording\cf4 () \{\
        \cf2 if \cf4 (\cf5 mAudioService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return false\cf4 ;\
        \}\
        \cf2 return \cf5 mAudioService\cf4 .isRecording();\
    \}\
\
    \cf2 public boolean \cf9 isCastStreaming\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCastService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return false\cf4 ;\
        \}\
        \cf2 return \cf5 mCastService\cf4 .isStreaming();\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 startCastRecording\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCastService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        String storage_location = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STORAGE_LOCATION
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        \cf2 if \cf4 (storage_location.isEmpty() || storage_location.contains(\cf7 "/0/"\cf4 )) \{\
            openDirectory();\
            \cf2 return\cf4 ;\
        \}\
\
\
        \cf2 if \cf4 (\cf5 mCastService\cf4 .isStreaming()) \{\
            \cf2 if \cf4 (\cf5 mCastService\cf4 .isRecording()) \{\
                MessageDialog messageDialog = MessageDialog.
\f1\i show
\f0\i0 (getString(R.string.
\f1\i \cf5 confirmation_title
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 stop_recording
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 Okay
\f0\i0 \cf4 ), getString(R.string.
\f1\i \cf5 cancel
\f0\i0 \cf4 )).setCancelButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                    \cf6 @Override\
                    \cf2 public boolean \cf9 onClick\cf4 (MessageDialog dialog, View v) \{\
                        dialog.dismiss();\
                        \cf2 return false\cf4 ;\
                    \}\
                \}).setOkButton(\cf2 new \cf4 OnDialogButtonClickListener<MessageDialog>() \{\
                    \cf6 @Override\
                    \cf2 public boolean \cf9 onClick\cf4 (MessageDialog baseDialog, View v) \{\
                        \cf5 mCastService\cf4 .stopRecording(\cf2 false\cf4 );\
                        \cf2 return false\cf4 ;\
                    \}\
                \});\
                messageDialog.setOkTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
                messageDialog.setCancelTextInfo(\cf2 new \cf4 TextInfo().setFontColor(Color.
\f1\i parseColor
\f0\i0 (\cf7 "#000000"\cf4 )).setBold(\cf2 true\cf4 ));\
            \} \cf2 else \cf4 \{\
                \cf5 mCastService\cf4 .startRecording();\
            \}\
        \} \cf2 else \cf4 \{\
            Toast.
\f1\i makeText
\f0\i0 (\cf2 this\cf4 , \cf7 "Please start casting first"\cf4 , Toast.
\f1\i \cf5 LENGTH_SHORT
\f0\i0 \cf4 ).show();\
        \}\
    \}\
\
    \cf2 public void \cf9 startAudioRecord\cf4 () \{\
        \cf2 if \cf4 (\cf5 mAudioService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        String storage_location = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STORAGE_LOCATION
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        \cf2 if \cf4 (storage_location.isEmpty() || storage_location.contains(\cf7 "/0/"\cf4 )) \{\
            openDirectory();\
            \cf2 return\cf4 ;\
        \}\
\
        \cf2 if \cf4 (\cf5 mAudioService\cf4 .isRecording()) \{\
            \cf5 mAudioService\cf4 .stopRecording(\cf2 false\cf4 );\
        \} \cf2 else \cf4 \{\
            \cf5 mAudioService\cf4 .startRecording();\
        \}\
    \}\
\
    \cf2 public void \cf9 startRecord\cf4 () \{\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 == \cf2 null \cf4 && \cf5 mCamService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        String storage_location = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STORAGE_LOCATION
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        \cf2 if \cf4 (storage_location.isEmpty() || storage_location.contains(\cf7 "/0/"\cf4 )) \{\
            openDirectory();\
            \cf2 return\cf4 ;\
        \}\
        \cf2 boolean \cf4 isUsbCam = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 IS_USB_OPENED
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null \cf4 && !isUsbCam) \{\
            \cf2 boolean \cf4 isRecording = \cf5 mCamService\cf4 .startRecording();\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORDING_STARTED
\f0\i0 \cf4 , \cf2 true\cf4 );\
            \cf5 liveFragment\cf4 .\cf5 is_rec \cf4 = \cf2 true\cf4 ;\
            \cf5 liveFragment\cf4 .handleCameraView();\
            \cf2 if \cf4 (!isRecording) \{\
                \cf5 liveFragment\cf4 .\cf5 is_rec \cf4 = \cf2 false\cf4 ;\
                \cf5 liveFragment\cf4 .handleCameraView();\
                AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORDING_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \}\
        \}\
\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null \cf4 && isUsbCam) \{\
            Log.
\f1\i e
\f0\i0 (\cf5 TAG\cf4 , \cf7 "startRecord: 1"\cf4 );\
            \cf2 boolean \cf4 isRecording = \cf5 mUSBService\cf4 .startRecording();\
            \cf5 liveFragment\cf4 .\cf5 is_rec \cf4 = \cf2 true\cf4 ;\
            \cf5 liveFragment\cf4 .handleCameraView();\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORDING_STARTED
\f0\i0 \cf4 , \cf2 true\cf4 );\
            \cf2 if \cf4 (!isRecording) \{\
                \cf5 liveFragment\cf4 .\cf5 is_rec \cf4 = \cf2 false\cf4 ;\
                \cf5 liveFragment\cf4 .handleCameraView();\
                AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORDING_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \}\
        \}\
    \}\
\
    \cf2 public void \cf9 stopRecord\cf4 () \{\
        \cf2 boolean \cf4 recordOn = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 AUTO_RECORD
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 boolean \cf4 recordBroadcast = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORD_BROADCAST
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (recordBroadcast && !recordOn) \{\
            \cf5 liveFragment\cf4 .\cf5 is_rec \cf4 = \cf2 false\cf4 ;\
            \cf5 liveFragment\cf4 .handleCameraView();\
            AppPreference.
\f1\i setBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 RECORDING_STARTED
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \}\
        \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mCamService\cf4 .stopRecording(\cf2 false\cf4 );\
        \}\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mUSBService\cf4 .stopRecording(\cf2 false\cf4 );\
        \}\
    \}\
\
\
    \cf2 public boolean \cf9 isWifiRecording\cf4 () \{\
        \cf2 return \cf5 writeID \cf4 != -\cf8 1\cf4 ;\
    \}\
\
    \cf2 public void \cf9 startRecordStream\cf4 () \{\
        \cf2 if \cf4 (isWifiRecording()) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf5 should_write \cf4 = \cf2 true\cf4 ;\
        stopWifiStream();\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \cf5 dlg_progress\cf4 .show();\
        \cf2 new \cf4 Handler().postDelayed(() -> \{\
            \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            \cf5 dlg_progress\cf4 .dismiss();\
            loadWifiStream();\
        \}, \cf8 5000\cf4 );\
    \}\
\
    \cf2 public void \cf9 stopRecordStream\cf4 () \{\
        \cf2 if \cf4 (!isWifiRecording()) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf5 should_write \cf4 = \cf2 false\cf4 ;\
        stopWifiStream();\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \cf5 dlg_progress\cf4 .show();\
        \cf2 new \cf4 Handler().postDelayed(() -> \{\
            \cf5 is_dialog \cf4 = \cf2 false\cf4 ;\
            \cf5 dlg_progress\cf4 .dismiss();\
            loadWifiStream();\
        \}, \cf8 5000\cf4 );\
    \}\
\
    \cf2 public boolean \cf5 is_landscape \cf4 = \cf2 false\cf4 ;\
\
    \cf6 @Override\
    \cf2 public void \cf9 onConfigurationChanged\cf4 (\cf6 @NonNull \cf4 Configuration newConfig) \{\
        \cf2 super\cf4 .onConfigurationChanged(newConfig);\
\
        \cf2 int \cf4 orientation = newConfig.\cf5 orientation\cf4 ;\
        \cf2 if \cf4 (orientation == Configuration.
\f1\i \cf5 ORIENTATION_PORTRAIT
\f0\i0 \cf4 ) \{\
            \cf5 is_landscape \cf4 = \cf2 false\cf4 ;\
        \} \cf2 else if \cf4 (orientation == Configuration.
\f1\i \cf5 ORIENTATION_LANDSCAPE
\f0\i0 \cf4 ) \{\
            \cf5 is_landscape \cf4 = \cf2 true\cf4 ;\
        \} \cf2 else \cf4 \{\
            \cf5 is_landscape \cf4 = \cf2 false\cf4 ;\
        \}\
\
        \cf2 if \cf4 (LiveFragment.
\f1\i getInstance
\f0\i0 () != \cf2 null\cf4 ) \{\
            LiveFragment.
\f1\i getInstance
\f0\i0 ().rotateLayout();\
        \}\
\
        \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mCamService\cf4 .updateOverlay(\cf5 is_landscape\cf4 );\
        \}\
\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mUSBService\cf4 .updateOverlay(\cf5 is_landscape\cf4 );\
        \}\
        updatePreviewRatio();\
        \cf2 if \cf4 (StreamingFragment.
\f1\i \cf5 instance 
\f0\i0 \cf4 != \cf2 null \cf4 && isStreaming()) \{\
            StreamingFragment.
\f1\i \cf5 instance
\f0\i0 \cf4 .updateDeviceBattery();\
        \}\
    \}\
\
    \cf2 public void \cf9 lockOrientation\cf4 () \{\
        \cf2 boolean \cf4 is_lock = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 ORIENTATION_LOCK
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (is_lock) \{\
            \cf2 if \cf4 (\cf5 is_landscape\cf4 ) \{\
                setRequestedOrientation(ActivityInfo.
\f1\i \cf5 SCREEN_ORIENTATION_LANDSCAPE
\f0\i0 \cf4 );\
            \} \cf2 else \cf4 \{\
                setRequestedOrientation(ActivityInfo.
\f1\i \cf5 SCREEN_ORIENTATION_PORTRAIT
\f0\i0 \cf4 );\
            \}\
        \} \cf2 else \cf4 \{\
            setRequestedOrientation(ActivityInfo.
\f1\i \cf5 SCREEN_ORIENTATION_UNSPECIFIED
\f0\i0 \cf4 );\
        \}\
    \}\
\
\
    \cf2 public void \cf9 stopRecordingTime\cf4 () \{\
        \cf5 txt_record\cf4 .setVisibility(View.
\f1\i \cf5 GONE
\f0\i0 \cf4 );\
    \}\
\
    \cf10 // update times\
    \cf2 public void \cf9 updateRecordingTime\cf4 (\cf2 int \cf4 seconds) \{\
        \cf5 txt_record\cf4 .setText(CommonUtil.
\f1\i secondsToHHMMSS
\f0\i0 (seconds));\
        \cf5 txt_record\cf4 .setVisibility(View.
\f1\i \cf5 GONE
\f0\i0 \cf4 );\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 onCameraStatusChange\cf4 (BgCameraService.BgCameraNotification.NOTIFICATION_STATUS status, String data) \{\
        updateControls(status);\
        \cf2 if \cf4 (status == BgCameraService.BgCameraNotification.NOTIFICATION_STATUS.
\f1\i \cf5 CAMERA_OPENED
\f0\i0 \cf4 ) \{\
            TextureView textureView = \cf5 sharedViewModel\cf4 .getTextureView();\
            SurfaceTexture surfaceTexture = textureView.getSurfaceTexture();\
            \cf2 int \cf4 w = textureView.getWidth();\
            \cf2 int \cf4 h = textureView.getHeight();\
            \cf2 if \cf4 (\cf5 mCamService \cf4 != \cf2 null\cf4 ) \cf5 mCamService\cf4 .setPreviewSurface(surfaceTexture, w, h);\
        \}\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 onCameraStatusChangeUSB\cf4 (BgUSBService.BgCameraNotification.NOTIFICATION_STATUS status, String data) \{\
        updateControls(status);\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 stopBgCameraUSB\cf4 () \{\
        \cf2 if \cf4 (\cf5 mUSBService \cf4 != \cf2 null\cf4 ) \{\
            stopUSBService();\
        \}\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 stopBgCamera\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCamService \cf4 == \cf2 null\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        runOnUiThread(\cf2 this\cf4 ::stopCameraIntent);\
    \}\
\
    \cf2 public void \cf9 stopBgCast\cf4 () \{\
        \cf2 if \cf4 (\cf5 mCastService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mCastService\cf4 .stopScreenCast();\
            \cf2 if \cf4 (\cf5 isCastServiceBound\cf4 ) \{\
                runOnUiThread(\cf2 this\cf4 ::stopCastIntent);\
            \}\
        \}\
    \}\
\
    \cf2 public void \cf9 licensesFull\cf4 () \{\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        AlertDialog.Builder aboutDialog = \cf2 new \cf4 AlertDialog.Builder(\cf2 this\cf4 ).setTitle(R.string.
\f1\i \cf5 warning
\f0\i0 \cf4 ).setMessage(R.string.
\f1\i \cf5 license_exceed_mgs
\f0\i0 \cf4 ).setPositiveButton(android.R.string.
\f1\i \cf5 ok
\f0\i0 \cf4 , \cf2 null\cf4 ).setCancelable(\cf2 true\cf4 ).setOnDismissListener(dialog -> \cf5 is_dialog \cf4 = \cf2 false\cf4 );\
        aboutDialog.show();\
    \}\
\
    \cf2 public void \cf9 updateMenu\cf4 (\cf2 boolean \cf4 is_updated) \{\
        \cf2 if \cf4 (is_updated) \{\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 INIT_CAM_SPINNER_LIVE
\f0\i0 \cf4 , \cf7 "initCameraSpinner"\cf4 );\
        \} \cf2 else \cf4 \{\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 NOTIFY_CAM_SPINNER_LIVE
\f0\i0 \cf4 , \cf7 "initCameraSpinner"\cf4 );\
        \}\
    \}\
\
    \cf2 protected void \cf9 OpenLog\cf4 () \{\
        File directory = \cf2 new \cf4 File(Environment.
\f1\i getExternalStorageDirectory
\f0\i0 () + File.
\f1\i \cf5 separator 
\f0\i0 \cf4 + \cf7 "TVServerLog"\cf4 );\
        \cf2 boolean \cf4 res;\
        \cf2 if \cf4 (!directory.exists()) \{\
            \cf2 if \cf4 (!directory.mkdirs()) \{\
                Log.
\f1\i e
\f0\i0 (\cf7 "TravellerLog :: "\cf4 , \cf7 "Problem creating Image folder"\cf4 );\
            \}\
        \}\
        openLog(directory.getPath());\
    \}\
\
    \cf2 public void \cf9 SetNetworks\cf4 () \{\
        \cf2 final \cf4 ConnectivityManager connection_manager = (ConnectivityManager) getSystemService(Context.
\f1\i \cf5 CONNECTIVITY_SERVICE
\f0\i0 \cf4 );\
        Network ss[] = connection_manager.getAllNetworks();\
        String[] networks = \cf2 new \cf4 String[ss.\cf5 length\cf4 ];\
        \cf2 for \cf4 (\cf2 int \cf4 i = \cf8 0\cf4 ; i < ss.\cf5 length\cf4 ; ++i) \{\
            LinkProperties netInfo = connection_manager.getLinkProperties(ss[i]);\
            String name = netInfo.getInterfaceName();\
            \cf2 if \cf4 (TextUtils.
\f1\i isEmpty
\f0\i0 (name)) \{\
                name = \cf7 "Unknown"\cf4 ;\
            \}\
            networks[i] = name;\
        \}\
        \cf2 long \cf4 firstl = \cf8 0\cf4 ; \cf10 //= ss[0].getNetworkHandle();\
        \cf2 long \cf4 secondl = \cf8 0\cf4 ; \cf10 //= ss[1].getNetworkHandle();\
        \cf2 for \cf4 (\cf2 int \cf4 i = \cf8 0\cf4 ; i < networks.\cf5 length\cf4 ; ++i) \{\
            \cf2 if \cf4 (\cf5 mCamera\cf4 .\cf5 wifi_in\cf4 .equals(networks[i])) \{\
                secondl = ss[i].getNetworkHandle();\
                writeLog(\cf7 "input interface found"\cf4 , \cf8 1\cf4 , \cf8 2\cf4 );\
            \}\
            \cf2 if \cf4 (\cf5 mCamera\cf4 .\cf5 wifi_out\cf4 .equals(networks[i])) \{\
                firstl = ss[i].getNetworkHandle();\
                writeLog(\cf7 "out interface found"\cf4 , \cf8 1\cf4 , \cf8 2\cf4 );\
            \}\
        \}\
        writeLog(String.
\f1\i format
\f0\i0 (\cf7 "set networks in %d out %d"\cf4 , firstl, secondl), \cf8 1\cf4 , \cf8 2\cf4 );\
        setNetworks(firstl, secondl);\
    \}\
\
    \cf2 public boolean \cf9 isUSBOpened\cf4 () \{\
        \cf2 if \cf4 (\cf5 liveFragment \cf4 != \cf2 null\cf4 ) \{\
            \cf2 return \cf5 liveFragment\cf4 .\cf5 is_usb_opened\cf4 ;\
        \}\
        \cf2 return false\cf4 ;\
    \}\
\
\
    \cf2 public \cf4 List<String> \cf9 getUSBCameraResolutions\cf4 () \{\
        \cf2 return \cf5 resolutions\cf4 ;\
    \}\
\
    \cf2 public void \cf9 saveUSBCameraResolutions\cf4 () \{\
        \cf5 resolutions \cf4 = \cf5 sharedViewModel\cf4 .getCameraResolution();\
    \}\
\
    \cf2 public boolean \cf9 isPlayingWifi\cf4 () \{\
        \cf2 return \cf5 sourceID \cf4 != -\cf8 1\cf4 ;\
    \}\
\
    \cf2 public void \cf9 setWifiInformation\cf4 (String wifi_in, String wifi_out) \{\
        HashMap<String, String> map = \cf2 new \cf4 HashMap<>();\
        map.put(\cf7 "wifi_in"\cf4 , wifi_in);\
        map.put(\cf7 "wifi_out"\cf4 , wifi_out);\
        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 SET_WIFI_INFORMATION_LIVE
\f0\i0 \cf4 , map);\
    \}\
\
    \cf2 public void \cf9 setWifiCamera\cf4 (Camera camera) \{\
        \cf5 mCamera \cf4 = camera;\
        reloadCamera();\
    \}\
\
    \cf2 public void \cf9 prepareWifiCamera\cf4 (Camera camera) \{\
        \cf5 mCamera \cf4 = camera;\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 != \cf2 null \cf4 && isPlayingWifi()) \{\
            \cf5 mWifiService\cf4 .playStreaming(\cf5 mCamera\cf4 );\
        \}\
    \}\
\
    \cf2 boolean \cf5 ping_success \cf4 = \cf2 false\cf4 ;\
\
    \cf2 void \cf9 pingWifiServer\cf4 (String url) \{\
        \cf5 ping_success \cf4 = \cf2 false\cf4 ;\
        Pinger pinger = \cf2 new \cf4 Pinger();\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 != \cf2 null \cf4 && \cf5 mCamera\cf4 .\cf5 camera_wifi_type \cf4 == AppConstant.
\f1\i \cf5 WIFI_TYPE_LAWMATE
\f0\i0 \cf4 ) \{\
            \cf5 mWifiService\cf4 .startAPICalling();\
        \}\
        \cf5 dlg_progress\cf4 .show();\
        pinger.setOnPingListener(\cf2 new \cf4 Pinger.OnPingListener() \{\
            \cf6 @Override\
            \cf2 public void \cf9 OnStart\cf4 (\cf6 @NonNull \cf4 PingInfo pingInfo) \{\
                Log.
\f1\i i
\f0\i0 (\cf7 "PING"\cf4 , String.
\f1\i format
\f0\i0 (\cf7 "Pinging %s [%s]"\cf4 , pingInfo.\cf5 ReverseDns\cf4 , pingInfo.\cf5 RemoteIp\cf4 ));\
                runOnUiThread(() -> MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Pinging start"\cf4 ));\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 OnStop\cf4 (\cf6 @NonNull \cf4 PingInfo pingInfo) \{\
                Log.
\f1\i i
\f0\i0 (\cf7 "PING"\cf4 , \cf7 "Ping complete"\cf4 );\
                runOnUiThread(() -> \cf5 dlg_progress\cf4 .hide());\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 OnSendError\cf4 (\cf6 @NonNull \cf4 PingInfo pingInfo, \cf2 int \cf4 sequence) \{\
                \cf2 if \cf4 (sequence >= \cf8 10\cf4 ) \{\
                    \cf5 ping_success \cf4 = \cf2 false\cf4 ;\
                    runOnUiThread(() -> MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Pinging error"\cf4 ));\
                    pingInfo.\cf5 Pinger\cf4 .Stop(pingInfo.\cf5 PingId\cf4 );\
                \}\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 OnReplyReceived\cf4 (\cf6 @NonNull \cf4 PingInfo pingInfo, \cf2 int \cf4 sequence, \cf2 int \cf4 timeMs) \{\
                Log.
\f1\i i
\f0\i0 (\cf7 "PING"\cf4 , String.
\f1\i format
\f0\i0 (\cf7 "#%d: Reply from %s: bytes=%d time=%d TTL=%d"\cf4 , sequence, pingInfo.\cf5 RemoteIp\cf4 , pingInfo.\cf5 Size\cf4 , timeMs, pingInfo.\cf5 Ttl\cf4 ));\
                \cf2 if \cf4 (sequence >= \cf8 5\cf4 ) \{\
                    pingInfo.\cf5 Pinger\cf4 .Stop(pingInfo.\cf5 PingId\cf4 );\
                    \cf5 ping_success \cf4 = \cf2 true\cf4 ;\
                    runOnUiThread(() -> MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Ping Success"\cf4 ));\
                    loadWifiStream();\
                \}\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 OnTimeout\cf4 (\cf6 @NonNull \cf4 PingInfo pingInfo, \cf2 int \cf4 sequence) \{\
                Log.
\f1\i i
\f0\i0 (\cf7 "PING"\cf4 , String.
\f1\i format
\f0\i0 (\cf7 "#%d: Timeout!"\cf4 , sequence));\
                \cf2 if \cf4 (sequence >= \cf8 10\cf4 ) \{\
                    pingInfo.\cf5 Pinger\cf4 .Stop(pingInfo.\cf5 PingId\cf4 );\
                    \cf5 ping_success \cf4 = \cf2 false\cf4 ;\
                    runOnUiThread(() -> MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Ping failure: Not accessible"\cf4 ));\
                \}\
            \}\
\
            \cf6 @Override\
            \cf2 public void \cf9 OnException\cf4 (\cf6 @NonNull \cf4 PingInfo pingInfo, \cf6 @NonNull \cf4 Exception e, \cf2 boolean \cf4 isFatal) \{\
                \cf5 ping_success \cf4 = \cf2 false\cf4 ;\
                pingInfo.\cf5 Pinger\cf4 .Stop(pingInfo.\cf5 PingId\cf4 );\
                runOnUiThread(() -> \{\
                    \cf5 dlg_progress\cf4 .hide();\
                    runOnUiThread(() -> MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Ping failure: Not accessible"\cf4 ));\
                \});\
            \}\
        \});\
        \cf2 switch \cf4 (\cf5 mCamera\cf4 .\cf5 camera_wifi_type\cf4 ) \{\
            \cf2 case \cf4 AppConstant.
\f1\i \cf5 WIFI_TYPE_LAWMATE
\f0\i0 \cf4 :\
                pinger.Ping(\cf7 "192.168.1.254"\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 case \cf4 AppConstant.
\f1\i \cf5 WIFI_TYPE_VCS
\f0\i0 \cf4 :\
                pinger.Ping(\cf7 "192.168.60.1"\cf4 );\
                \cf2 break\cf4 ;\
            \cf2 default\cf4 :\
                pinger.Ping(CommonUtil.
\f1\i getDomainIP
\f0\i0 (url));\
        \}\
    \}\
\
    \cf2 void \cf9 loadWifiStream\cf4 () \{\
        \cf2 boolean \cf4 should_transcode = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_APPLY_SETTINGS
\f0\i0 \cf4 , \cf2 false\cf4 );\
        \cf2 if \cf4 (should_transcode) \{\
            \cf5 pushOpt \cf4 = \cf2 new \cf4 EncOpt();\
            \cf5 writeOpt \cf4 = \cf2 new \cf4 EncOpt();\
            \cf5 textOpt \cf4 = \cf2 new \cf4 TextOverlayOption();\
            \cf5 pushOpt\cf4 .\cf5 bitrate \cf4 = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BITRATE
\f0\i0 \cf4 , \cf8 200000\cf4 );\
            \cf2 if \cf4 (\cf5 pushOpt\cf4 .\cf5 bitrate \cf4 <= \cf8 0\cf4 ) \cf5 pushOpt\cf4 .\cf5 bitrate \cf4 = -\cf8 1\cf4 ;\
            \cf5 pushOpt\cf4 .\cf5 width \cf4 = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_WIDTH
\f0\i0 \cf4 , \cf8 640\cf4 );\
            \cf2 if \cf4 (\cf5 pushOpt\cf4 .\cf5 width \cf4 <= \cf8 0\cf4 ) \{\
                \cf5 pushOpt\cf4 .\cf5 width \cf4 = -\cf8 1\cf4 ;\
            \}\
            \cf5 pushOpt\cf4 .\cf5 height \cf4 = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_HEIGHT
\f0\i0 \cf4 , \cf8 360\cf4 );\
            \cf2 if \cf4 (\cf5 pushOpt\cf4 .\cf5 height \cf4 <= \cf8 0\cf4 ) \{\
                \cf5 pushOpt\cf4 .\cf5 height \cf4 = -\cf8 1\cf4 ;\
            \}\
            \cf5 pushOpt\cf4 .\cf5 framerate \cf4 = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_FRAMERATE
\f0\i0 \cf4 , \cf8 15\cf4 );\
            \cf2 if \cf4 (\cf5 pushOpt\cf4 .\cf5 framerate \cf4 <= \cf8 0\cf4 ) \cf5 pushOpt\cf4 .\cf5 framerate \cf4 = -\cf8 1\cf4 ;\
            \cf5 pushOpt\cf4 .\cf5 codecName \cf4 = \cf7 "h264"\cf4 ;\
            \cf5 pushOpt\cf4 .\cf5 disableAudio \cf4 = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_AUDIO_PUSH
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf5 writeOpt\cf4 .\cf5 disableAudio \cf4 = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_AUDIO_MP4
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf5 pushOpt\cf4 .\cf5 useMic \cf4 = AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BOX_USE_MIC
\f0\i0 \cf4 , \cf2 false\cf4 );\
            \cf2 if \cf4 (AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_OVERLAY
\f0\i0 \cf4 , \cf2 false\cf4 )) \{\
                String overlayText = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BOX_FORMAT
\f0\i0 \cf4 , \cf7 "'%\{localtime\cf2 \\\\\cf7 :\}%X'"\cf4 );\
                \cf2 if \cf4 (!TextUtils.
\f1\i isEmpty
\f0\i0 (overlayText)) \{\
                    \cf5 textOpt\cf4 .\cf5 overlayText \cf4 = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BOX_FORMAT
\f0\i0 \cf4 , \cf7 "'%\{localtime\cf2 \\\\\cf7 :\}%X'"\cf4 );\
                    \cf5 textOpt\cf4 .\cf5 x0 \cf4 = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BOX_X0
\f0\i0 \cf4 , \cf8 0\cf4 );\
                    \cf5 textOpt\cf4 .\cf5 y0 \cf4 = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BOX_Y0
\f0\i0 \cf4 , \cf8 0\cf4 );\
                    \cf5 textOpt\cf4 .\cf5 fontSize \cf4 = AppPreference.
\f1\i getInt
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BOX_FONT_SIZE
\f0\i0 \cf4 , \cf8 28\cf4 );\
                    \cf5 textOpt\cf4 .\cf5 fontColor \cf4 = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRNAS_BOX_FONT_COLOR
\f0\i0 \cf4 , \cf7 "white"\cf4 );\
                    \cf5 textOpt\cf4 .\cf5 fontPath \cf4 = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRNAS_BOX_FONT
\f0\i0 \cf4 , \cf7 "/storage/emulated/0/Fonts/arial.ttf"\cf4 );\
                    \cf2 if \cf4 (AppPreference.
\f1\i getBool
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BOX_ENABLE
\f0\i0 \cf4 , \cf2 false\cf4 )) \{\
                        \cf5 textOpt\cf4 .\cf5 bUseBox \cf4 = \cf8 1\cf4 ;\
                        \cf5 textOpt\cf4 .\cf5 boxColor \cf4 = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 TRANS_BOX_COLOR
\f0\i0 \cf4 , \cf7 ""\cf4 );\
                    \}\
                    \cf5 textOpt\cf4 .\cf5 bUseOverlay \cf4 = \cf8 1\cf4 ;\
                \} \cf2 else \cf4 \{\
                    \cf5 textOpt\cf4 .\cf5 bUseOverlay \cf4 = \cf8 0\cf4 ;\
                \}\
            \}\
        \}\
\
        \cf5 readThread \cf4 = \cf2 new \cf4 Thread(() -> \{\
            \cf2 int \cf4 proto = \cf8 1\cf4 ; \cf10 // UDP\
            \cf2 if \cf4 (BuildConfig.
\f1\i \cf5 DEBUG
\f0\i0 \cf4 ) \{\
                \cf5 url\cf4 .set(\cf7 "rtsp://76.239.142.89:7099/0"\cf4 );\
                \cf5 push_url\cf4 .set(\cf7 "rtsp://41.216.179.31:8554/jorge"\cf4 );\
            \} \cf2 else \cf4 \{\
                proto = \cf5 mCamera\cf4 .\cf5 rtsp_type\cf4 ;\
            \}\
\
            \cf5 sourceID \cf4 = AddSource(\cf5 url\cf4 .get(), proto);\
            \cf2 if \cf4 (\cf5 should_push\cf4 ) \{\
                \cf5 pushID \cf4 = AddDepOut(\cf5 sourceID\cf4 , \cf5 push_url\cf4 .get(), \cf8 1\cf4 , \cf7 ""\cf4 , -\cf8 1\cf4 );\
                \cf2 if \cf4 (\cf5 should_transcode \cf4 && \cf5 pushOpt\cf4 .checkMod()) \{\
                    SetEncoderOpt(\cf5 pushID\cf4 , \cf5 pushOpt\cf4 );\
                \}\
                \cf2 if \cf4 (\cf5 pushID \cf4 > -\cf8 1\cf4 ) \{\
                    wifistreamingStarted();\
                \} \cf2 else \cf4 \{\
                    runOnUiThread(() -> \{\
                        MessageUtil.
\f1\i showToast
\f0\i0 (
\f1\i \cf5 instance
\f0\i0 \cf4 , \cf7 "Failed to start streaming"\cf4 );\
                        \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 IC_STREAM_LIVE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
                    \});\
                \}\
            \} \cf2 else \cf4 \{\
                \cf5 pushID \cf4 = -\cf8 1\cf4 ;\
                runOnUiThread(() -> \{\
                    \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 IC_STREAM_LIVE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
                \});\
            \}\
            \cf2 if \cf4 (\cf5 should_transcode \cf4 && \cf5 textOpt\cf4 .\cf5 bUseOverlay \cf4 != \cf8 0\cf4 ) \{\
                addOverlayToOut(\cf5 textOpt\cf4 , \cf5 pushID\cf4 );\
            \}\
\
            \cf2 if \cf4 (\cf5 should_write\cf4 ) \{\
                String mp4Path = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 VIDEO_PATH
\f0\i0 \cf4 , ResourceUtil.
\f1\i getRecordPath
\f0\i0 ());\
                File file = ResourceUtil.
\f1\i newMp4File
\f0\i0 ();\
                \cf2 int \cf4 mRestartRecordInterval = SettingsUtils.
\f1\i recordIntervalMin
\f0\i0 (\cf2 this\cf4 );\
                \cf2 if \cf4 (mRestartRecordInterval > \cf8 0\cf4 ) \{\
                    file = ResourceUtil.
\f1\i newMp4Folder
\f0\i0 ();\
                \}\
                \cf2 if \cf4 (file != \cf2 null\cf4 ) \{\
                    mp4Path = file.getPath();\
                \}\
                String timeStamp = \cf2 new \cf4 SimpleDateFormat(\cf7 "yyyyMMdd_HHmmss'.mp4'"\cf4 , Locale.
\f1\i \cf5 US
\f0\i0 \cf4 ).format(\cf2 new \cf4 Date());\
                mp4Path = mp4Path + \cf7 "/" \cf4 + timeStamp + \cf7 ".mp4"\cf4 ;\
                \cf2 if \cf4 (\cf5 should_transcode \cf4 && \cf5 textOpt\cf4 .\cf5 bUseOverlay \cf4 != \cf8 0\cf4 ) \{\
                    \cf5 writeID \cf4 = AddDepOut(\cf5 sourceID\cf4 , mp4Path, -\cf8 1\cf4 , \cf7 "60"\cf4 , \cf5 pushID\cf4 );\
                \} \cf2 else \cf4 \{\
                    \cf5 writeID \cf4 = AddDepOut(\cf5 sourceID\cf4 , mp4Path, -\cf8 1\cf4 , \cf7 "60"\cf4 , -\cf8 1\cf4 );\
                \}\
                \cf2 if \cf4 (\cf5 should_transcode\cf4 ) \{\
                    \cf2 if \cf4 (\cf5 pushID \cf4 == -\cf8 1 \cf4 && \cf5 pushOpt\cf4 .checkMod()) \{\
                        \cf5 pushOpt\cf4 .\cf5 disableAudio \cf4 = \cf5 writeOpt\cf4 .\cf5 disableAudio\cf4 ;\
                        SetEncoderOpt(\cf5 writeID\cf4 , \cf5 writeOpt\cf4 );\
                    \} \cf2 else if \cf4 (\cf5 writeOpt\cf4 .checkMod()) \{\
                        SetEncoderOpt(\cf5 writeID\cf4 , \cf5 writeOpt\cf4 );\
                    \}\
                \}\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 HANDLE_CAMERA_VIEW_LIVE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
            \}\
            \cf2 if \cf4 (\cf5 should_transcode \cf4 && \cf5 pushID \cf4 == -\cf8 1 \cf4 && \cf5 writeID \cf4 == -\cf8 1 \cf4 && \cf5 pushOpt\cf4 .checkMod()) \{\
                SetEncoderOpt(-\cf8 1\cf4 , \cf5 pushOpt\cf4 );\
            \}\
\
            \cf2 int \cf4 glPlayer = -\cf8 1\cf4 ;\
            \cf2 try \cf4 \{\
                glPlayer = AddGLPlayer(\cf5 sourceID\cf4 );\
                \cf2 if \cf4 (glPlayer != -\cf8 1 \cf4 && \cf5 should_transcode\cf4 ) \{\
                    \cf2 if \cf4 (((\cf5 pushID \cf4 != -\cf8 1 \cf4 && \cf5 pushOpt\cf4 .\cf5 disableAudio\cf4 ) || (\cf5 pushID \cf4 == -\cf8 1 \cf4 && \cf5 writeOpt\cf4 .\cf5 disableAudio \cf4 && \cf5 writeID \cf4 != -\cf8 1\cf4 ))) \{\
                        GlPlayerDisableAudio(glPlayer);\
                    \}\
                \}\
            \} \cf2 catch \cf4 (Exception e) \{\
                e.printStackTrace();\
            \}\
            \cf2 if \cf4 (\cf5 should_transcode \cf4 && \cf5 pushOpt\cf4 .\cf5 useMic\cf4 ) \{\
                SetMicMode(\cf5 sourceID\cf4 );\
            \}\
\
            \cf5 playThread \cf4 = \cf2 new \cf4 Thread(() -> PullVideo(\cf5 sourceID\cf4 ));\
            \cf5 playThread\cf4 .start();\
            \cf2 if \cf4 (\cf5 sourceID \cf4 > -\cf8 1\cf4 ) \{\
                StartSource(\cf5 sourceID\cf4 );\
            \}\
            \cf2 if \cf4 (\cf5 playThread \cf4 != \cf2 null\cf4 ) \{\
                \cf2 try \cf4 \{\
                    \cf5 playThread\cf4 .join();\
                \} \cf2 catch \cf4 (InterruptedException e) \{\
                    writeLog(\cf7 "error in play thread " \cf4 + e.getMessage(), \cf8 1\cf4 , \cf8 3\cf4 );\
                    \cf2 return\cf4 ;\
                \}\
                \cf5 playThread \cf4 = \cf2 null\cf4 ;\
            \}\
        \});\
        \cf5 readThread\cf4 .start();\
        bindCurrentWifi();\
    \}\
\
    \cf2 public void \cf9 playStream\cf4 (Camera camera) \{\
        \cf5 mCamera \cf4 = camera;\
        \cf2 if \cf4 (camera == \cf2 null \cf4 || TextUtils.
\f1\i isEmpty
\f0\i0 (camera.getFormattedURL())) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf2 if \cf4 (!AppConstant.
\f1\i \cf5 is_library_use
\f0\i0 \cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        setCallbacks();\
        \cf2 try \cf4 \{\
            setWifiInformation(camera.\cf5 wifi_in\cf4 , camera.\cf5 wifi_out\cf4 );\
            SetNetworks();\
        \} \cf2 catch \cf4 (Exception e) \{\
            e.printStackTrace();\
        \}\
        \cf5 url \cf4 = \cf2 new \cf4 AtomicReference<>(camera.getFormattedURL());\
        String out_url = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_BASE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        String username = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_USERNAME
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        String password = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_PASSWORD
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        String channel = AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STREAM_CHANNEL
\f0\i0 \cf4 , \cf7 ""\cf4 );\
        \cf5 push_url \cf4 = \cf2 new \cf4 AtomicReference<>();\
        String base = String.
\f1\i format
\f0\i0 (\cf7 "%s/%s"\cf4 , out_url, channel);\
        out_url = CommonUtil.
\f1\i getRTSPURL
\f0\i0 (base, username, password);\
        \cf5 push_url\cf4 .set(out_url);\
        \cf2 if \cf4 (camera.\cf5 camera_wifi_type \cf4 == AppConstant.
\f1\i \cf5 WIFI_TYPE_VCS
\f0\i0 \cf4 ) \{\
            loadWifiStream();\
        \} \cf2 else \cf4 \{\
            \cf2 if \cf4 (BuildConfig.
\f1\i \cf5 DEBUG
\f0\i0 \cf4 ) \{\
                \cf5 url\cf4 .set(\cf7 "rtsp://76.239.142.89:7099/0"\cf4 );\
            \}\
            pingWifiServer(\cf5 url\cf4 .get());\
        \}\
    \}\
\
    \cf2 public void \cf9 networkChanged\cf4 () \{\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 == \cf2 null \cf4 && !isPlayingWifi()) \{\
            \cf2 return\cf4 ;\
        \}\
\
        \cf5 is_dialog \cf4 = \cf2 true\cf4 ;\
        MessageUtil.
\f1\i showError
\f0\i0 (\cf2 this\cf4 , \cf7 "Wifi is changed, stopping streaming"\cf4 );\
        \cf2 if \cf4 (isWifiStreaming()) \{\
            \cf5 should_push \cf4 = \cf2 false\cf4 ;\
            \cf5 should_write \cf4 = \cf2 false\cf4 ;\
            \cf5 pushID \cf4 = -\cf8 1\cf4 ;\
            \cf5 writeID \cf4 = -\cf8 1\cf4 ;\
            \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 HANDEL_CAM_STREAM_VIEW_LIVE
\f0\i0 \cf4 , \cf7 "notempety"\cf4 );\
        \}\
        stopWifiService();\
    \}\
\
    \cf2 public void \cf9 stopWifiStream\cf4 () \{\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 == \cf2 null \cf4 && !isPlayingWifi()) \{\
            \cf2 return\cf4 ;\
        \}\
        writeLog(\cf7 "Try stop"\cf4 , \cf8 1\cf4 , \cf8 5\cf4 );\
        \cf2 if \cf4 (\cf5 sourceID \cf4 <= \cf8 0\cf4 ) \{\
            \cf2 return\cf4 ;\
        \}\
        \cf2 try \cf4 \{\
            StopVideo(\cf5 sourceID\cf4 );\
        \} \cf2 catch \cf4 (Exception ex) \{\
            writeLog(\cf7 "StopVideo error: " \cf4 + ex.getMessage(), \cf8 1\cf4 , \cf8 5\cf4 );\
        \}\
        \cf2 if \cf4 (\cf5 readThread \cf4 != \cf2 null \cf4 && \cf5 readThread\cf4 .isAlive()) \{\
            \cf2 try \cf4 \{\
                \cf5 readThread\cf4 .join();\
            \} \cf2 catch \cf4 (InterruptedException e) \{\
                e.printStackTrace();\
            \}\
            \cf5 readThread \cf4 = \cf2 null\cf4 ;\
        \}\
        \cf5 sourceID \cf4 = -\cf8 1\cf4 ;\
        \cf5 pushID \cf4 = -\cf8 1\cf4 ;\
        \cf5 writeID \cf4 = -\cf8 1\cf4 ;\
        \cf5 pushOpt \cf4 = \cf2 new \cf4 EncOpt();\
        \cf5 textOpt \cf4 = \cf2 new \cf4 TextOverlayOption();\
        writeLog(\cf7 "Stopped"\cf4 , \cf8 1\cf4 , \cf8 5\cf4 );\
        \cf2 if \cf4 (!isFinishing()) \{\
            runOnUiThread(() -> \{\
                \cf10 // Post event to update UI\
                \cf5 sharedViewModel\cf4 .postEvent(EventType.
\f1\i \cf5 HANDEL_CAM_STREAM_VIEW_LIVE
\f0\i0 \cf4 , \cf7 ""\cf4 );\
            \});\
        \}\
        \cf2 if \cf4 (\cf5 mWifiService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mWifiService\cf4 .stopAPICalling();\
        \}\
        AppPreference.
\f1\i removeKey
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 CURRENT_SSID
\f0\i0 \cf4 );\
    \}\
\
\
    \cf2 public void \cf9 wifiSnapshot\cf4 () \{\
        Screen(AppPreference.
\f1\i getStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 STORAGE_LOCATION
\f0\i0 \cf4 , ResourceUtil.
\f1\i getRecordPath
\f0\i0 ()));\
        MessageUtil.
\f1\i showToast
\f0\i0 (getApplicationContext(), R.string.
\f1\i \cf5 Success
\f0\i0 \cf4 );\
    \}\
\
    \cf6 @Override\
    \cf2 public \cf4 Handler \cf9 getHandler\cf4 () \{\
        \cf2 return null\cf4 ;\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 onScreenCastStop\cf4 () \{\
\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 onAudioStatusChange\cf4 (BgAudioService.BgAudioNotification.NOTIFICATION_STATUS status, String data) \{\
        updateControls(status);\
    \}\
\
    \cf6 @Override\
    \cf2 public void \cf9 stopBgAudio\cf4 () \{\
        \cf2 if \cf4 (\cf5 mAudioService \cf4 != \cf2 null\cf4 ) \{\
            \cf5 mAudioService\cf4 .stopStreaming();\
            \cf2 if \cf4 (\cf5 isAudioServiceBound\cf4 ) \{\
                runOnUiThread(\cf2 this\cf4 ::stopAudioIntent);\
            \}\
        \}\
    \}\
\
    \cf2 public interface \cf4 NetworkConnectionListener \{\
        \cf2 void \cf9 onResult\cf4 (\cf2 boolean \cf4 is_connected);\
    \}\
\
    \cf2 public void \cf9 handleNetwork\cf4 (NetworkConnectionListener listener) \{\
        \cf2 if \cf4 (BuildConfig.
\f1\i \cf5 DEBUG
\f0\i0 \cf4 ) \{\
            listener.onResult(\cf2 true\cf4 );\
            \cf2 return\cf4 ;\
        \}\
        ConnectivityManager connection_manager = (ConnectivityManager) getSystemService(Context.
\f1\i \cf5 CONNECTIVITY_SERVICE
\f0\i0 \cf4 );\
        \cf2 if \cf4 (DeviceUtils.
\f1\i isNetworkAvailable
\f0\i0 (\cf2 this\cf4 )) \{\
            \cf2 new \cf4 Thread(() -> \{\
                \cf2 try \cf4 \{\
                    URL url = \cf2 new \cf4 URL(\cf7 "https://www.google.com"\cf4 );\
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\
                    conn.setConnectTimeout(\cf8 5000\cf4 );\
                    \cf2 if \cf4 (conn.getResponseCode() != \cf8 200\cf4 ) \{ \cf10 // no internet\
                        \cf2 if \cf4 (DeviceUtils.
\f1\i isCellularAvailable
\f0\i0 (\cf2 this\cf4 )) \{\
                            \cf2 final \cf4 NetworkRequest.Builder req = \cf2 new \cf4 NetworkRequest.Builder();\
                            req.addTransportType(NetworkCapabilities.
\f1\i \cf5 TRANSPORT_CELLULAR
\f0\i0 \cf4 );\
                            \cf5 connection_manager\cf4 .requestNetwork(req.build(), \cf2 new \cf4 ConnectivityManager.NetworkCallback() \{\
                                \cf6 @Override\
                                \cf2 public void \cf9 onAvailable\cf4 (\cf6 @NonNull @NotNull \cf4 Network network) \{\
                                    \cf2 super\cf4 .onAvailable(network);\
                                    \cf5 connection_manager\cf4 .bindProcessToNetwork(network);\
                                    runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 true\cf4 ));\
                                \}\
\
                                \cf6 @Override\
                                \cf2 public void \cf9 onUnavailable\cf4 () \{\
                                    \cf2 super\cf4 .onUnavailable();\
                                    runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                                \}\
\
                                \cf6 @Override\
                                \cf2 public void \cf9 onLost\cf4 (\cf6 @NonNull @NotNull \cf4 Network network) \{\
                                    \cf2 super\cf4 .onLost(network);\
                                    runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                                \}\
\
                                \cf6 @Override\
                                \cf2 public void \cf9 onLosing\cf4 (\cf6 @NonNull @NotNull \cf4 Network network, \cf2 int \cf4 maxMsToLive) \{\
                                    \cf2 super\cf4 .onLosing(network, maxMsToLive);\
                                    runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                                \}\
                            \});\
                        \} \cf2 else \cf4 \{\
                            runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                        \}\
                    \} \cf2 else \cf4 \{\
                        runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 true\cf4 ));\
                    \}\
                \} \cf2 catch \cf4 (Exception e) \{\
                    e.printStackTrace();\
                    \cf2 if \cf4 (DeviceUtils.
\f1\i isCellularAvailable
\f0\i0 (\cf2 this\cf4 )) \{\
                        \cf2 final \cf4 NetworkRequest.Builder req = \cf2 new \cf4 NetworkRequest.Builder();\
                        req.addTransportType(NetworkCapabilities.
\f1\i \cf5 TRANSPORT_CELLULAR
\f0\i0 \cf4 );\
                        \cf5 connection_manager\cf4 .requestNetwork(req.build(), \cf2 new \cf4 ConnectivityManager.NetworkCallback() \{\
                            \cf6 @Override\
                            \cf2 public void \cf9 onAvailable\cf4 (\cf6 @NonNull @NotNull \cf4 Network network) \{\
                                \cf2 super\cf4 .onAvailable(network);\
                                \cf5 connection_manager\cf4 .bindProcessToNetwork(network);\
                                runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 true\cf4 ));\
                            \}\
\
                            \cf6 @Override\
                            \cf2 public void \cf9 onUnavailable\cf4 () \{\
                                \cf2 super\cf4 .onUnavailable();\
                                runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                            \}\
\
                            \cf6 @Override\
                            \cf2 public void \cf9 onLost\cf4 (\cf6 @NonNull @NotNull \cf4 Network network) \{\
                                \cf2 super\cf4 .onLost(network);\
                                runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                            \}\
\
                            \cf6 @Override\
                            \cf2 public void \cf9 onLosing\cf4 (\cf6 @NonNull @NotNull \cf4 Network network, \cf2 int \cf4 maxMsToLive) \{\
                                \cf2 super\cf4 .onLosing(network, maxMsToLive);\
                                runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                            \}\
                        \});\
                    \} \cf2 else \cf4 \{\
                        runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                    \}\
                \}\
            \}).start();\
        \} \cf2 else \cf4 \{\
            \cf2 if \cf4 (DeviceUtils.
\f1\i isCellularAvailable
\f0\i0 (\cf2 this\cf4 )) \{\
                \cf2 final \cf4 NetworkRequest.Builder req = \cf2 new \cf4 NetworkRequest.Builder();\
                req.addTransportType(NetworkCapabilities.
\f1\i \cf5 TRANSPORT_CELLULAR
\f0\i0 \cf4 );\
                connection_manager.requestNetwork(req.build(), \cf2 new \cf4 ConnectivityManager.NetworkCallback() \{\
                    \cf6 @Override\
                    \cf2 public void \cf9 onAvailable\cf4 (\cf6 @NonNull @NotNull \cf4 Network network) \{\
                        \cf2 super\cf4 .onAvailable(network);\
                        \cf5 connection_manager\cf4 .bindProcessToNetwork(network);\
                        runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 true\cf4 ));\
                    \}\
\
                    \cf6 @Override\
                    \cf2 public void \cf9 onUnavailable\cf4 () \{\
                        \cf2 super\cf4 .onUnavailable();\
                        runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                    \}\
\
                    \cf6 @Override\
                    \cf2 public void \cf9 onLost\cf4 (\cf6 @NonNull @NotNull \cf4 Network network) \{\
                        \cf2 super\cf4 .onLost(network);\
                        runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                    \}\
\
                    \cf6 @Override\
                    \cf2 public void \cf9 onLosing\cf4 (\cf6 @NonNull @NotNull \cf4 Network network, \cf2 int \cf4 maxMsToLive) \{\
                        \cf2 super\cf4 .onLosing(network, maxMsToLive);\
                        runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
                    \}\
                \});\
            \} \cf2 else \cf4 \{\
                runOnUiThread(() -> \cf5 listener\cf4 .onResult(\cf2 false\cf4 ));\
            \}\
        \}\
    \}\
\
    \cf6 @SuppressLint\cf4 (\cf7 "InvalidWakeLockTag"\cf4 )\
    \cf2 public void \cf9 bindCurrentWifi\cf4 () \{\
        ContentResolver cr = getContentResolver();\
        \cf2 int \cf4 set = android.provider.Settings.System.
\f1\i \cf5 WIFI_SLEEP_POLICY_NEVER
\f0\i0 \cf4 ;\
        android.provider.Settings.System.
\f1\i putInt
\f0\i0 (cr, android.provider.Settings.System.
\f1\i \cf5 WIFI_SLEEP_POLICY
\f0\i0 \cf4 , set);\
        \cf2 final \cf4 PowerManager pm = (PowerManager) getSystemService(Context.
\f1\i \cf5 POWER_SERVICE
\f0\i0 \cf4 );\
        \cf5 wl \cf4 = pm.newWakeLock(PowerManager.
\f1\i \cf5 PARTIAL_WAKE_LOCK
\f0\i0 \cf4 , \cf7 "CheckmateWake"\cf4 );\
        \cf5 wl\cf4 .acquire();\
\
        AppPreference.
\f1\i setStr
\f0\i0 (AppPreference.KEY.
\f1\i \cf5 CURRENT_SSID
\f0\i0 \cf4 , CommonUtil.
\f1\i getWifiSSID
\f0\i0 (\cf2 this\cf4 ));\
    \}\
\
    \cf2 public void \cf9 AboutReconnect\cf4 (\cf2 int \cf4 _sourceIdD, \cf2 boolean \cf4 _succes) \{\
\
    \}\
\
    \cf2 public void \cf9 AboutChangeInputState\cf4 (\cf2 int \cf4 _sourceID, \cf2 final int \cf4 _state) \{\
        MainActivity.
\f1\i \cf5 instance
\f0\i0 \cf4 .runOnUiThread(\cf2 new \cf4 Runnable() \{\
            \cf6 @Override\
            \cf2 public void \cf9 run\cf4 () \{\
\
            \}\
        \});\
    \}\
\
    \cf6 @SuppressLint\cf4 (\cf7 "DefaultLocale"\cf4 )\
    \cf2 public void \cf9 AboutChangeOutputState\cf4 (\cf2 final int \cf4 _outID, \cf2 final int \cf4 _state) \{\
        writeLog(String.
\f1\i format
\f0\i0 (\cf7 "out %d, change output state: %d"\cf4 , _outID, _state), \cf8 1\cf4 , \cf8 4\cf4 );\
        MainActivity.
\f1\i \cf5 instance
\f0\i0 \cf4 .runOnUiThread(\cf2 new \cf4 Runnable() \{\
            \cf6 @Override\
            \cf2 public void \cf9 run\cf4 () \{\
                TextView text;\
            \}\
        \});\
    \}\
\
    \cf2 public void \cf9 FroceStop\cf4 () \{\
        \cf10 /*_main.runOnUiThread(new Runnable() \{\
            @Override\
            public void run() \{\
                _main.startOnClick(null);\
            \}\
        \});*/\
    \cf4 \}\
\
    \cf2 public native void \cf9 openLog\cf4 (String _path);\
\
    \cf2 public native void \cf9 writeLog\cf4 (String _message, \cf2 int \cf4 _space, \cf2 int \cf4 _desc);\
\
    \cf2 public native void \cf9 setCallbacks\cf4 ();\
\
    \cf2 public native void \cf9 setNetworks\cf4 (\cf2 long \cf4 _network1, \cf2 long \cf4 _network2);\
\
    \cf2 public native void \cf9 SetMute\cf4 (\cf2 boolean \cf4 _mute);\
\
    \cf2 public native int \cf9 AddSource\cf4 (String _video, \cf2 int \cf4 _protocolType);\
\
    \cf2 public native int \cf9 AddDepOut\cf4 (\cf2 int \cf4 _sourceId, String _out, \cf2 int \cf4 _protType, String _segTime, \cf2 int \cf4 _depOutID);\
\
    \cf2 public native int \cf9 AddGLPlayer\cf4 (\cf2 int \cf4 _sourceId);\
\
    \cf2 public native void \cf9 SetEncoderOpt\cf4 (\cf2 int \cf4 _outId, EncOpt _opt);\
\
    \cf2 public native void \cf9 SetMicMode\cf4 (\cf2 int \cf4 _sourceID);\
\
    \cf2 public native boolean \cf9 StartSource\cf4 (\cf2 int \cf4 _sourceId);\
\
    \cf2 public native void \cf9 PullVideo\cf4 (\cf2 int \cf4 _sourceId);\
\
    \cf2 public native boolean \cf9 StopVideo\cf4 (\cf2 int \cf4 _sourceId);\
\
    \cf2 public native boolean \cf9 InitGL\cf4 ();\
\
    \cf2 public native void \cf9 ChangeGL\cf4 (\cf2 int \cf4 _w, \cf2 int \cf4 _h);\
\
    \cf2 public native void \cf9 DelGL\cf4 ();\
\
    \cf2 public native void \cf9 UpdateGl\cf4 ();\
\
    \cf2 public native void \cf9 Screen\cf4 (String _dir);\
\
    \cf2 public native void \cf9 addOverlayToOut\cf4 (TextOverlayOption _over, \cf2 int \cf4 _outID);\
\
    \cf2 public native void \cf9 GlPlayerDisableAudio\cf4 (\cf2 int \cf4 _glOutID);\
\}\
\
}