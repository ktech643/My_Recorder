apply plugin: 'com.android.library'
/*
 *  UVCCamera
 *  library and sample to access to UVC web camera on non-rooted Android device
 *
 * Copyright (c) 2014-2017 saki t_saki@serenegiant.com
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *  All files in the folder are under this Apache License, Version 2.0.
 *  Files in the libjpeg-turbo, libusb, libuvc, rapidjson folder
 *  may have a different license, see the respective files.
 */

import org.apache.tools.ant.taskdefs.condition.Os

android {
	compileSdk 34

	namespace 'com.serenegiant.uvccamera' // âœ… REQUIRED by AGP 7+

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
	}
	
	// Ensure consistent Java toolchain
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(11)
		}
	}

    defaultConfig {
		minSdkVersion 26
		targetSdkVersion 33
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
	sourceSets {
		main {
			jniLibs.srcDir 'src/main/libs'
			jni.srcDirs = []
		}
	}
}

tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
	Properties properties = new Properties()
	def ndkBuildPath = "";
	def ndkBuildingDir = "";
	
	// Try multiple sources for NDK path
	if (project.rootProject.file("local.properties").exists()) {
		properties.load(project.rootProject.file('local.properties').newDataInputStream())
		ndkBuildingDir = properties.getProperty("ndk.dir")
	}
	
	// If no NDK path found, try to use Android SDK NDK
	if (!ndkBuildingDir) {
		def androidSdkDir = properties.getProperty("sdk.dir")
		if (androidSdkDir) {
			// Check for NDK in Android SDK
			def possibleNdkPaths = [
				"${androidSdkDir}/ndk/25.2.9519653", // Primary NDK version
				"${androidSdkDir}/ndk/25.1.8937393", // Fallback version
				"${androidSdkDir}/ndk/29.0.13113456", // Newer version
				"${androidSdkDir}/ndk", // Generic NDK directory
				"${androidSdkDir}/ndk-bundle" // Legacy NDK bundle
			]
			
			for (def path : possibleNdkPaths) {
				if (new File(path).exists()) {
					ndkBuildingDir = path
					println("Using NDK path: ${ndkBuildingDir}")
					break
				}
			}
		}
	}
	
	if (ndkBuildingDir) {
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
		} else {
			ndkBuildPath = ndkBuildingDir + '/ndk-build'
		}
		
		// Verify the ndk-build executable exists
		if (!new File(ndkBuildPath).exists()) {
			println("NDK build executable not found at: ${ndkBuildPath}")
			return null
		}
	}
	
	return ndkBuildPath
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
	def ndkBuildPath = getNdkBuildPath();
	if (ndkBuildPath && new File(ndkBuildPath).exists()) {
		commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
	} else {
		println('NDK path not found or invalid, skipping ndkBuild')
		// Create a dummy command that does nothing
		commandLine 'echo', 'NDK build skipped - NDK not available'
	}
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
	println('executing ndkBuild clean')
	def ndkBuildPath = getNdkBuildPath();
	if (ndkBuildPath && new File(ndkBuildPath).exists()) {
		commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
	} else {
		println('NDK path not found or invalid, skipping ndkClean')
		// Create a dummy command that does nothing
		commandLine 'echo', 'NDK clean skipped - NDK not available'
	}
}

// Always depend on ndkClean, but handle NDK availability gracefully
clean.dependsOn 'ndkClean'

dependencies {
    implementation fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')

	implementation "com.android.support:support-annotations:28.0.0"

	implementation("com.serenegiant:common:2.12.4") {
		exclude module: 'support-v4'
	}
}
