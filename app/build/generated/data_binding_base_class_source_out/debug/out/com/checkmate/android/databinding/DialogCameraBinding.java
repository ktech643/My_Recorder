// Generated by view binder compiler. Do not edit!
package com.checkmate.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.checkmate.android.R;
import com.checkmate.android.ui.view.MySpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogCameraBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnClose;

  @NonNull
  public final Button btnSave;

  @NonNull
  public final CheckBox chkAnonymous;

  @NonNull
  public final CheckBox chkFullAddress;

  @NonNull
  public final EditText edtName;

  @NonNull
  public final EditText edtPassword;

  @NonNull
  public final EditText edtPort;

  @NonNull
  public final EditText edtUri;

  @NonNull
  public final EditText edtUrl;

  @NonNull
  public final EditText edtUsername;

  @NonNull
  public final RadioButton radioTcp;

  @NonNull
  public final RadioButton radioUdp;

  @NonNull
  public final MySpinner spinnerIn;

  @NonNull
  public final MySpinner spinnerOut;

  @NonNull
  public final TextView txtTitle;

  private DialogCameraBinding(@NonNull LinearLayout rootView, @NonNull Button btnClose,
      @NonNull Button btnSave, @NonNull CheckBox chkAnonymous, @NonNull CheckBox chkFullAddress,
      @NonNull EditText edtName, @NonNull EditText edtPassword, @NonNull EditText edtPort,
      @NonNull EditText edtUri, @NonNull EditText edtUrl, @NonNull EditText edtUsername,
      @NonNull RadioButton radioTcp, @NonNull RadioButton radioUdp, @NonNull MySpinner spinnerIn,
      @NonNull MySpinner spinnerOut, @NonNull TextView txtTitle) {
    this.rootView = rootView;
    this.btnClose = btnClose;
    this.btnSave = btnSave;
    this.chkAnonymous = chkAnonymous;
    this.chkFullAddress = chkFullAddress;
    this.edtName = edtName;
    this.edtPassword = edtPassword;
    this.edtPort = edtPort;
    this.edtUri = edtUri;
    this.edtUrl = edtUrl;
    this.edtUsername = edtUsername;
    this.radioTcp = radioTcp;
    this.radioUdp = radioUdp;
    this.spinnerIn = spinnerIn;
    this.spinnerOut = spinnerOut;
    this.txtTitle = txtTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogCameraBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogCameraBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_camera, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogCameraBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_close;
      Button btnClose = ViewBindings.findChildViewById(rootView, id);
      if (btnClose == null) {
        break missingId;
      }

      id = R.id.btn_save;
      Button btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.chk_anonymous;
      CheckBox chkAnonymous = ViewBindings.findChildViewById(rootView, id);
      if (chkAnonymous == null) {
        break missingId;
      }

      id = R.id.chk_full_address;
      CheckBox chkFullAddress = ViewBindings.findChildViewById(rootView, id);
      if (chkFullAddress == null) {
        break missingId;
      }

      id = R.id.edt_name;
      EditText edtName = ViewBindings.findChildViewById(rootView, id);
      if (edtName == null) {
        break missingId;
      }

      id = R.id.edt_password;
      EditText edtPassword = ViewBindings.findChildViewById(rootView, id);
      if (edtPassword == null) {
        break missingId;
      }

      id = R.id.edt_port;
      EditText edtPort = ViewBindings.findChildViewById(rootView, id);
      if (edtPort == null) {
        break missingId;
      }

      id = R.id.edt_uri;
      EditText edtUri = ViewBindings.findChildViewById(rootView, id);
      if (edtUri == null) {
        break missingId;
      }

      id = R.id.edt_url;
      EditText edtUrl = ViewBindings.findChildViewById(rootView, id);
      if (edtUrl == null) {
        break missingId;
      }

      id = R.id.edt_username;
      EditText edtUsername = ViewBindings.findChildViewById(rootView, id);
      if (edtUsername == null) {
        break missingId;
      }

      id = R.id.radio_tcp;
      RadioButton radioTcp = ViewBindings.findChildViewById(rootView, id);
      if (radioTcp == null) {
        break missingId;
      }

      id = R.id.radio_udp;
      RadioButton radioUdp = ViewBindings.findChildViewById(rootView, id);
      if (radioUdp == null) {
        break missingId;
      }

      id = R.id.spinner_in;
      MySpinner spinnerIn = ViewBindings.findChildViewById(rootView, id);
      if (spinnerIn == null) {
        break missingId;
      }

      id = R.id.spinner_out;
      MySpinner spinnerOut = ViewBindings.findChildViewById(rootView, id);
      if (spinnerOut == null) {
        break missingId;
      }

      id = R.id.txt_title;
      TextView txtTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtTitle == null) {
        break missingId;
      }

      return new DialogCameraBinding((LinearLayout) rootView, btnClose, btnSave, chkAnonymous,
          chkFullAddress, edtName, edtPassword, edtPort, edtUri, edtUrl, edtUsername, radioTcp,
          radioUdp, spinnerIn, spinnerOut, txtTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
