// Generated by view binder compiler. Do not edit!
package com.checkmate.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.checkmate.android.R;
import com.checkmate.android.ui.view.MySpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLiveBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView btnRefresh;

  @NonNull
  public final ConstraintLayout frameCamera;

  @NonNull
  public final FrameLayout frameOut;

  @NonNull
  public final ImageView icRec;

  @NonNull
  public final ImageView icRotate;

  @NonNull
  public final ImageView icSel;

  @NonNull
  public final ImageView icSnapshot;

  @NonNull
  public final ImageView icStream;

  @NonNull
  public final LinearLayout llNework;

  @NonNull
  public final TextView lyAudio;

  @NonNull
  public final LinearLayout lyCameraType;

  @NonNull
  public final FrameLayout lyCast;

  @NonNull
  public final LinearLayout lyMenu;

  @NonNull
  public final LinearLayout lyRec;

  @NonNull
  public final LinearLayout lyRotate;

  @NonNull
  public final LinearLayout lySnap;

  @NonNull
  public final LinearLayout lyStream;

  @NonNull
  public final MySpinner spinnerCamera;

  @NonNull
  public final MySpinner spinnerRotate;

  @NonNull
  public final TextView txtCastScreen;

  @NonNull
  public final TextView txtGps;

  @NonNull
  public final TextView txtNetwork;

  @NonNull
  public final TextView txtRec;

  @NonNull
  public final TextView txtRecord;

  @NonNull
  public final TextView txtRotate;

  @NonNull
  public final TextView txtSel;

  @NonNull
  public final TextView txtSnapshot;

  @NonNull
  public final TextView txtSpeed;

  @NonNull
  public final TextView txtStream;

  private FragmentLiveBinding(@NonNull RelativeLayout rootView, @NonNull ImageView btnRefresh,
      @NonNull ConstraintLayout frameCamera, @NonNull FrameLayout frameOut,
      @NonNull ImageView icRec, @NonNull ImageView icRotate, @NonNull ImageView icSel,
      @NonNull ImageView icSnapshot, @NonNull ImageView icStream, @NonNull LinearLayout llNework,
      @NonNull TextView lyAudio, @NonNull LinearLayout lyCameraType, @NonNull FrameLayout lyCast,
      @NonNull LinearLayout lyMenu, @NonNull LinearLayout lyRec, @NonNull LinearLayout lyRotate,
      @NonNull LinearLayout lySnap, @NonNull LinearLayout lyStream,
      @NonNull MySpinner spinnerCamera, @NonNull MySpinner spinnerRotate,
      @NonNull TextView txtCastScreen, @NonNull TextView txtGps, @NonNull TextView txtNetwork,
      @NonNull TextView txtRec, @NonNull TextView txtRecord, @NonNull TextView txtRotate,
      @NonNull TextView txtSel, @NonNull TextView txtSnapshot, @NonNull TextView txtSpeed,
      @NonNull TextView txtStream) {
    this.rootView = rootView;
    this.btnRefresh = btnRefresh;
    this.frameCamera = frameCamera;
    this.frameOut = frameOut;
    this.icRec = icRec;
    this.icRotate = icRotate;
    this.icSel = icSel;
    this.icSnapshot = icSnapshot;
    this.icStream = icStream;
    this.llNework = llNework;
    this.lyAudio = lyAudio;
    this.lyCameraType = lyCameraType;
    this.lyCast = lyCast;
    this.lyMenu = lyMenu;
    this.lyRec = lyRec;
    this.lyRotate = lyRotate;
    this.lySnap = lySnap;
    this.lyStream = lyStream;
    this.spinnerCamera = spinnerCamera;
    this.spinnerRotate = spinnerRotate;
    this.txtCastScreen = txtCastScreen;
    this.txtGps = txtGps;
    this.txtNetwork = txtNetwork;
    this.txtRec = txtRec;
    this.txtRecord = txtRecord;
    this.txtRotate = txtRotate;
    this.txtSel = txtSel;
    this.txtSnapshot = txtSnapshot;
    this.txtSpeed = txtSpeed;
    this.txtStream = txtStream;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLiveBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLiveBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_live, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLiveBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_refresh;
      ImageView btnRefresh = ViewBindings.findChildViewById(rootView, id);
      if (btnRefresh == null) {
        break missingId;
      }

      id = R.id.frame_camera;
      ConstraintLayout frameCamera = ViewBindings.findChildViewById(rootView, id);
      if (frameCamera == null) {
        break missingId;
      }

      id = R.id.frame_out;
      FrameLayout frameOut = ViewBindings.findChildViewById(rootView, id);
      if (frameOut == null) {
        break missingId;
      }

      id = R.id.ic_rec;
      ImageView icRec = ViewBindings.findChildViewById(rootView, id);
      if (icRec == null) {
        break missingId;
      }

      id = R.id.ic_rotate;
      ImageView icRotate = ViewBindings.findChildViewById(rootView, id);
      if (icRotate == null) {
        break missingId;
      }

      id = R.id.ic_sel;
      ImageView icSel = ViewBindings.findChildViewById(rootView, id);
      if (icSel == null) {
        break missingId;
      }

      id = R.id.ic_snapshot;
      ImageView icSnapshot = ViewBindings.findChildViewById(rootView, id);
      if (icSnapshot == null) {
        break missingId;
      }

      id = R.id.ic_stream;
      ImageView icStream = ViewBindings.findChildViewById(rootView, id);
      if (icStream == null) {
        break missingId;
      }

      id = R.id.llNework;
      LinearLayout llNework = ViewBindings.findChildViewById(rootView, id);
      if (llNework == null) {
        break missingId;
      }

      id = R.id.ly_audio;
      TextView lyAudio = ViewBindings.findChildViewById(rootView, id);
      if (lyAudio == null) {
        break missingId;
      }

      id = R.id.ly_camera_type;
      LinearLayout lyCameraType = ViewBindings.findChildViewById(rootView, id);
      if (lyCameraType == null) {
        break missingId;
      }

      id = R.id.ly_cast;
      FrameLayout lyCast = ViewBindings.findChildViewById(rootView, id);
      if (lyCast == null) {
        break missingId;
      }

      id = R.id.ly_menu;
      LinearLayout lyMenu = ViewBindings.findChildViewById(rootView, id);
      if (lyMenu == null) {
        break missingId;
      }

      id = R.id.ly_rec;
      LinearLayout lyRec = ViewBindings.findChildViewById(rootView, id);
      if (lyRec == null) {
        break missingId;
      }

      id = R.id.ly_rotate;
      LinearLayout lyRotate = ViewBindings.findChildViewById(rootView, id);
      if (lyRotate == null) {
        break missingId;
      }

      id = R.id.ly_snap;
      LinearLayout lySnap = ViewBindings.findChildViewById(rootView, id);
      if (lySnap == null) {
        break missingId;
      }

      id = R.id.ly_stream;
      LinearLayout lyStream = ViewBindings.findChildViewById(rootView, id);
      if (lyStream == null) {
        break missingId;
      }

      id = R.id.spinner_camera;
      MySpinner spinnerCamera = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCamera == null) {
        break missingId;
      }

      id = R.id.spinner_rotate;
      MySpinner spinnerRotate = ViewBindings.findChildViewById(rootView, id);
      if (spinnerRotate == null) {
        break missingId;
      }

      id = R.id.txt_cast_screen;
      TextView txtCastScreen = ViewBindings.findChildViewById(rootView, id);
      if (txtCastScreen == null) {
        break missingId;
      }

      id = R.id.txt_gps;
      TextView txtGps = ViewBindings.findChildViewById(rootView, id);
      if (txtGps == null) {
        break missingId;
      }

      id = R.id.txt_network;
      TextView txtNetwork = ViewBindings.findChildViewById(rootView, id);
      if (txtNetwork == null) {
        break missingId;
      }

      id = R.id.txt_rec;
      TextView txtRec = ViewBindings.findChildViewById(rootView, id);
      if (txtRec == null) {
        break missingId;
      }

      id = R.id.txt_record;
      TextView txtRecord = ViewBindings.findChildViewById(rootView, id);
      if (txtRecord == null) {
        break missingId;
      }

      id = R.id.txt_rotate;
      TextView txtRotate = ViewBindings.findChildViewById(rootView, id);
      if (txtRotate == null) {
        break missingId;
      }

      id = R.id.txt_sel;
      TextView txtSel = ViewBindings.findChildViewById(rootView, id);
      if (txtSel == null) {
        break missingId;
      }

      id = R.id.txt_snapshot;
      TextView txtSnapshot = ViewBindings.findChildViewById(rootView, id);
      if (txtSnapshot == null) {
        break missingId;
      }

      id = R.id.txt_speed;
      TextView txtSpeed = ViewBindings.findChildViewById(rootView, id);
      if (txtSpeed == null) {
        break missingId;
      }

      id = R.id.txt_stream;
      TextView txtStream = ViewBindings.findChildViewById(rootView, id);
      if (txtStream == null) {
        break missingId;
      }

      return new FragmentLiveBinding((RelativeLayout) rootView, btnRefresh, frameCamera, frameOut,
          icRec, icRotate, icSel, icSnapshot, icStream, llNework, lyAudio, lyCameraType, lyCast,
          lyMenu, lyRec, lyRotate, lySnap, lyStream, spinnerCamera, spinnerRotate, txtCastScreen,
          txtGps, txtNetwork, txtRec, txtRecord, txtRotate, txtSel, txtSnapshot, txtSpeed,
          txtStream);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
