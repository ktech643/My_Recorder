// Generated by view binder compiler. Do not edit!
package com.checkmate.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.checkmate.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogTranscodeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnClose;

  @NonNull
  public final Button btnSave;

  @NonNull
  public final CheckBox chkAudio;

  @NonNull
  public final CheckBox chkBox;

  @NonNull
  public final CheckBox chkMp4Audio;

  @NonNull
  public final CheckBox chkOverlay;

  @NonNull
  public final CheckBox chkUseMic;

  @NonNull
  public final EditText edtBitrate;

  @NonNull
  public final EditText edtCodec;

  @NonNull
  public final EditText edtColor;

  @NonNull
  public final EditText edtFont;

  @NonNull
  public final EditText edtFontColor;

  @NonNull
  public final EditText edtFontSize;

  @NonNull
  public final EditText edtFramerate;

  @NonNull
  public final EditText edtHeight;

  @NonNull
  public final EditText edtText;

  @NonNull
  public final EditText edtWidth;

  @NonNull
  public final EditText edtX0;

  @NonNull
  public final EditText edtY0;

  @NonNull
  public final LinearLayout lyBox;

  @NonNull
  public final TextView txtTitle;

  private DialogTranscodeBinding(@NonNull LinearLayout rootView, @NonNull Button btnClose,
      @NonNull Button btnSave, @NonNull CheckBox chkAudio, @NonNull CheckBox chkBox,
      @NonNull CheckBox chkMp4Audio, @NonNull CheckBox chkOverlay, @NonNull CheckBox chkUseMic,
      @NonNull EditText edtBitrate, @NonNull EditText edtCodec, @NonNull EditText edtColor,
      @NonNull EditText edtFont, @NonNull EditText edtFontColor, @NonNull EditText edtFontSize,
      @NonNull EditText edtFramerate, @NonNull EditText edtHeight, @NonNull EditText edtText,
      @NonNull EditText edtWidth, @NonNull EditText edtX0, @NonNull EditText edtY0,
      @NonNull LinearLayout lyBox, @NonNull TextView txtTitle) {
    this.rootView = rootView;
    this.btnClose = btnClose;
    this.btnSave = btnSave;
    this.chkAudio = chkAudio;
    this.chkBox = chkBox;
    this.chkMp4Audio = chkMp4Audio;
    this.chkOverlay = chkOverlay;
    this.chkUseMic = chkUseMic;
    this.edtBitrate = edtBitrate;
    this.edtCodec = edtCodec;
    this.edtColor = edtColor;
    this.edtFont = edtFont;
    this.edtFontColor = edtFontColor;
    this.edtFontSize = edtFontSize;
    this.edtFramerate = edtFramerate;
    this.edtHeight = edtHeight;
    this.edtText = edtText;
    this.edtWidth = edtWidth;
    this.edtX0 = edtX0;
    this.edtY0 = edtY0;
    this.lyBox = lyBox;
    this.txtTitle = txtTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogTranscodeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogTranscodeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_transcode, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogTranscodeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_close;
      Button btnClose = ViewBindings.findChildViewById(rootView, id);
      if (btnClose == null) {
        break missingId;
      }

      id = R.id.btn_save;
      Button btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.chk_audio;
      CheckBox chkAudio = ViewBindings.findChildViewById(rootView, id);
      if (chkAudio == null) {
        break missingId;
      }

      id = R.id.chk_box;
      CheckBox chkBox = ViewBindings.findChildViewById(rootView, id);
      if (chkBox == null) {
        break missingId;
      }

      id = R.id.chk_mp4_audio;
      CheckBox chkMp4Audio = ViewBindings.findChildViewById(rootView, id);
      if (chkMp4Audio == null) {
        break missingId;
      }

      id = R.id.chk_overlay;
      CheckBox chkOverlay = ViewBindings.findChildViewById(rootView, id);
      if (chkOverlay == null) {
        break missingId;
      }

      id = R.id.chk_use_mic;
      CheckBox chkUseMic = ViewBindings.findChildViewById(rootView, id);
      if (chkUseMic == null) {
        break missingId;
      }

      id = R.id.edt_bitrate;
      EditText edtBitrate = ViewBindings.findChildViewById(rootView, id);
      if (edtBitrate == null) {
        break missingId;
      }

      id = R.id.edt_codec;
      EditText edtCodec = ViewBindings.findChildViewById(rootView, id);
      if (edtCodec == null) {
        break missingId;
      }

      id = R.id.edt_color;
      EditText edtColor = ViewBindings.findChildViewById(rootView, id);
      if (edtColor == null) {
        break missingId;
      }

      id = R.id.edt_font;
      EditText edtFont = ViewBindings.findChildViewById(rootView, id);
      if (edtFont == null) {
        break missingId;
      }

      id = R.id.edt_font_color;
      EditText edtFontColor = ViewBindings.findChildViewById(rootView, id);
      if (edtFontColor == null) {
        break missingId;
      }

      id = R.id.edt_font_size;
      EditText edtFontSize = ViewBindings.findChildViewById(rootView, id);
      if (edtFontSize == null) {
        break missingId;
      }

      id = R.id.edt_framerate;
      EditText edtFramerate = ViewBindings.findChildViewById(rootView, id);
      if (edtFramerate == null) {
        break missingId;
      }

      id = R.id.edt_height;
      EditText edtHeight = ViewBindings.findChildViewById(rootView, id);
      if (edtHeight == null) {
        break missingId;
      }

      id = R.id.edt_text;
      EditText edtText = ViewBindings.findChildViewById(rootView, id);
      if (edtText == null) {
        break missingId;
      }

      id = R.id.edt_width;
      EditText edtWidth = ViewBindings.findChildViewById(rootView, id);
      if (edtWidth == null) {
        break missingId;
      }

      id = R.id.edt_x0;
      EditText edtX0 = ViewBindings.findChildViewById(rootView, id);
      if (edtX0 == null) {
        break missingId;
      }

      id = R.id.edt_y0;
      EditText edtY0 = ViewBindings.findChildViewById(rootView, id);
      if (edtY0 == null) {
        break missingId;
      }

      id = R.id.ly_box;
      LinearLayout lyBox = ViewBindings.findChildViewById(rootView, id);
      if (lyBox == null) {
        break missingId;
      }

      id = R.id.txt_title;
      TextView txtTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtTitle == null) {
        break missingId;
      }

      return new DialogTranscodeBinding((LinearLayout) rootView, btnClose, btnSave, chkAudio,
          chkBox, chkMp4Audio, chkOverlay, chkUseMic, edtBitrate, edtCodec, edtColor, edtFont,
          edtFontColor, edtFontSize, edtFramerate, edtHeight, edtText, edtWidth, edtX0, edtY0,
          lyBox, txtTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
