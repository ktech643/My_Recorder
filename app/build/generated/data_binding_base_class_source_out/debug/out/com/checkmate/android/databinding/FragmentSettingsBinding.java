// Generated by view binder compiler. Do not edit!
package com.checkmate.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.checkmate.android.R;
import com.checkmate.android.ui.view.MySpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSettingsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView accessibilityStatisTitle;

  @NonNull
  public final MySpinner audioOptionBitrate;

  @NonNull
  public final MySpinner audioOptionChannelCount;

  @NonNull
  public final MySpinner audioOptionSampleRate;

  @NonNull
  public final CardView audioOptions;

  @NonNull
  public final MySpinner audioPrefMic;

  @NonNull
  public final MySpinner audioSrc;

  @NonNull
  public final MySpinner bluetoothAudioSrc;

  @NonNull
  public final CardView cardBeta;

  @NonNull
  public final EditText edtBitrate;

  @NonNull
  public final EditText edtCastBitrate;

  @NonNull
  public final EditText edtCastKeyFrame;

  @NonNull
  public final EditText edtCloud;

  @NonNull
  public final EditText edtKeyFrame;

  @NonNull
  public final EditText edtPin;

  @NonNull
  public final EditText edtSplit;

  @NonNull
  public final EditText edtStreamingBitrate;

  @NonNull
  public final EditText edtStreamingKeyFrame;

  @NonNull
  public final EditText edtUsbMaxFps;

  @NonNull
  public final EditText edtUsbMinFps;

  @NonNull
  public final ListView listCameras;

  @NonNull
  public final LinearLayout lyAudio;

  @NonNull
  public final LinearLayout lyCastVideoCustom;

  @NonNull
  public final CardView lyCastVideoSettings;

  @NonNull
  public final LinearLayout lyExpire;

  @NonNull
  public final CardView lyRecordingSettings;

  @NonNull
  public final LinearLayout lyStreamingCustom;

  @NonNull
  public final CardView lyStreamingSettings;

  @NonNull
  public final CardView lyUsb;

  @NonNull
  public final LinearLayout lyVideoCustom;

  @NonNull
  public final LinearLayout lyVuMeter;

  @NonNull
  public final MySpinner spinnerAdaptive;

  @NonNull
  public final MySpinner spinnerAudioSrc;

  @NonNull
  public final Spinner spinnerCastFrame;

  @NonNull
  public final Spinner spinnerCastResolution;

  @NonNull
  public final Spinner spinnerFrame;

  @NonNull
  public final Spinner spinnerQuality;

  @NonNull
  public final Spinner spinnerResolution;

  @NonNull
  public final MySpinner spinnerSampleRate;

  @NonNull
  public final MySpinner spinnerUsbCodec;

  @NonNull
  public final MySpinner spinnerUsbResolution;

  @NonNull
  public final Spinner streamingAudioBitrate;

  @NonNull
  public final Spinner streamingFrame;

  @NonNull
  public final MySpinner streamingQuality;

  @NonNull
  public final Spinner streamingResolution;

  @NonNull
  public final Switch swtAdaptiveFps;

  @NonNull
  public final Switch swtAutoRecord;

  @NonNull
  public final Switch swtConvertUi;

  @NonNull
  public final Switch swtEncryption;

  @NonNull
  public final Switch swtFifo;

  @NonNull
  public final Switch swtKeyService;

  @NonNull
  public final Switch swtOrientation;

  @NonNull
  public final Switch swtRadioAccessbility;

  @NonNull
  public final Switch swtRadioBluetooth;

  @NonNull
  public final Switch swtRadioMode;

  @NonNull
  public final Switch swtRecAudio;

  @NonNull
  public final Switch swtSecureMulti;

  @NonNull
  public final Switch swtTimestamp;

  @NonNull
  public final Switch swtTranscode;

  @NonNull
  public final Switch swtVuMeter;

  @NonNull
  public final TextView tvExpirationDate;

  @NonNull
  public final TextView tvStorageLocation;

  @NonNull
  public final TextView txtBetaUpdate;

  @NonNull
  public final TextView txtCamera;

  @NonNull
  public final TextView txtCastVideoDetails;

  @NonNull
  public final TextView txtCheckUpdate;

  @NonNull
  public final TextView txtExit;

  @NonNull
  public final TextView txtExpire;

  @NonNull
  public final TextView txtLocation;

  @NonNull
  public final TextView txtMachine;

  @NonNull
  public final TextView txtNewVersion;

  @NonNull
  public final TextView txtReactivate;

  @NonNull
  public final TextView txtSerial;

  @NonNull
  public final TextView txtSpace;

  @NonNull
  public final TextView txtStorage;

  @NonNull
  public final TextView txtStreamDetails;

  @NonNull
  public final TextView txtTranscode;

  @NonNull
  public final TextView txtUpdate;

  @NonNull
  public final TextView txtUsbCam;

  @NonNull
  public final TextView txtVersion;

  @NonNull
  public final TextView txtVideoDetails;

  @NonNull
  public final TextView txtWifiCamera;

  @NonNull
  public final MySpinner usbAudioBitrate;

  @NonNull
  public final MySpinner usbAudioSrc;

  @NonNull
  public final MySpinner usbBluetoothSrc;

  @NonNull
  public final MySpinner usbChannelCount;

  @NonNull
  public final LinearLayout usbPathLl;

  @NonNull
  public final Switch usbRadioBluetooth;

  @NonNull
  public final MySpinner usbSampleRate;

  private FragmentSettingsBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView accessibilityStatisTitle, @NonNull MySpinner audioOptionBitrate,
      @NonNull MySpinner audioOptionChannelCount, @NonNull MySpinner audioOptionSampleRate,
      @NonNull CardView audioOptions, @NonNull MySpinner audioPrefMic, @NonNull MySpinner audioSrc,
      @NonNull MySpinner bluetoothAudioSrc, @NonNull CardView cardBeta,
      @NonNull EditText edtBitrate, @NonNull EditText edtCastBitrate,
      @NonNull EditText edtCastKeyFrame, @NonNull EditText edtCloud, @NonNull EditText edtKeyFrame,
      @NonNull EditText edtPin, @NonNull EditText edtSplit, @NonNull EditText edtStreamingBitrate,
      @NonNull EditText edtStreamingKeyFrame, @NonNull EditText edtUsbMaxFps,
      @NonNull EditText edtUsbMinFps, @NonNull ListView listCameras, @NonNull LinearLayout lyAudio,
      @NonNull LinearLayout lyCastVideoCustom, @NonNull CardView lyCastVideoSettings,
      @NonNull LinearLayout lyExpire, @NonNull CardView lyRecordingSettings,
      @NonNull LinearLayout lyStreamingCustom, @NonNull CardView lyStreamingSettings,
      @NonNull CardView lyUsb, @NonNull LinearLayout lyVideoCustom, @NonNull LinearLayout lyVuMeter,
      @NonNull MySpinner spinnerAdaptive, @NonNull MySpinner spinnerAudioSrc,
      @NonNull Spinner spinnerCastFrame, @NonNull Spinner spinnerCastResolution,
      @NonNull Spinner spinnerFrame, @NonNull Spinner spinnerQuality,
      @NonNull Spinner spinnerResolution, @NonNull MySpinner spinnerSampleRate,
      @NonNull MySpinner spinnerUsbCodec, @NonNull MySpinner spinnerUsbResolution,
      @NonNull Spinner streamingAudioBitrate, @NonNull Spinner streamingFrame,
      @NonNull MySpinner streamingQuality, @NonNull Spinner streamingResolution,
      @NonNull Switch swtAdaptiveFps, @NonNull Switch swtAutoRecord, @NonNull Switch swtConvertUi,
      @NonNull Switch swtEncryption, @NonNull Switch swtFifo, @NonNull Switch swtKeyService,
      @NonNull Switch swtOrientation, @NonNull Switch swtRadioAccessbility,
      @NonNull Switch swtRadioBluetooth, @NonNull Switch swtRadioMode, @NonNull Switch swtRecAudio,
      @NonNull Switch swtSecureMulti, @NonNull Switch swtTimestamp, @NonNull Switch swtTranscode,
      @NonNull Switch swtVuMeter, @NonNull TextView tvExpirationDate,
      @NonNull TextView tvStorageLocation, @NonNull TextView txtBetaUpdate,
      @NonNull TextView txtCamera, @NonNull TextView txtCastVideoDetails,
      @NonNull TextView txtCheckUpdate, @NonNull TextView txtExit, @NonNull TextView txtExpire,
      @NonNull TextView txtLocation, @NonNull TextView txtMachine, @NonNull TextView txtNewVersion,
      @NonNull TextView txtReactivate, @NonNull TextView txtSerial, @NonNull TextView txtSpace,
      @NonNull TextView txtStorage, @NonNull TextView txtStreamDetails,
      @NonNull TextView txtTranscode, @NonNull TextView txtUpdate, @NonNull TextView txtUsbCam,
      @NonNull TextView txtVersion, @NonNull TextView txtVideoDetails,
      @NonNull TextView txtWifiCamera, @NonNull MySpinner usbAudioBitrate,
      @NonNull MySpinner usbAudioSrc, @NonNull MySpinner usbBluetoothSrc,
      @NonNull MySpinner usbChannelCount, @NonNull LinearLayout usbPathLl,
      @NonNull Switch usbRadioBluetooth, @NonNull MySpinner usbSampleRate) {
    this.rootView = rootView;
    this.accessibilityStatisTitle = accessibilityStatisTitle;
    this.audioOptionBitrate = audioOptionBitrate;
    this.audioOptionChannelCount = audioOptionChannelCount;
    this.audioOptionSampleRate = audioOptionSampleRate;
    this.audioOptions = audioOptions;
    this.audioPrefMic = audioPrefMic;
    this.audioSrc = audioSrc;
    this.bluetoothAudioSrc = bluetoothAudioSrc;
    this.cardBeta = cardBeta;
    this.edtBitrate = edtBitrate;
    this.edtCastBitrate = edtCastBitrate;
    this.edtCastKeyFrame = edtCastKeyFrame;
    this.edtCloud = edtCloud;
    this.edtKeyFrame = edtKeyFrame;
    this.edtPin = edtPin;
    this.edtSplit = edtSplit;
    this.edtStreamingBitrate = edtStreamingBitrate;
    this.edtStreamingKeyFrame = edtStreamingKeyFrame;
    this.edtUsbMaxFps = edtUsbMaxFps;
    this.edtUsbMinFps = edtUsbMinFps;
    this.listCameras = listCameras;
    this.lyAudio = lyAudio;
    this.lyCastVideoCustom = lyCastVideoCustom;
    this.lyCastVideoSettings = lyCastVideoSettings;
    this.lyExpire = lyExpire;
    this.lyRecordingSettings = lyRecordingSettings;
    this.lyStreamingCustom = lyStreamingCustom;
    this.lyStreamingSettings = lyStreamingSettings;
    this.lyUsb = lyUsb;
    this.lyVideoCustom = lyVideoCustom;
    this.lyVuMeter = lyVuMeter;
    this.spinnerAdaptive = spinnerAdaptive;
    this.spinnerAudioSrc = spinnerAudioSrc;
    this.spinnerCastFrame = spinnerCastFrame;
    this.spinnerCastResolution = spinnerCastResolution;
    this.spinnerFrame = spinnerFrame;
    this.spinnerQuality = spinnerQuality;
    this.spinnerResolution = spinnerResolution;
    this.spinnerSampleRate = spinnerSampleRate;
    this.spinnerUsbCodec = spinnerUsbCodec;
    this.spinnerUsbResolution = spinnerUsbResolution;
    this.streamingAudioBitrate = streamingAudioBitrate;
    this.streamingFrame = streamingFrame;
    this.streamingQuality = streamingQuality;
    this.streamingResolution = streamingResolution;
    this.swtAdaptiveFps = swtAdaptiveFps;
    this.swtAutoRecord = swtAutoRecord;
    this.swtConvertUi = swtConvertUi;
    this.swtEncryption = swtEncryption;
    this.swtFifo = swtFifo;
    this.swtKeyService = swtKeyService;
    this.swtOrientation = swtOrientation;
    this.swtRadioAccessbility = swtRadioAccessbility;
    this.swtRadioBluetooth = swtRadioBluetooth;
    this.swtRadioMode = swtRadioMode;
    this.swtRecAudio = swtRecAudio;
    this.swtSecureMulti = swtSecureMulti;
    this.swtTimestamp = swtTimestamp;
    this.swtTranscode = swtTranscode;
    this.swtVuMeter = swtVuMeter;
    this.tvExpirationDate = tvExpirationDate;
    this.tvStorageLocation = tvStorageLocation;
    this.txtBetaUpdate = txtBetaUpdate;
    this.txtCamera = txtCamera;
    this.txtCastVideoDetails = txtCastVideoDetails;
    this.txtCheckUpdate = txtCheckUpdate;
    this.txtExit = txtExit;
    this.txtExpire = txtExpire;
    this.txtLocation = txtLocation;
    this.txtMachine = txtMachine;
    this.txtNewVersion = txtNewVersion;
    this.txtReactivate = txtReactivate;
    this.txtSerial = txtSerial;
    this.txtSpace = txtSpace;
    this.txtStorage = txtStorage;
    this.txtStreamDetails = txtStreamDetails;
    this.txtTranscode = txtTranscode;
    this.txtUpdate = txtUpdate;
    this.txtUsbCam = txtUsbCam;
    this.txtVersion = txtVersion;
    this.txtVideoDetails = txtVideoDetails;
    this.txtWifiCamera = txtWifiCamera;
    this.usbAudioBitrate = usbAudioBitrate;
    this.usbAudioSrc = usbAudioSrc;
    this.usbBluetoothSrc = usbBluetoothSrc;
    this.usbChannelCount = usbChannelCount;
    this.usbPathLl = usbPathLl;
    this.usbRadioBluetooth = usbRadioBluetooth;
    this.usbSampleRate = usbSampleRate;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.accessibility_statis_title;
      TextView accessibilityStatisTitle = ViewBindings.findChildViewById(rootView, id);
      if (accessibilityStatisTitle == null) {
        break missingId;
      }

      id = R.id.audio_option_bitrate;
      MySpinner audioOptionBitrate = ViewBindings.findChildViewById(rootView, id);
      if (audioOptionBitrate == null) {
        break missingId;
      }

      id = R.id.audio_option_channel_count;
      MySpinner audioOptionChannelCount = ViewBindings.findChildViewById(rootView, id);
      if (audioOptionChannelCount == null) {
        break missingId;
      }

      id = R.id.audio_option_sample_rate;
      MySpinner audioOptionSampleRate = ViewBindings.findChildViewById(rootView, id);
      if (audioOptionSampleRate == null) {
        break missingId;
      }

      id = R.id.audio_options;
      CardView audioOptions = ViewBindings.findChildViewById(rootView, id);
      if (audioOptions == null) {
        break missingId;
      }

      id = R.id.audio_pref_mic;
      MySpinner audioPrefMic = ViewBindings.findChildViewById(rootView, id);
      if (audioPrefMic == null) {
        break missingId;
      }

      id = R.id.audio_src;
      MySpinner audioSrc = ViewBindings.findChildViewById(rootView, id);
      if (audioSrc == null) {
        break missingId;
      }

      id = R.id.bluetooth_audio_src;
      MySpinner bluetoothAudioSrc = ViewBindings.findChildViewById(rootView, id);
      if (bluetoothAudioSrc == null) {
        break missingId;
      }

      id = R.id.card_beta;
      CardView cardBeta = ViewBindings.findChildViewById(rootView, id);
      if (cardBeta == null) {
        break missingId;
      }

      id = R.id.edt_bitrate;
      EditText edtBitrate = ViewBindings.findChildViewById(rootView, id);
      if (edtBitrate == null) {
        break missingId;
      }

      id = R.id.edt_cast_bitrate;
      EditText edtCastBitrate = ViewBindings.findChildViewById(rootView, id);
      if (edtCastBitrate == null) {
        break missingId;
      }

      id = R.id.edt_cast_keyFrame;
      EditText edtCastKeyFrame = ViewBindings.findChildViewById(rootView, id);
      if (edtCastKeyFrame == null) {
        break missingId;
      }

      id = R.id.edt_cloud;
      EditText edtCloud = ViewBindings.findChildViewById(rootView, id);
      if (edtCloud == null) {
        break missingId;
      }

      id = R.id.edt_keyFrame;
      EditText edtKeyFrame = ViewBindings.findChildViewById(rootView, id);
      if (edtKeyFrame == null) {
        break missingId;
      }

      id = R.id.edt_pin;
      EditText edtPin = ViewBindings.findChildViewById(rootView, id);
      if (edtPin == null) {
        break missingId;
      }

      id = R.id.edt_split;
      EditText edtSplit = ViewBindings.findChildViewById(rootView, id);
      if (edtSplit == null) {
        break missingId;
      }

      id = R.id.edt_streaming_bitrate;
      EditText edtStreamingBitrate = ViewBindings.findChildViewById(rootView, id);
      if (edtStreamingBitrate == null) {
        break missingId;
      }

      id = R.id.edt_streaming_keyFrame;
      EditText edtStreamingKeyFrame = ViewBindings.findChildViewById(rootView, id);
      if (edtStreamingKeyFrame == null) {
        break missingId;
      }

      id = R.id.edt_usb_max_fps;
      EditText edtUsbMaxFps = ViewBindings.findChildViewById(rootView, id);
      if (edtUsbMaxFps == null) {
        break missingId;
      }

      id = R.id.edt_usb_min_fps;
      EditText edtUsbMinFps = ViewBindings.findChildViewById(rootView, id);
      if (edtUsbMinFps == null) {
        break missingId;
      }

      id = R.id.list_cameras;
      ListView listCameras = ViewBindings.findChildViewById(rootView, id);
      if (listCameras == null) {
        break missingId;
      }

      id = R.id.ly_audio;
      LinearLayout lyAudio = ViewBindings.findChildViewById(rootView, id);
      if (lyAudio == null) {
        break missingId;
      }

      id = R.id.ly_cast_video_custom;
      LinearLayout lyCastVideoCustom = ViewBindings.findChildViewById(rootView, id);
      if (lyCastVideoCustom == null) {
        break missingId;
      }

      id = R.id.ly_cast_video_settings;
      CardView lyCastVideoSettings = ViewBindings.findChildViewById(rootView, id);
      if (lyCastVideoSettings == null) {
        break missingId;
      }

      id = R.id.ly_expire;
      LinearLayout lyExpire = ViewBindings.findChildViewById(rootView, id);
      if (lyExpire == null) {
        break missingId;
      }

      id = R.id.ly_recording_settings;
      CardView lyRecordingSettings = ViewBindings.findChildViewById(rootView, id);
      if (lyRecordingSettings == null) {
        break missingId;
      }

      id = R.id.ly_streaming_custom;
      LinearLayout lyStreamingCustom = ViewBindings.findChildViewById(rootView, id);
      if (lyStreamingCustom == null) {
        break missingId;
      }

      id = R.id.ly_streaming_settings;
      CardView lyStreamingSettings = ViewBindings.findChildViewById(rootView, id);
      if (lyStreamingSettings == null) {
        break missingId;
      }

      id = R.id.ly_usb;
      CardView lyUsb = ViewBindings.findChildViewById(rootView, id);
      if (lyUsb == null) {
        break missingId;
      }

      id = R.id.ly_video_custom;
      LinearLayout lyVideoCustom = ViewBindings.findChildViewById(rootView, id);
      if (lyVideoCustom == null) {
        break missingId;
      }

      id = R.id.ly_vu_meter;
      LinearLayout lyVuMeter = ViewBindings.findChildViewById(rootView, id);
      if (lyVuMeter == null) {
        break missingId;
      }

      id = R.id.spinner_adaptive;
      MySpinner spinnerAdaptive = ViewBindings.findChildViewById(rootView, id);
      if (spinnerAdaptive == null) {
        break missingId;
      }

      id = R.id.spinner_audio_src;
      MySpinner spinnerAudioSrc = ViewBindings.findChildViewById(rootView, id);
      if (spinnerAudioSrc == null) {
        break missingId;
      }

      id = R.id.spinner_cast_frame;
      Spinner spinnerCastFrame = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCastFrame == null) {
        break missingId;
      }

      id = R.id.spinner_cast_resolution;
      Spinner spinnerCastResolution = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCastResolution == null) {
        break missingId;
      }

      id = R.id.spinner_frame;
      Spinner spinnerFrame = ViewBindings.findChildViewById(rootView, id);
      if (spinnerFrame == null) {
        break missingId;
      }

      id = R.id.spinner_quality;
      Spinner spinnerQuality = ViewBindings.findChildViewById(rootView, id);
      if (spinnerQuality == null) {
        break missingId;
      }

      id = R.id.spinner_resolution;
      Spinner spinnerResolution = ViewBindings.findChildViewById(rootView, id);
      if (spinnerResolution == null) {
        break missingId;
      }

      id = R.id.spinner_sample_rate;
      MySpinner spinnerSampleRate = ViewBindings.findChildViewById(rootView, id);
      if (spinnerSampleRate == null) {
        break missingId;
      }

      id = R.id.spinner_usb_codec;
      MySpinner spinnerUsbCodec = ViewBindings.findChildViewById(rootView, id);
      if (spinnerUsbCodec == null) {
        break missingId;
      }

      id = R.id.spinner_usb_resolution;
      MySpinner spinnerUsbResolution = ViewBindings.findChildViewById(rootView, id);
      if (spinnerUsbResolution == null) {
        break missingId;
      }

      id = R.id.streaming_audio_bitrate;
      Spinner streamingAudioBitrate = ViewBindings.findChildViewById(rootView, id);
      if (streamingAudioBitrate == null) {
        break missingId;
      }

      id = R.id.streaming_frame;
      Spinner streamingFrame = ViewBindings.findChildViewById(rootView, id);
      if (streamingFrame == null) {
        break missingId;
      }

      id = R.id.streaming_quality;
      MySpinner streamingQuality = ViewBindings.findChildViewById(rootView, id);
      if (streamingQuality == null) {
        break missingId;
      }

      id = R.id.streaming_resolution;
      Spinner streamingResolution = ViewBindings.findChildViewById(rootView, id);
      if (streamingResolution == null) {
        break missingId;
      }

      id = R.id.swt_adaptive_fps;
      Switch swtAdaptiveFps = ViewBindings.findChildViewById(rootView, id);
      if (swtAdaptiveFps == null) {
        break missingId;
      }

      id = R.id.swt_auto_record;
      Switch swtAutoRecord = ViewBindings.findChildViewById(rootView, id);
      if (swtAutoRecord == null) {
        break missingId;
      }

      id = R.id.swt_convert_ui;
      Switch swtConvertUi = ViewBindings.findChildViewById(rootView, id);
      if (swtConvertUi == null) {
        break missingId;
      }

      id = R.id.swt_encryption;
      Switch swtEncryption = ViewBindings.findChildViewById(rootView, id);
      if (swtEncryption == null) {
        break missingId;
      }

      id = R.id.swt_fifo;
      Switch swtFifo = ViewBindings.findChildViewById(rootView, id);
      if (swtFifo == null) {
        break missingId;
      }

      id = R.id.swt_key_service;
      Switch swtKeyService = ViewBindings.findChildViewById(rootView, id);
      if (swtKeyService == null) {
        break missingId;
      }

      id = R.id.swt_orientation;
      Switch swtOrientation = ViewBindings.findChildViewById(rootView, id);
      if (swtOrientation == null) {
        break missingId;
      }

      id = R.id.swt_radio_accessbility;
      Switch swtRadioAccessbility = ViewBindings.findChildViewById(rootView, id);
      if (swtRadioAccessbility == null) {
        break missingId;
      }

      id = R.id.swt_radio_bluetooth;
      Switch swtRadioBluetooth = ViewBindings.findChildViewById(rootView, id);
      if (swtRadioBluetooth == null) {
        break missingId;
      }

      id = R.id.swt_radio_mode;
      Switch swtRadioMode = ViewBindings.findChildViewById(rootView, id);
      if (swtRadioMode == null) {
        break missingId;
      }

      id = R.id.swt_rec_audio;
      Switch swtRecAudio = ViewBindings.findChildViewById(rootView, id);
      if (swtRecAudio == null) {
        break missingId;
      }

      id = R.id.swt_secure_multi;
      Switch swtSecureMulti = ViewBindings.findChildViewById(rootView, id);
      if (swtSecureMulti == null) {
        break missingId;
      }

      id = R.id.swt_timestamp;
      Switch swtTimestamp = ViewBindings.findChildViewById(rootView, id);
      if (swtTimestamp == null) {
        break missingId;
      }

      id = R.id.swt_transcode;
      Switch swtTranscode = ViewBindings.findChildViewById(rootView, id);
      if (swtTranscode == null) {
        break missingId;
      }

      id = R.id.swt_vu_meter;
      Switch swtVuMeter = ViewBindings.findChildViewById(rootView, id);
      if (swtVuMeter == null) {
        break missingId;
      }

      id = R.id.tv_expiration_date;
      TextView tvExpirationDate = ViewBindings.findChildViewById(rootView, id);
      if (tvExpirationDate == null) {
        break missingId;
      }

      id = R.id.tv_storage_location;
      TextView tvStorageLocation = ViewBindings.findChildViewById(rootView, id);
      if (tvStorageLocation == null) {
        break missingId;
      }

      id = R.id.txt_beta_update;
      TextView txtBetaUpdate = ViewBindings.findChildViewById(rootView, id);
      if (txtBetaUpdate == null) {
        break missingId;
      }

      id = R.id.txt_camera;
      TextView txtCamera = ViewBindings.findChildViewById(rootView, id);
      if (txtCamera == null) {
        break missingId;
      }

      id = R.id.txt_cast_video_details;
      TextView txtCastVideoDetails = ViewBindings.findChildViewById(rootView, id);
      if (txtCastVideoDetails == null) {
        break missingId;
      }

      id = R.id.txt_check_update;
      TextView txtCheckUpdate = ViewBindings.findChildViewById(rootView, id);
      if (txtCheckUpdate == null) {
        break missingId;
      }

      id = R.id.txt_exit;
      TextView txtExit = ViewBindings.findChildViewById(rootView, id);
      if (txtExit == null) {
        break missingId;
      }

      id = R.id.txt_expire;
      TextView txtExpire = ViewBindings.findChildViewById(rootView, id);
      if (txtExpire == null) {
        break missingId;
      }

      id = R.id.txt_location;
      TextView txtLocation = ViewBindings.findChildViewById(rootView, id);
      if (txtLocation == null) {
        break missingId;
      }

      id = R.id.txt_machine;
      TextView txtMachine = ViewBindings.findChildViewById(rootView, id);
      if (txtMachine == null) {
        break missingId;
      }

      id = R.id.txt_new_version;
      TextView txtNewVersion = ViewBindings.findChildViewById(rootView, id);
      if (txtNewVersion == null) {
        break missingId;
      }

      id = R.id.txt_reactivate;
      TextView txtReactivate = ViewBindings.findChildViewById(rootView, id);
      if (txtReactivate == null) {
        break missingId;
      }

      id = R.id.txt_serial;
      TextView txtSerial = ViewBindings.findChildViewById(rootView, id);
      if (txtSerial == null) {
        break missingId;
      }

      id = R.id.txt_space;
      TextView txtSpace = ViewBindings.findChildViewById(rootView, id);
      if (txtSpace == null) {
        break missingId;
      }

      id = R.id.txt_storage;
      TextView txtStorage = ViewBindings.findChildViewById(rootView, id);
      if (txtStorage == null) {
        break missingId;
      }

      id = R.id.txt_stream_details;
      TextView txtStreamDetails = ViewBindings.findChildViewById(rootView, id);
      if (txtStreamDetails == null) {
        break missingId;
      }

      id = R.id.txt_transcode;
      TextView txtTranscode = ViewBindings.findChildViewById(rootView, id);
      if (txtTranscode == null) {
        break missingId;
      }

      id = R.id.txt_update;
      TextView txtUpdate = ViewBindings.findChildViewById(rootView, id);
      if (txtUpdate == null) {
        break missingId;
      }

      id = R.id.txt_usb_cam;
      TextView txtUsbCam = ViewBindings.findChildViewById(rootView, id);
      if (txtUsbCam == null) {
        break missingId;
      }

      id = R.id.txt_version;
      TextView txtVersion = ViewBindings.findChildViewById(rootView, id);
      if (txtVersion == null) {
        break missingId;
      }

      id = R.id.txt_video_details;
      TextView txtVideoDetails = ViewBindings.findChildViewById(rootView, id);
      if (txtVideoDetails == null) {
        break missingId;
      }

      id = R.id.txt_wifi_camera;
      TextView txtWifiCamera = ViewBindings.findChildViewById(rootView, id);
      if (txtWifiCamera == null) {
        break missingId;
      }

      id = R.id.usb_audio_bitrate;
      MySpinner usbAudioBitrate = ViewBindings.findChildViewById(rootView, id);
      if (usbAudioBitrate == null) {
        break missingId;
      }

      id = R.id.usb_audio_src;
      MySpinner usbAudioSrc = ViewBindings.findChildViewById(rootView, id);
      if (usbAudioSrc == null) {
        break missingId;
      }

      id = R.id.usb_bluetooth_src;
      MySpinner usbBluetoothSrc = ViewBindings.findChildViewById(rootView, id);
      if (usbBluetoothSrc == null) {
        break missingId;
      }

      id = R.id.usb_channel_count;
      MySpinner usbChannelCount = ViewBindings.findChildViewById(rootView, id);
      if (usbChannelCount == null) {
        break missingId;
      }

      id = R.id.usb_path_ll;
      LinearLayout usbPathLl = ViewBindings.findChildViewById(rootView, id);
      if (usbPathLl == null) {
        break missingId;
      }

      id = R.id.usb_radio_bluetooth;
      Switch usbRadioBluetooth = ViewBindings.findChildViewById(rootView, id);
      if (usbRadioBluetooth == null) {
        break missingId;
      }

      id = R.id.usb_sample_rate;
      MySpinner usbSampleRate = ViewBindings.findChildViewById(rootView, id);
      if (usbSampleRate == null) {
        break missingId;
      }

      return new FragmentSettingsBinding((RelativeLayout) rootView, accessibilityStatisTitle,
          audioOptionBitrate, audioOptionChannelCount, audioOptionSampleRate, audioOptions,
          audioPrefMic, audioSrc, bluetoothAudioSrc, cardBeta, edtBitrate, edtCastBitrate,
          edtCastKeyFrame, edtCloud, edtKeyFrame, edtPin, edtSplit, edtStreamingBitrate,
          edtStreamingKeyFrame, edtUsbMaxFps, edtUsbMinFps, listCameras, lyAudio, lyCastVideoCustom,
          lyCastVideoSettings, lyExpire, lyRecordingSettings, lyStreamingCustom,
          lyStreamingSettings, lyUsb, lyVideoCustom, lyVuMeter, spinnerAdaptive, spinnerAudioSrc,
          spinnerCastFrame, spinnerCastResolution, spinnerFrame, spinnerQuality, spinnerResolution,
          spinnerSampleRate, spinnerUsbCodec, spinnerUsbResolution, streamingAudioBitrate,
          streamingFrame, streamingQuality, streamingResolution, swtAdaptiveFps, swtAutoRecord,
          swtConvertUi, swtEncryption, swtFifo, swtKeyService, swtOrientation, swtRadioAccessbility,
          swtRadioBluetooth, swtRadioMode, swtRecAudio, swtSecureMulti, swtTimestamp, swtTranscode,
          swtVuMeter, tvExpirationDate, tvStorageLocation, txtBetaUpdate, txtCamera,
          txtCastVideoDetails, txtCheckUpdate, txtExit, txtExpire, txtLocation, txtMachine,
          txtNewVersion, txtReactivate, txtSerial, txtSpace, txtStorage, txtStreamDetails,
          txtTranscode, txtUpdate, txtUsbCam, txtVersion, txtVideoDetails, txtWifiCamera,
          usbAudioBitrate, usbAudioSrc, usbBluetoothSrc, usbChannelCount, usbPathLl,
          usbRadioBluetooth, usbSampleRate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
