// This file was generated by PermissionsDispatcher. Do not modify!
package com.checkmate.android.util;

import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;
import java.lang.String;
import permissions.dispatcher.PermissionUtils;

final class MainActivityPermissionsDispatcher {
  private static final int REQUEST_LAUNCHAUDIO = 0;

  private static final String[] PERMISSION_LAUNCHAUDIO = new String[] {"android.permission.RECORD_AUDIO"};

  private static final int REQUEST_LAUNCHAUDIORECORD = 1;

  private static final String[] PERMISSION_LAUNCHAUDIORECORD = new String[] {"android.permission.RECORD_AUDIO","android.permission.WRITE_EXTERNAL_STORAGE"};

  private static final int REQUEST_LAUNCHRECORD = 2;

  private static final String[] PERMISSION_LAUNCHRECORD = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"};

  private MainActivityPermissionsDispatcher() {
  }

  static void launchAudioRecordWithPermissionCheck(@NonNull MainActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_LAUNCHAUDIORECORD)) {
      target.launchAudioRecord();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_LAUNCHAUDIORECORD, REQUEST_LAUNCHAUDIORECORD);
    }
  }

  static void launchAudioWithPermissionCheck(@NonNull MainActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_LAUNCHAUDIO)) {
      target.launchAudio();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_LAUNCHAUDIO, REQUEST_LAUNCHAUDIO);
    }
  }

  static void launchRecordWithPermissionCheck(@NonNull MainActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_LAUNCHRECORD)) {
      target.launchRecord();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_LAUNCHRECORD, REQUEST_LAUNCHRECORD);
    }
  }

  static void onRequestPermissionsResult(@NonNull MainActivity target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_LAUNCHAUDIORECORD:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.launchAudioRecord();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_LAUNCHAUDIORECORD)) {
          target.onNeverAskAgainAudioRecord();
        } else {
          target.onDeniedAudioRecord();
        }
      }
      break;
      case REQUEST_LAUNCHAUDIO:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.launchAudio();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_LAUNCHAUDIO)) {
          target.onNeverAskAgainAudio();
        } else {
          target.onDeniedAudio();
        }
      }
      break;
      case REQUEST_LAUNCHRECORD:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.launchRecord();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_LAUNCHRECORD)) {
          target.onNeverAskAgainRecord();
        } else {
          target.onDeniedRecord();
        }
      }
      break;
      default:
      break;
    }
  }
}
