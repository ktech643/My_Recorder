// Generated by Dagger (https://dagger.dev).
package com.checkmate.android.util.HttpServer;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ServiceModule_ProvideUsbServiceFactory implements Factory<BgService> {
  private final ServiceModule module;

  private final Provider<UsbServiceController> controllerProvider;

  public ServiceModule_ProvideUsbServiceFactory(ServiceModule module,
      Provider<UsbServiceController> controllerProvider) {
    this.module = module;
    this.controllerProvider = controllerProvider;
  }

  @Override
  public BgService get() {
    return provideUsbService(module, controllerProvider.get());
  }

  public static ServiceModule_ProvideUsbServiceFactory create(ServiceModule module,
      Provider<UsbServiceController> controllerProvider) {
    return new ServiceModule_ProvideUsbServiceFactory(module, controllerProvider);
  }

  public static BgService provideUsbService(ServiceModule instance,
      UsbServiceController controller) {
    return Preconditions.checkNotNullFromProvides(instance.provideUsbService(controller));
  }
}
