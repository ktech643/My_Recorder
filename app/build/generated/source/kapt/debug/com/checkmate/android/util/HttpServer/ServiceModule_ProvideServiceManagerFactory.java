// Generated by Dagger (https://dagger.dev).
package com.checkmate.android.util.HttpServer;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ServiceModule_ProvideServiceManagerFactory implements Factory<ServiceManager> {
  private final ServiceModule module;

  private final Provider<BgService> cameraServiceProvider;

  private final Provider<BgService> castServiceProvider;

  private final Provider<BgService> usbServiceProvider;

  public ServiceModule_ProvideServiceManagerFactory(ServiceModule module,
      Provider<BgService> cameraServiceProvider, Provider<BgService> castServiceProvider,
      Provider<BgService> usbServiceProvider) {
    this.module = module;
    this.cameraServiceProvider = cameraServiceProvider;
    this.castServiceProvider = castServiceProvider;
    this.usbServiceProvider = usbServiceProvider;
  }

  @Override
  public ServiceManager get() {
    return provideServiceManager(module, cameraServiceProvider.get(), castServiceProvider.get(), usbServiceProvider.get());
  }

  public static ServiceModule_ProvideServiceManagerFactory create(ServiceModule module,
      Provider<BgService> cameraServiceProvider, Provider<BgService> castServiceProvider,
      Provider<BgService> usbServiceProvider) {
    return new ServiceModule_ProvideServiceManagerFactory(module, cameraServiceProvider, castServiceProvider, usbServiceProvider);
  }

  public static ServiceManager provideServiceManager(ServiceModule instance,
      BgService cameraService, BgService castService, BgService usbService) {
    return Preconditions.checkNotNullFromProvides(instance.provideServiceManager(cameraService, castService, usbService));
  }
}
